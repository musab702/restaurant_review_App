"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/oidc-client-ts";
exports.ids = ["vendor-chunks/oidc-client-ts"];
exports.modules = {

/***/ "(ssr)/./node_modules/oidc-client-ts/dist/esm/oidc-client-ts.js":
/*!****************************************************************!*\
  !*** ./node_modules/oidc-client-ts/dist/esm/oidc-client-ts.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessTokenEvents: () => (/* binding */ AccessTokenEvents),\n/* harmony export */   CheckSessionIFrame: () => (/* binding */ CheckSessionIFrame),\n/* harmony export */   DPoPState: () => (/* binding */ DPoPState),\n/* harmony export */   ErrorResponse: () => (/* binding */ ErrorResponse),\n/* harmony export */   ErrorTimeout: () => (/* binding */ ErrorTimeout),\n/* harmony export */   InMemoryWebStorage: () => (/* binding */ InMemoryWebStorage),\n/* harmony export */   IndexedDbDPoPStore: () => (/* binding */ IndexedDbDPoPStore),\n/* harmony export */   Log: () => (/* binding */ Log),\n/* harmony export */   Logger: () => (/* binding */ Logger),\n/* harmony export */   MetadataService: () => (/* binding */ MetadataService),\n/* harmony export */   OidcClient: () => (/* binding */ OidcClient),\n/* harmony export */   OidcClientSettingsStore: () => (/* binding */ OidcClientSettingsStore),\n/* harmony export */   SessionMonitor: () => (/* binding */ SessionMonitor),\n/* harmony export */   SigninResponse: () => (/* binding */ SigninResponse),\n/* harmony export */   SigninState: () => (/* binding */ SigninState),\n/* harmony export */   SignoutResponse: () => (/* binding */ SignoutResponse),\n/* harmony export */   State: () => (/* binding */ State),\n/* harmony export */   User: () => (/* binding */ User),\n/* harmony export */   UserManager: () => (/* binding */ UserManager),\n/* harmony export */   UserManagerSettingsStore: () => (/* binding */ UserManagerSettingsStore),\n/* harmony export */   Version: () => (/* binding */ Version),\n/* harmony export */   WebStorageStateStore: () => (/* binding */ WebStorageStateStore)\n/* harmony export */ });\n/* harmony import */ var jwt_decode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jwt-decode */ \"(ssr)/./node_modules/jwt-decode/build/esm/index.js\");\n// src/utils/Logger.ts\nvar nopLogger = {\n  debug: () => void 0,\n  info: () => void 0,\n  warn: () => void 0,\n  error: () => void 0\n};\nvar level;\nvar logger;\nvar Log = /* @__PURE__ */ ((Log2) => {\n  Log2[Log2[\"NONE\"] = 0] = \"NONE\";\n  Log2[Log2[\"ERROR\"] = 1] = \"ERROR\";\n  Log2[Log2[\"WARN\"] = 2] = \"WARN\";\n  Log2[Log2[\"INFO\"] = 3] = \"INFO\";\n  Log2[Log2[\"DEBUG\"] = 4] = \"DEBUG\";\n  return Log2;\n})(Log || {});\n((Log2) => {\n  function reset() {\n    level = 3 /* INFO */;\n    logger = nopLogger;\n  }\n  Log2.reset = reset;\n  function setLevel(value) {\n    if (!(0 /* NONE */ <= value && value <= 4 /* DEBUG */)) {\n      throw new Error(\"Invalid log level\");\n    }\n    level = value;\n  }\n  Log2.setLevel = setLevel;\n  function setLogger(value) {\n    logger = value;\n  }\n  Log2.setLogger = setLogger;\n})(Log || (Log = {}));\nvar Logger = class _Logger {\n  constructor(_name) {\n    this._name = _name;\n  }\n  /* eslint-disable @typescript-eslint/no-unsafe-enum-comparison */\n  debug(...args) {\n    if (level >= 4 /* DEBUG */) {\n      logger.debug(_Logger._format(this._name, this._method), ...args);\n    }\n  }\n  info(...args) {\n    if (level >= 3 /* INFO */) {\n      logger.info(_Logger._format(this._name, this._method), ...args);\n    }\n  }\n  warn(...args) {\n    if (level >= 2 /* WARN */) {\n      logger.warn(_Logger._format(this._name, this._method), ...args);\n    }\n  }\n  error(...args) {\n    if (level >= 1 /* ERROR */) {\n      logger.error(_Logger._format(this._name, this._method), ...args);\n    }\n  }\n  /* eslint-enable @typescript-eslint/no-unsafe-enum-comparison */\n  throw(err) {\n    this.error(err);\n    throw err;\n  }\n  create(method) {\n    const methodLogger = Object.create(this);\n    methodLogger._method = method;\n    methodLogger.debug(\"begin\");\n    return methodLogger;\n  }\n  static createStatic(name, staticMethod) {\n    const staticLogger = new _Logger(`${name}.${staticMethod}`);\n    staticLogger.debug(\"begin\");\n    return staticLogger;\n  }\n  static _format(name, method) {\n    const prefix = `[${name}]`;\n    return method ? `${prefix} ${method}:` : prefix;\n  }\n  /* eslint-disable @typescript-eslint/no-unsafe-enum-comparison */\n  // helpers for static class methods\n  static debug(name, ...args) {\n    if (level >= 4 /* DEBUG */) {\n      logger.debug(_Logger._format(name), ...args);\n    }\n  }\n  static info(name, ...args) {\n    if (level >= 3 /* INFO */) {\n      logger.info(_Logger._format(name), ...args);\n    }\n  }\n  static warn(name, ...args) {\n    if (level >= 2 /* WARN */) {\n      logger.warn(_Logger._format(name), ...args);\n    }\n  }\n  static error(name, ...args) {\n    if (level >= 1 /* ERROR */) {\n      logger.error(_Logger._format(name), ...args);\n    }\n  }\n  /* eslint-enable @typescript-eslint/no-unsafe-enum-comparison */\n};\nLog.reset();\n\n// src/utils/JwtUtils.ts\n\nvar JwtUtils = class {\n  // IMPORTANT: doesn't validate the token\n  static decode(token) {\n    try {\n      return (0,jwt_decode__WEBPACK_IMPORTED_MODULE_0__.jwtDecode)(token);\n    } catch (err) {\n      Logger.error(\"JwtUtils.decode\", err);\n      throw err;\n    }\n  }\n  static async generateSignedJwt(header, payload, privateKey) {\n    const encodedHeader = CryptoUtils.encodeBase64Url(new TextEncoder().encode(JSON.stringify(header)));\n    const encodedPayload = CryptoUtils.encodeBase64Url(new TextEncoder().encode(JSON.stringify(payload)));\n    const encodedToken = `${encodedHeader}.${encodedPayload}`;\n    const signature = await window.crypto.subtle.sign(\n      {\n        name: \"ECDSA\",\n        hash: { name: \"SHA-256\" }\n      },\n      privateKey,\n      new TextEncoder().encode(encodedToken)\n    );\n    const encodedSignature = CryptoUtils.encodeBase64Url(new Uint8Array(signature));\n    return `${encodedToken}.${encodedSignature}`;\n  }\n};\n\n// src/utils/CryptoUtils.ts\nvar UUID_V4_TEMPLATE = \"10000000-1000-4000-8000-100000000000\";\nvar toBase64 = (val) => btoa([...new Uint8Array(val)].map((chr) => String.fromCharCode(chr)).join(\"\"));\nvar _CryptoUtils = class _CryptoUtils {\n  static _randomWord() {\n    const arr = new Uint32Array(1);\n    crypto.getRandomValues(arr);\n    return arr[0];\n  }\n  /**\n   * Generates RFC4122 version 4 guid\n   */\n  static generateUUIDv4() {\n    const uuid = UUID_V4_TEMPLATE.replace(\n      /[018]/g,\n      (c) => (+c ^ _CryptoUtils._randomWord() & 15 >> +c / 4).toString(16)\n    );\n    return uuid.replace(/-/g, \"\");\n  }\n  /**\n   * PKCE: Generate a code verifier\n   */\n  static generateCodeVerifier() {\n    return _CryptoUtils.generateUUIDv4() + _CryptoUtils.generateUUIDv4() + _CryptoUtils.generateUUIDv4();\n  }\n  /**\n   * PKCE: Generate a code challenge\n   */\n  static async generateCodeChallenge(code_verifier) {\n    if (!crypto.subtle) {\n      throw new Error(\"Crypto.subtle is available only in secure contexts (HTTPS).\");\n    }\n    try {\n      const encoder = new TextEncoder();\n      const data = encoder.encode(code_verifier);\n      const hashed = await crypto.subtle.digest(\"SHA-256\", data);\n      return toBase64(hashed).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n    } catch (err) {\n      Logger.error(\"CryptoUtils.generateCodeChallenge\", err);\n      throw err;\n    }\n  }\n  /**\n   * Generates a base64-encoded string for a basic auth header\n   */\n  static generateBasicAuth(client_id, client_secret) {\n    const encoder = new TextEncoder();\n    const data = encoder.encode([client_id, client_secret].join(\":\"));\n    return toBase64(data);\n  }\n  /**\n   * Generates a hash of a string using a given algorithm\n   * @param alg\n   * @param message\n   */\n  static async hash(alg, message) {\n    const msgUint8 = new TextEncoder().encode(message);\n    const hashBuffer = await crypto.subtle.digest(alg, msgUint8);\n    return new Uint8Array(hashBuffer);\n  }\n  /**\n   * Generates a rfc7638 compliant jwk thumbprint\n   * @param jwk\n   */\n  static async customCalculateJwkThumbprint(jwk) {\n    let jsonObject;\n    switch (jwk.kty) {\n      case \"RSA\":\n        jsonObject = {\n          \"e\": jwk.e,\n          \"kty\": jwk.kty,\n          \"n\": jwk.n\n        };\n        break;\n      case \"EC\":\n        jsonObject = {\n          \"crv\": jwk.crv,\n          \"kty\": jwk.kty,\n          \"x\": jwk.x,\n          \"y\": jwk.y\n        };\n        break;\n      case \"OKP\":\n        jsonObject = {\n          \"crv\": jwk.crv,\n          \"kty\": jwk.kty,\n          \"x\": jwk.x\n        };\n        break;\n      case \"oct\":\n        jsonObject = {\n          \"crv\": jwk.k,\n          \"kty\": jwk.kty\n        };\n        break;\n      default:\n        throw new Error(\"Unknown jwk type\");\n    }\n    const utf8encodedAndHashed = await _CryptoUtils.hash(\"SHA-256\", JSON.stringify(jsonObject));\n    return _CryptoUtils.encodeBase64Url(utf8encodedAndHashed);\n  }\n  static async generateDPoPProof({\n    url,\n    accessToken,\n    httpMethod,\n    keyPair,\n    nonce\n  }) {\n    let hashedToken;\n    let encodedHash;\n    const payload = {\n      \"jti\": window.crypto.randomUUID(),\n      \"htm\": httpMethod != null ? httpMethod : \"GET\",\n      \"htu\": url,\n      \"iat\": Math.floor(Date.now() / 1e3)\n    };\n    if (accessToken) {\n      hashedToken = await _CryptoUtils.hash(\"SHA-256\", accessToken);\n      encodedHash = _CryptoUtils.encodeBase64Url(hashedToken);\n      payload.ath = encodedHash;\n    }\n    if (nonce) {\n      payload.nonce = nonce;\n    }\n    try {\n      const publicJwk = await crypto.subtle.exportKey(\"jwk\", keyPair.publicKey);\n      const header = {\n        \"alg\": \"ES256\",\n        \"typ\": \"dpop+jwt\",\n        \"jwk\": {\n          \"crv\": publicJwk.crv,\n          \"kty\": publicJwk.kty,\n          \"x\": publicJwk.x,\n          \"y\": publicJwk.y\n        }\n      };\n      return await JwtUtils.generateSignedJwt(header, payload, keyPair.privateKey);\n    } catch (err) {\n      if (err instanceof TypeError) {\n        throw new Error(`Error exporting dpop public key: ${err.message}`);\n      } else {\n        throw err;\n      }\n    }\n  }\n  static async generateDPoPJkt(keyPair) {\n    try {\n      const publicJwk = await crypto.subtle.exportKey(\"jwk\", keyPair.publicKey);\n      return await _CryptoUtils.customCalculateJwkThumbprint(publicJwk);\n    } catch (err) {\n      if (err instanceof TypeError) {\n        throw new Error(`Could not retrieve dpop keys from storage: ${err.message}`);\n      } else {\n        throw err;\n      }\n    }\n  }\n  static async generateDPoPKeys() {\n    return await window.crypto.subtle.generateKey(\n      {\n        name: \"ECDSA\",\n        namedCurve: \"P-256\"\n      },\n      false,\n      [\"sign\", \"verify\"]\n    );\n  }\n};\n/**\n * Generates a base64url encoded string\n */\n_CryptoUtils.encodeBase64Url = (input) => {\n  return toBase64(input).replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n};\nvar CryptoUtils = _CryptoUtils;\n\n// src/utils/Event.ts\nvar Event = class {\n  constructor(_name) {\n    this._name = _name;\n    this._callbacks = [];\n    this._logger = new Logger(`Event('${this._name}')`);\n  }\n  addHandler(cb) {\n    this._callbacks.push(cb);\n    return () => this.removeHandler(cb);\n  }\n  removeHandler(cb) {\n    const idx = this._callbacks.lastIndexOf(cb);\n    if (idx >= 0) {\n      this._callbacks.splice(idx, 1);\n    }\n  }\n  async raise(...ev) {\n    this._logger.debug(\"raise:\", ...ev);\n    for (const cb of this._callbacks) {\n      await cb(...ev);\n    }\n  }\n};\n\n// src/utils/PopupUtils.ts\nvar PopupUtils = class {\n  /**\n   * Populates a map of window features with a placement centered in front of\n   * the current window. If no explicit width is given, a default value is\n   * binned into [800, 720, 600, 480, 360] based on the current window's width.\n   */\n  static center({ ...features }) {\n    var _a, _b, _c;\n    if (features.width == null)\n      features.width = (_a = [800, 720, 600, 480].find((width) => width <= window.outerWidth / 1.618)) != null ? _a : 360;\n    (_b = features.left) != null ? _b : features.left = Math.max(0, Math.round(window.screenX + (window.outerWidth - features.width) / 2));\n    if (features.height != null)\n      (_c = features.top) != null ? _c : features.top = Math.max(0, Math.round(window.screenY + (window.outerHeight - features.height) / 2));\n    return features;\n  }\n  static serialize(features) {\n    return Object.entries(features).filter(([, value]) => value != null).map(([key, value]) => `${key}=${typeof value !== \"boolean\" ? value : value ? \"yes\" : \"no\"}`).join(\",\");\n  }\n};\n\n// src/utils/Timer.ts\nvar Timer = class _Timer extends Event {\n  constructor() {\n    super(...arguments);\n    this._logger = new Logger(`Timer('${this._name}')`);\n    this._timerHandle = null;\n    this._expiration = 0;\n    this._callback = () => {\n      const diff = this._expiration - _Timer.getEpochTime();\n      this._logger.debug(\"timer completes in\", diff);\n      if (this._expiration <= _Timer.getEpochTime()) {\n        this.cancel();\n        void super.raise();\n      }\n    };\n  }\n  // get the time\n  static getEpochTime() {\n    return Math.floor(Date.now() / 1e3);\n  }\n  init(durationInSeconds) {\n    const logger2 = this._logger.create(\"init\");\n    durationInSeconds = Math.max(Math.floor(durationInSeconds), 1);\n    const expiration = _Timer.getEpochTime() + durationInSeconds;\n    if (this.expiration === expiration && this._timerHandle) {\n      logger2.debug(\"skipping since already initialized for expiration at\", this.expiration);\n      return;\n    }\n    this.cancel();\n    logger2.debug(\"using duration\", durationInSeconds);\n    this._expiration = expiration;\n    const timerDurationInSeconds = Math.min(durationInSeconds, 5);\n    this._timerHandle = setInterval(this._callback, timerDurationInSeconds * 1e3);\n  }\n  get expiration() {\n    return this._expiration;\n  }\n  cancel() {\n    this._logger.create(\"cancel\");\n    if (this._timerHandle) {\n      clearInterval(this._timerHandle);\n      this._timerHandle = null;\n    }\n  }\n};\n\n// src/utils/UrlUtils.ts\nvar UrlUtils = class {\n  static readParams(url, responseMode = \"query\") {\n    if (!url) throw new TypeError(\"Invalid URL\");\n    const parsedUrl = new URL(url, \"http://127.0.0.1\");\n    const params = parsedUrl[responseMode === \"fragment\" ? \"hash\" : \"search\"];\n    return new URLSearchParams(params.slice(1));\n  }\n};\nvar URL_STATE_DELIMITER = \";\";\n\n// src/errors/ErrorResponse.ts\nvar ErrorResponse = class extends Error {\n  constructor(args, form) {\n    var _a, _b, _c;\n    super(args.error_description || args.error || \"\");\n    this.form = form;\n    /** Marker to detect class: \"ErrorResponse\" */\n    this.name = \"ErrorResponse\";\n    if (!args.error) {\n      Logger.error(\"ErrorResponse\", \"No error passed\");\n      throw new Error(\"No error passed\");\n    }\n    this.error = args.error;\n    this.error_description = (_a = args.error_description) != null ? _a : null;\n    this.error_uri = (_b = args.error_uri) != null ? _b : null;\n    this.state = args.userState;\n    this.session_state = (_c = args.session_state) != null ? _c : null;\n    this.url_state = args.url_state;\n  }\n};\n\n// src/errors/ErrorTimeout.ts\nvar ErrorTimeout = class extends Error {\n  constructor(message) {\n    super(message);\n    /** Marker to detect class: \"ErrorTimeout\" */\n    this.name = \"ErrorTimeout\";\n  }\n};\n\n// src/AccessTokenEvents.ts\nvar AccessTokenEvents = class {\n  constructor(args) {\n    this._logger = new Logger(\"AccessTokenEvents\");\n    this._expiringTimer = new Timer(\"Access token expiring\");\n    this._expiredTimer = new Timer(\"Access token expired\");\n    this._expiringNotificationTimeInSeconds = args.expiringNotificationTimeInSeconds;\n  }\n  async load(container) {\n    const logger2 = this._logger.create(\"load\");\n    if (container.access_token && container.expires_in !== void 0) {\n      const duration = container.expires_in;\n      logger2.debug(\"access token present, remaining duration:\", duration);\n      if (duration > 0) {\n        let expiring = duration - this._expiringNotificationTimeInSeconds;\n        if (expiring <= 0) {\n          expiring = 1;\n        }\n        logger2.debug(\"registering expiring timer, raising in\", expiring, \"seconds\");\n        this._expiringTimer.init(expiring);\n      } else {\n        logger2.debug(\"canceling existing expiring timer because we're past expiration.\");\n        this._expiringTimer.cancel();\n      }\n      const expired = duration + 1;\n      logger2.debug(\"registering expired timer, raising in\", expired, \"seconds\");\n      this._expiredTimer.init(expired);\n    } else {\n      this._expiringTimer.cancel();\n      this._expiredTimer.cancel();\n    }\n  }\n  async unload() {\n    this._logger.debug(\"unload: canceling existing access token timers\");\n    this._expiringTimer.cancel();\n    this._expiredTimer.cancel();\n  }\n  /**\n   * Add callback: Raised prior to the access token expiring.\n   */\n  addAccessTokenExpiring(cb) {\n    return this._expiringTimer.addHandler(cb);\n  }\n  /**\n   * Remove callback: Raised prior to the access token expiring.\n   */\n  removeAccessTokenExpiring(cb) {\n    this._expiringTimer.removeHandler(cb);\n  }\n  /**\n   * Add callback: Raised after the access token has expired.\n   */\n  addAccessTokenExpired(cb) {\n    return this._expiredTimer.addHandler(cb);\n  }\n  /**\n   * Remove callback: Raised after the access token has expired.\n   */\n  removeAccessTokenExpired(cb) {\n    this._expiredTimer.removeHandler(cb);\n  }\n};\n\n// src/CheckSessionIFrame.ts\nvar CheckSessionIFrame = class {\n  constructor(_callback, _client_id, url, _intervalInSeconds, _stopOnError) {\n    this._callback = _callback;\n    this._client_id = _client_id;\n    this._intervalInSeconds = _intervalInSeconds;\n    this._stopOnError = _stopOnError;\n    this._logger = new Logger(\"CheckSessionIFrame\");\n    this._timer = null;\n    this._session_state = null;\n    this._message = (e) => {\n      if (e.origin === this._frame_origin && e.source === this._frame.contentWindow) {\n        if (e.data === \"error\") {\n          this._logger.error(\"error message from check session op iframe\");\n          if (this._stopOnError) {\n            this.stop();\n          }\n        } else if (e.data === \"changed\") {\n          this._logger.debug(\"changed message from check session op iframe\");\n          this.stop();\n          void this._callback();\n        } else {\n          this._logger.debug(e.data + \" message from check session op iframe\");\n        }\n      }\n    };\n    const parsedUrl = new URL(url);\n    this._frame_origin = parsedUrl.origin;\n    this._frame = window.document.createElement(\"iframe\");\n    this._frame.style.visibility = \"hidden\";\n    this._frame.style.position = \"fixed\";\n    this._frame.style.left = \"-1000px\";\n    this._frame.style.top = \"0\";\n    this._frame.width = \"0\";\n    this._frame.height = \"0\";\n    this._frame.src = parsedUrl.href;\n  }\n  load() {\n    return new Promise((resolve) => {\n      this._frame.onload = () => {\n        resolve();\n      };\n      window.document.body.appendChild(this._frame);\n      window.addEventListener(\"message\", this._message, false);\n    });\n  }\n  start(session_state) {\n    if (this._session_state === session_state) {\n      return;\n    }\n    this._logger.create(\"start\");\n    this.stop();\n    this._session_state = session_state;\n    const send = () => {\n      if (!this._frame.contentWindow || !this._session_state) {\n        return;\n      }\n      this._frame.contentWindow.postMessage(this._client_id + \" \" + this._session_state, this._frame_origin);\n    };\n    send();\n    this._timer = setInterval(send, this._intervalInSeconds * 1e3);\n  }\n  stop() {\n    this._logger.create(\"stop\");\n    this._session_state = null;\n    if (this._timer) {\n      clearInterval(this._timer);\n      this._timer = null;\n    }\n  }\n};\n\n// src/InMemoryWebStorage.ts\nvar InMemoryWebStorage = class {\n  constructor() {\n    this._logger = new Logger(\"InMemoryWebStorage\");\n    this._data = {};\n  }\n  clear() {\n    this._logger.create(\"clear\");\n    this._data = {};\n  }\n  getItem(key) {\n    this._logger.create(`getItem('${key}')`);\n    return this._data[key];\n  }\n  setItem(key, value) {\n    this._logger.create(`setItem('${key}')`);\n    this._data[key] = value;\n  }\n  removeItem(key) {\n    this._logger.create(`removeItem('${key}')`);\n    delete this._data[key];\n  }\n  get length() {\n    return Object.getOwnPropertyNames(this._data).length;\n  }\n  key(index) {\n    return Object.getOwnPropertyNames(this._data)[index];\n  }\n};\n\n// src/errors/ErrorDPoPNonce.ts\nvar ErrorDPoPNonce = class extends Error {\n  constructor(nonce, message) {\n    super(message);\n    /** Marker to detect class: \"ErrorDPoPNonce\" */\n    this.name = \"ErrorDPoPNonce\";\n    this.nonce = nonce;\n  }\n};\n\n// src/JsonService.ts\nvar JsonService = class {\n  constructor(additionalContentTypes = [], _jwtHandler = null, _extraHeaders = {}) {\n    this._jwtHandler = _jwtHandler;\n    this._extraHeaders = _extraHeaders;\n    this._logger = new Logger(\"JsonService\");\n    this._contentTypes = [];\n    this._contentTypes.push(...additionalContentTypes, \"application/json\");\n    if (_jwtHandler) {\n      this._contentTypes.push(\"application/jwt\");\n    }\n  }\n  async fetchWithTimeout(input, init = {}) {\n    const { timeoutInSeconds, ...initFetch } = init;\n    if (!timeoutInSeconds) {\n      return await fetch(input, initFetch);\n    }\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeoutInSeconds * 1e3);\n    try {\n      const response = await fetch(input, {\n        ...init,\n        signal: controller.signal\n      });\n      return response;\n    } catch (err) {\n      if (err instanceof DOMException && err.name === \"AbortError\") {\n        throw new ErrorTimeout(\"Network timed out\");\n      }\n      throw err;\n    } finally {\n      clearTimeout(timeoutId);\n    }\n  }\n  async getJson(url, {\n    token,\n    credentials,\n    timeoutInSeconds\n  } = {}) {\n    const logger2 = this._logger.create(\"getJson\");\n    const headers = {\n      \"Accept\": this._contentTypes.join(\", \")\n    };\n    if (token) {\n      logger2.debug(\"token passed, setting Authorization header\");\n      headers[\"Authorization\"] = \"Bearer \" + token;\n    }\n    this._appendExtraHeaders(headers);\n    let response;\n    try {\n      logger2.debug(\"url:\", url);\n      response = await this.fetchWithTimeout(url, { method: \"GET\", headers, timeoutInSeconds, credentials });\n    } catch (err) {\n      logger2.error(\"Network Error\");\n      throw err;\n    }\n    logger2.debug(\"HTTP response received, status\", response.status);\n    const contentType = response.headers.get(\"Content-Type\");\n    if (contentType && !this._contentTypes.find((item) => contentType.startsWith(item))) {\n      logger2.throw(new Error(`Invalid response Content-Type: ${contentType != null ? contentType : \"undefined\"}, from URL: ${url}`));\n    }\n    if (response.ok && this._jwtHandler && (contentType == null ? void 0 : contentType.startsWith(\"application/jwt\"))) {\n      return await this._jwtHandler(await response.text());\n    }\n    let json;\n    try {\n      json = await response.json();\n    } catch (err) {\n      logger2.error(\"Error parsing JSON response\", err);\n      if (response.ok) throw err;\n      throw new Error(`${response.statusText} (${response.status})`);\n    }\n    if (!response.ok) {\n      logger2.error(\"Error from server:\", json);\n      if (json.error) {\n        throw new ErrorResponse(json);\n      }\n      throw new Error(`${response.statusText} (${response.status}): ${JSON.stringify(json)}`);\n    }\n    return json;\n  }\n  async postForm(url, {\n    body,\n    basicAuth,\n    timeoutInSeconds,\n    initCredentials,\n    extraHeaders\n  }) {\n    const logger2 = this._logger.create(\"postForm\");\n    const headers = {\n      \"Accept\": this._contentTypes.join(\", \"),\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      ...extraHeaders\n    };\n    if (basicAuth !== void 0) {\n      headers[\"Authorization\"] = \"Basic \" + basicAuth;\n    }\n    this._appendExtraHeaders(headers);\n    let response;\n    try {\n      logger2.debug(\"url:\", url);\n      response = await this.fetchWithTimeout(url, { method: \"POST\", headers, body, timeoutInSeconds, credentials: initCredentials });\n    } catch (err) {\n      logger2.error(\"Network error\");\n      throw err;\n    }\n    logger2.debug(\"HTTP response received, status\", response.status);\n    const contentType = response.headers.get(\"Content-Type\");\n    if (contentType && !this._contentTypes.find((item) => contentType.startsWith(item))) {\n      throw new Error(`Invalid response Content-Type: ${contentType != null ? contentType : \"undefined\"}, from URL: ${url}`);\n    }\n    const responseText = await response.text();\n    let json = {};\n    if (responseText) {\n      try {\n        json = JSON.parse(responseText);\n      } catch (err) {\n        logger2.error(\"Error parsing JSON response\", err);\n        if (response.ok) throw err;\n        throw new Error(`${response.statusText} (${response.status})`);\n      }\n    }\n    if (!response.ok) {\n      logger2.error(\"Error from server:\", json);\n      if (response.headers.has(\"dpop-nonce\")) {\n        const nonce = response.headers.get(\"dpop-nonce\");\n        throw new ErrorDPoPNonce(nonce, `${JSON.stringify(json)}`);\n      }\n      if (json.error) {\n        throw new ErrorResponse(json, body);\n      }\n      throw new Error(`${response.statusText} (${response.status}): ${JSON.stringify(json)}`);\n    }\n    return json;\n  }\n  _appendExtraHeaders(headers) {\n    const logger2 = this._logger.create(\"appendExtraHeaders\");\n    const customKeys = Object.keys(this._extraHeaders);\n    const protectedHeaders = [\n      \"accept\",\n      \"content-type\"\n    ];\n    const preventOverride = [\n      \"authorization\"\n    ];\n    if (customKeys.length === 0) {\n      return;\n    }\n    customKeys.forEach((headerName) => {\n      if (protectedHeaders.includes(headerName.toLocaleLowerCase())) {\n        logger2.warn(\"Protected header could not be set\", headerName, protectedHeaders);\n        return;\n      }\n      if (preventOverride.includes(headerName.toLocaleLowerCase()) && Object.keys(headers).includes(headerName)) {\n        logger2.warn(\"Header could not be overridden\", headerName, preventOverride);\n        return;\n      }\n      const content = typeof this._extraHeaders[headerName] === \"function\" ? this._extraHeaders[headerName]() : this._extraHeaders[headerName];\n      if (content && content !== \"\") {\n        headers[headerName] = content;\n      }\n    });\n  }\n};\n\n// src/MetadataService.ts\nvar MetadataService = class {\n  constructor(_settings) {\n    this._settings = _settings;\n    this._logger = new Logger(\"MetadataService\");\n    this._signingKeys = null;\n    this._metadata = null;\n    this._metadataUrl = this._settings.metadataUrl;\n    this._jsonService = new JsonService(\n      [\"application/jwk-set+json\"],\n      null,\n      this._settings.extraHeaders\n    );\n    if (this._settings.signingKeys) {\n      this._logger.debug(\"using signingKeys from settings\");\n      this._signingKeys = this._settings.signingKeys;\n    }\n    if (this._settings.metadata) {\n      this._logger.debug(\"using metadata from settings\");\n      this._metadata = this._settings.metadata;\n    }\n    if (this._settings.fetchRequestCredentials) {\n      this._logger.debug(\"using fetchRequestCredentials from settings\");\n      this._fetchRequestCredentials = this._settings.fetchRequestCredentials;\n    }\n  }\n  resetSigningKeys() {\n    this._signingKeys = null;\n  }\n  async getMetadata() {\n    const logger2 = this._logger.create(\"getMetadata\");\n    if (this._metadata) {\n      logger2.debug(\"using cached values\");\n      return this._metadata;\n    }\n    if (!this._metadataUrl) {\n      logger2.throw(new Error(\"No authority or metadataUrl configured on settings\"));\n      throw null;\n    }\n    logger2.debug(\"getting metadata from\", this._metadataUrl);\n    const metadata = await this._jsonService.getJson(this._metadataUrl, { credentials: this._fetchRequestCredentials, timeoutInSeconds: this._settings.requestTimeoutInSeconds });\n    logger2.debug(\"merging remote JSON with seed metadata\");\n    this._metadata = Object.assign({}, metadata, this._settings.metadataSeed);\n    return this._metadata;\n  }\n  getIssuer() {\n    return this._getMetadataProperty(\"issuer\");\n  }\n  getAuthorizationEndpoint() {\n    return this._getMetadataProperty(\"authorization_endpoint\");\n  }\n  getUserInfoEndpoint() {\n    return this._getMetadataProperty(\"userinfo_endpoint\");\n  }\n  getTokenEndpoint(optional = true) {\n    return this._getMetadataProperty(\"token_endpoint\", optional);\n  }\n  getCheckSessionIframe() {\n    return this._getMetadataProperty(\"check_session_iframe\", true);\n  }\n  getEndSessionEndpoint() {\n    return this._getMetadataProperty(\"end_session_endpoint\", true);\n  }\n  getRevocationEndpoint(optional = true) {\n    return this._getMetadataProperty(\"revocation_endpoint\", optional);\n  }\n  getKeysEndpoint(optional = true) {\n    return this._getMetadataProperty(\"jwks_uri\", optional);\n  }\n  async _getMetadataProperty(name, optional = false) {\n    const logger2 = this._logger.create(`_getMetadataProperty('${name}')`);\n    const metadata = await this.getMetadata();\n    logger2.debug(\"resolved\");\n    if (metadata[name] === void 0) {\n      if (optional === true) {\n        logger2.warn(\"Metadata does not contain optional property\");\n        return void 0;\n      }\n      logger2.throw(new Error(\"Metadata does not contain property \" + name));\n    }\n    return metadata[name];\n  }\n  async getSigningKeys() {\n    const logger2 = this._logger.create(\"getSigningKeys\");\n    if (this._signingKeys) {\n      logger2.debug(\"returning signingKeys from cache\");\n      return this._signingKeys;\n    }\n    const jwks_uri = await this.getKeysEndpoint(false);\n    logger2.debug(\"got jwks_uri\", jwks_uri);\n    const keySet = await this._jsonService.getJson(jwks_uri, { timeoutInSeconds: this._settings.requestTimeoutInSeconds });\n    logger2.debug(\"got key set\", keySet);\n    if (!Array.isArray(keySet.keys)) {\n      logger2.throw(new Error(\"Missing keys on keyset\"));\n      throw null;\n    }\n    this._signingKeys = keySet.keys;\n    return this._signingKeys;\n  }\n};\n\n// src/WebStorageStateStore.ts\nvar WebStorageStateStore = class {\n  constructor({\n    prefix = \"oidc.\",\n    store = localStorage\n  } = {}) {\n    this._logger = new Logger(\"WebStorageStateStore\");\n    this._store = store;\n    this._prefix = prefix;\n  }\n  async set(key, value) {\n    this._logger.create(`set('${key}')`);\n    key = this._prefix + key;\n    await this._store.setItem(key, value);\n  }\n  async get(key) {\n    this._logger.create(`get('${key}')`);\n    key = this._prefix + key;\n    const item = await this._store.getItem(key);\n    return item;\n  }\n  async remove(key) {\n    this._logger.create(`remove('${key}')`);\n    key = this._prefix + key;\n    const item = await this._store.getItem(key);\n    await this._store.removeItem(key);\n    return item;\n  }\n  async getAllKeys() {\n    this._logger.create(\"getAllKeys\");\n    const len = await this._store.length;\n    const keys = [];\n    for (let index = 0; index < len; index++) {\n      const key = await this._store.key(index);\n      if (key && key.indexOf(this._prefix) === 0) {\n        keys.push(key.substr(this._prefix.length));\n      }\n    }\n    return keys;\n  }\n};\n\n// src/OidcClientSettings.ts\nvar DefaultResponseType = \"code\";\nvar DefaultScope = \"openid\";\nvar DefaultClientAuthentication = \"client_secret_post\";\nvar DefaultStaleStateAgeInSeconds = 60 * 15;\nvar OidcClientSettingsStore = class {\n  constructor({\n    // metadata related\n    authority,\n    metadataUrl,\n    metadata,\n    signingKeys,\n    metadataSeed,\n    // client related\n    client_id,\n    client_secret,\n    response_type = DefaultResponseType,\n    scope = DefaultScope,\n    redirect_uri,\n    post_logout_redirect_uri,\n    client_authentication = DefaultClientAuthentication,\n    // optional protocol\n    prompt,\n    display,\n    max_age,\n    ui_locales,\n    acr_values,\n    resource,\n    response_mode,\n    // behavior flags\n    filterProtocolClaims = true,\n    loadUserInfo = false,\n    requestTimeoutInSeconds,\n    staleStateAgeInSeconds = DefaultStaleStateAgeInSeconds,\n    mergeClaimsStrategy = { array: \"replace\" },\n    disablePKCE = false,\n    // other behavior\n    stateStore,\n    revokeTokenAdditionalContentTypes,\n    fetchRequestCredentials,\n    refreshTokenAllowedScope,\n    // extra\n    extraQueryParams = {},\n    extraTokenParams = {},\n    extraHeaders = {},\n    dpop,\n    omitScopeWhenRequesting = false\n  }) {\n    var _a;\n    this.authority = authority;\n    if (metadataUrl) {\n      this.metadataUrl = metadataUrl;\n    } else {\n      this.metadataUrl = authority;\n      if (authority) {\n        if (!this.metadataUrl.endsWith(\"/\")) {\n          this.metadataUrl += \"/\";\n        }\n        this.metadataUrl += \".well-known/openid-configuration\";\n      }\n    }\n    this.metadata = metadata;\n    this.metadataSeed = metadataSeed;\n    this.signingKeys = signingKeys;\n    this.client_id = client_id;\n    this.client_secret = client_secret;\n    this.response_type = response_type;\n    this.scope = scope;\n    this.redirect_uri = redirect_uri;\n    this.post_logout_redirect_uri = post_logout_redirect_uri;\n    this.client_authentication = client_authentication;\n    this.prompt = prompt;\n    this.display = display;\n    this.max_age = max_age;\n    this.ui_locales = ui_locales;\n    this.acr_values = acr_values;\n    this.resource = resource;\n    this.response_mode = response_mode;\n    this.filterProtocolClaims = filterProtocolClaims != null ? filterProtocolClaims : true;\n    this.loadUserInfo = !!loadUserInfo;\n    this.staleStateAgeInSeconds = staleStateAgeInSeconds;\n    this.mergeClaimsStrategy = mergeClaimsStrategy;\n    this.omitScopeWhenRequesting = omitScopeWhenRequesting;\n    this.disablePKCE = !!disablePKCE;\n    this.revokeTokenAdditionalContentTypes = revokeTokenAdditionalContentTypes;\n    this.fetchRequestCredentials = fetchRequestCredentials ? fetchRequestCredentials : \"same-origin\";\n    this.requestTimeoutInSeconds = requestTimeoutInSeconds;\n    if (stateStore) {\n      this.stateStore = stateStore;\n    } else {\n      const store = typeof window !== \"undefined\" ? window.localStorage : new InMemoryWebStorage();\n      this.stateStore = new WebStorageStateStore({ store });\n    }\n    this.refreshTokenAllowedScope = refreshTokenAllowedScope;\n    this.extraQueryParams = extraQueryParams;\n    this.extraTokenParams = extraTokenParams;\n    this.extraHeaders = extraHeaders;\n    this.dpop = dpop;\n    if (this.dpop && !((_a = this.dpop) == null ? void 0 : _a.store)) {\n      throw new Error(\"A DPoPStore is required when dpop is enabled\");\n    }\n  }\n};\n\n// src/UserInfoService.ts\nvar UserInfoService = class {\n  constructor(_settings, _metadataService) {\n    this._settings = _settings;\n    this._metadataService = _metadataService;\n    this._logger = new Logger(\"UserInfoService\");\n    this._getClaimsFromJwt = async (responseText) => {\n      const logger2 = this._logger.create(\"_getClaimsFromJwt\");\n      try {\n        const payload = JwtUtils.decode(responseText);\n        logger2.debug(\"JWT decoding successful\");\n        return payload;\n      } catch (err) {\n        logger2.error(\"Error parsing JWT response\");\n        throw err;\n      }\n    };\n    this._jsonService = new JsonService(\n      void 0,\n      this._getClaimsFromJwt,\n      this._settings.extraHeaders\n    );\n  }\n  async getClaims(token) {\n    const logger2 = this._logger.create(\"getClaims\");\n    if (!token) {\n      this._logger.throw(new Error(\"No token passed\"));\n    }\n    const url = await this._metadataService.getUserInfoEndpoint();\n    logger2.debug(\"got userinfo url\", url);\n    const claims = await this._jsonService.getJson(url, {\n      token,\n      credentials: this._settings.fetchRequestCredentials,\n      timeoutInSeconds: this._settings.requestTimeoutInSeconds\n    });\n    logger2.debug(\"got claims\", claims);\n    return claims;\n  }\n};\n\n// src/TokenClient.ts\nvar TokenClient = class {\n  constructor(_settings, _metadataService) {\n    this._settings = _settings;\n    this._metadataService = _metadataService;\n    this._logger = new Logger(\"TokenClient\");\n    this._jsonService = new JsonService(\n      this._settings.revokeTokenAdditionalContentTypes,\n      null,\n      this._settings.extraHeaders\n    );\n  }\n  /**\n   * Exchange code.\n   *\n   * @see https://www.rfc-editor.org/rfc/rfc6749#section-4.1.3\n   */\n  async exchangeCode({\n    grant_type = \"authorization_code\",\n    redirect_uri = this._settings.redirect_uri,\n    client_id = this._settings.client_id,\n    client_secret = this._settings.client_secret,\n    extraHeaders,\n    ...args\n  }) {\n    const logger2 = this._logger.create(\"exchangeCode\");\n    if (!client_id) {\n      logger2.throw(new Error(\"A client_id is required\"));\n    }\n    if (!redirect_uri) {\n      logger2.throw(new Error(\"A redirect_uri is required\"));\n    }\n    if (!args.code) {\n      logger2.throw(new Error(\"A code is required\"));\n    }\n    const params = new URLSearchParams({ grant_type, redirect_uri });\n    for (const [key, value] of Object.entries(args)) {\n      if (value != null) {\n        params.set(key, value);\n      }\n    }\n    let basicAuth;\n    switch (this._settings.client_authentication) {\n      case \"client_secret_basic\":\n        if (client_secret === void 0 || client_secret === null) {\n          logger2.throw(new Error(\"A client_secret is required\"));\n          throw null;\n        }\n        basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);\n        break;\n      case \"client_secret_post\":\n        params.append(\"client_id\", client_id);\n        if (client_secret) {\n          params.append(\"client_secret\", client_secret);\n        }\n        break;\n    }\n    const url = await this._metadataService.getTokenEndpoint(false);\n    logger2.debug(\"got token endpoint\");\n    const response = await this._jsonService.postForm(url, {\n      body: params,\n      basicAuth,\n      timeoutInSeconds: this._settings.requestTimeoutInSeconds,\n      initCredentials: this._settings.fetchRequestCredentials,\n      extraHeaders\n    });\n    logger2.debug(\"got response\");\n    return response;\n  }\n  /**\n   * Exchange credentials.\n   *\n   * @see https://www.rfc-editor.org/rfc/rfc6749#section-4.3.2\n   */\n  async exchangeCredentials({\n    grant_type = \"password\",\n    client_id = this._settings.client_id,\n    client_secret = this._settings.client_secret,\n    scope = this._settings.scope,\n    ...args\n  }) {\n    const logger2 = this._logger.create(\"exchangeCredentials\");\n    if (!client_id) {\n      logger2.throw(new Error(\"A client_id is required\"));\n    }\n    const params = new URLSearchParams({ grant_type });\n    if (!this._settings.omitScopeWhenRequesting) {\n      params.set(\"scope\", scope);\n    }\n    for (const [key, value] of Object.entries(args)) {\n      if (value != null) {\n        params.set(key, value);\n      }\n    }\n    let basicAuth;\n    switch (this._settings.client_authentication) {\n      case \"client_secret_basic\":\n        if (client_secret === void 0 || client_secret === null) {\n          logger2.throw(new Error(\"A client_secret is required\"));\n          throw null;\n        }\n        basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);\n        break;\n      case \"client_secret_post\":\n        params.append(\"client_id\", client_id);\n        if (client_secret) {\n          params.append(\"client_secret\", client_secret);\n        }\n        break;\n    }\n    const url = await this._metadataService.getTokenEndpoint(false);\n    logger2.debug(\"got token endpoint\");\n    const response = await this._jsonService.postForm(url, { body: params, basicAuth, timeoutInSeconds: this._settings.requestTimeoutInSeconds, initCredentials: this._settings.fetchRequestCredentials });\n    logger2.debug(\"got response\");\n    return response;\n  }\n  /**\n   * Exchange a refresh token.\n   *\n   * @see https://www.rfc-editor.org/rfc/rfc6749#section-6\n   */\n  async exchangeRefreshToken({\n    grant_type = \"refresh_token\",\n    client_id = this._settings.client_id,\n    client_secret = this._settings.client_secret,\n    timeoutInSeconds,\n    extraHeaders,\n    ...args\n  }) {\n    const logger2 = this._logger.create(\"exchangeRefreshToken\");\n    if (!client_id) {\n      logger2.throw(new Error(\"A client_id is required\"));\n    }\n    if (!args.refresh_token) {\n      logger2.throw(new Error(\"A refresh_token is required\"));\n    }\n    const params = new URLSearchParams({ grant_type });\n    for (const [key, value] of Object.entries(args)) {\n      if (Array.isArray(value)) {\n        value.forEach((param) => params.append(key, param));\n      } else if (value != null) {\n        params.set(key, value);\n      }\n    }\n    let basicAuth;\n    switch (this._settings.client_authentication) {\n      case \"client_secret_basic\":\n        if (client_secret === void 0 || client_secret === null) {\n          logger2.throw(new Error(\"A client_secret is required\"));\n          throw null;\n        }\n        basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);\n        break;\n      case \"client_secret_post\":\n        params.append(\"client_id\", client_id);\n        if (client_secret) {\n          params.append(\"client_secret\", client_secret);\n        }\n        break;\n    }\n    const url = await this._metadataService.getTokenEndpoint(false);\n    logger2.debug(\"got token endpoint\");\n    const response = await this._jsonService.postForm(url, { body: params, basicAuth, timeoutInSeconds, initCredentials: this._settings.fetchRequestCredentials, extraHeaders });\n    logger2.debug(\"got response\");\n    return response;\n  }\n  /**\n   * Revoke an access or refresh token.\n   *\n   * @see https://datatracker.ietf.org/doc/html/rfc7009#section-2.1\n   */\n  async revoke(args) {\n    var _a;\n    const logger2 = this._logger.create(\"revoke\");\n    if (!args.token) {\n      logger2.throw(new Error(\"A token is required\"));\n    }\n    const url = await this._metadataService.getRevocationEndpoint(false);\n    logger2.debug(`got revocation endpoint, revoking ${(_a = args.token_type_hint) != null ? _a : \"default token type\"}`);\n    const params = new URLSearchParams();\n    for (const [key, value] of Object.entries(args)) {\n      if (value != null) {\n        params.set(key, value);\n      }\n    }\n    params.set(\"client_id\", this._settings.client_id);\n    if (this._settings.client_secret) {\n      params.set(\"client_secret\", this._settings.client_secret);\n    }\n    await this._jsonService.postForm(url, { body: params, timeoutInSeconds: this._settings.requestTimeoutInSeconds });\n    logger2.debug(\"got response\");\n  }\n};\n\n// src/ResponseValidator.ts\nvar ResponseValidator = class {\n  constructor(_settings, _metadataService, _claimsService) {\n    this._settings = _settings;\n    this._metadataService = _metadataService;\n    this._claimsService = _claimsService;\n    this._logger = new Logger(\"ResponseValidator\");\n    this._userInfoService = new UserInfoService(this._settings, this._metadataService);\n    this._tokenClient = new TokenClient(this._settings, this._metadataService);\n  }\n  async validateSigninResponse(response, state, extraHeaders) {\n    const logger2 = this._logger.create(\"validateSigninResponse\");\n    this._processSigninState(response, state);\n    logger2.debug(\"state processed\");\n    await this._processCode(response, state, extraHeaders);\n    logger2.debug(\"code processed\");\n    if (response.isOpenId) {\n      this._validateIdTokenAttributes(response);\n    }\n    logger2.debug(\"tokens validated\");\n    await this._processClaims(response, state == null ? void 0 : state.skipUserInfo, response.isOpenId);\n    logger2.debug(\"claims processed\");\n  }\n  async validateCredentialsResponse(response, skipUserInfo) {\n    const logger2 = this._logger.create(\"validateCredentialsResponse\");\n    if (response.isOpenId && !!response.id_token) {\n      this._validateIdTokenAttributes(response);\n    }\n    logger2.debug(\"tokens validated\");\n    await this._processClaims(response, skipUserInfo, response.isOpenId);\n    logger2.debug(\"claims processed\");\n  }\n  async validateRefreshResponse(response, state) {\n    var _a, _b;\n    const logger2 = this._logger.create(\"validateRefreshResponse\");\n    response.userState = state.data;\n    (_a = response.session_state) != null ? _a : response.session_state = state.session_state;\n    (_b = response.scope) != null ? _b : response.scope = state.scope;\n    if (response.isOpenId && !!response.id_token) {\n      this._validateIdTokenAttributes(response, state.id_token);\n      logger2.debug(\"ID Token validated\");\n    }\n    if (!response.id_token) {\n      response.id_token = state.id_token;\n      response.profile = state.profile;\n    }\n    const hasIdToken = response.isOpenId && !!response.id_token;\n    await this._processClaims(response, false, hasIdToken);\n    logger2.debug(\"claims processed\");\n  }\n  validateSignoutResponse(response, state) {\n    const logger2 = this._logger.create(\"validateSignoutResponse\");\n    if (state.id !== response.state) {\n      logger2.throw(new Error(\"State does not match\"));\n    }\n    logger2.debug(\"state validated\");\n    response.userState = state.data;\n    if (response.error) {\n      logger2.warn(\"Response was error\", response.error);\n      throw new ErrorResponse(response);\n    }\n  }\n  _processSigninState(response, state) {\n    var _a;\n    const logger2 = this._logger.create(\"_processSigninState\");\n    if (state.id !== response.state) {\n      logger2.throw(new Error(\"State does not match\"));\n    }\n    if (!state.client_id) {\n      logger2.throw(new Error(\"No client_id on state\"));\n    }\n    if (!state.authority) {\n      logger2.throw(new Error(\"No authority on state\"));\n    }\n    if (this._settings.authority !== state.authority) {\n      logger2.throw(new Error(\"authority mismatch on settings vs. signin state\"));\n    }\n    if (this._settings.client_id && this._settings.client_id !== state.client_id) {\n      logger2.throw(new Error(\"client_id mismatch on settings vs. signin state\"));\n    }\n    logger2.debug(\"state validated\");\n    response.userState = state.data;\n    response.url_state = state.url_state;\n    (_a = response.scope) != null ? _a : response.scope = state.scope;\n    if (response.error) {\n      logger2.warn(\"Response was error\", response.error);\n      throw new ErrorResponse(response);\n    }\n    if (state.code_verifier && !response.code) {\n      logger2.throw(new Error(\"Expected code in response\"));\n    }\n  }\n  async _processClaims(response, skipUserInfo = false, validateSub = true) {\n    const logger2 = this._logger.create(\"_processClaims\");\n    response.profile = this._claimsService.filterProtocolClaims(response.profile);\n    if (skipUserInfo || !this._settings.loadUserInfo || !response.access_token) {\n      logger2.debug(\"not loading user info\");\n      return;\n    }\n    logger2.debug(\"loading user info\");\n    const claims = await this._userInfoService.getClaims(response.access_token);\n    logger2.debug(\"user info claims received from user info endpoint\");\n    if (validateSub && claims.sub !== response.profile.sub) {\n      logger2.throw(new Error(\"subject from UserInfo response does not match subject in ID Token\"));\n    }\n    response.profile = this._claimsService.mergeClaims(response.profile, this._claimsService.filterProtocolClaims(claims));\n    logger2.debug(\"user info claims received, updated profile:\", response.profile);\n  }\n  async _processCode(response, state, extraHeaders) {\n    const logger2 = this._logger.create(\"_processCode\");\n    if (response.code) {\n      logger2.debug(\"Validating code\");\n      const tokenResponse = await this._tokenClient.exchangeCode({\n        client_id: state.client_id,\n        client_secret: state.client_secret,\n        code: response.code,\n        redirect_uri: state.redirect_uri,\n        code_verifier: state.code_verifier,\n        extraHeaders,\n        ...state.extraTokenParams\n      });\n      Object.assign(response, tokenResponse);\n    } else {\n      logger2.debug(\"No code to process\");\n    }\n  }\n  _validateIdTokenAttributes(response, existingToken) {\n    var _a;\n    const logger2 = this._logger.create(\"_validateIdTokenAttributes\");\n    logger2.debug(\"decoding ID Token JWT\");\n    const incoming = JwtUtils.decode((_a = response.id_token) != null ? _a : \"\");\n    if (!incoming.sub) {\n      logger2.throw(new Error(\"ID Token is missing a subject claim\"));\n    }\n    if (existingToken) {\n      const existing = JwtUtils.decode(existingToken);\n      if (incoming.sub !== existing.sub) {\n        logger2.throw(new Error(\"sub in id_token does not match current sub\"));\n      }\n      if (incoming.auth_time && incoming.auth_time !== existing.auth_time) {\n        logger2.throw(new Error(\"auth_time in id_token does not match original auth_time\"));\n      }\n      if (incoming.azp && incoming.azp !== existing.azp) {\n        logger2.throw(new Error(\"azp in id_token does not match original azp\"));\n      }\n      if (!incoming.azp && existing.azp) {\n        logger2.throw(new Error(\"azp not in id_token, but present in original id_token\"));\n      }\n    }\n    response.profile = incoming;\n  }\n};\n\n// src/State.ts\nvar State = class _State {\n  constructor(args) {\n    this.id = args.id || CryptoUtils.generateUUIDv4();\n    this.data = args.data;\n    if (args.created && args.created > 0) {\n      this.created = args.created;\n    } else {\n      this.created = Timer.getEpochTime();\n    }\n    this.request_type = args.request_type;\n    this.url_state = args.url_state;\n  }\n  toStorageString() {\n    new Logger(\"State\").create(\"toStorageString\");\n    return JSON.stringify({\n      id: this.id,\n      data: this.data,\n      created: this.created,\n      request_type: this.request_type,\n      url_state: this.url_state\n    });\n  }\n  static fromStorageString(storageString) {\n    Logger.createStatic(\"State\", \"fromStorageString\");\n    return Promise.resolve(new _State(JSON.parse(storageString)));\n  }\n  static async clearStaleState(storage, age) {\n    const logger2 = Logger.createStatic(\"State\", \"clearStaleState\");\n    const cutoff = Timer.getEpochTime() - age;\n    const keys = await storage.getAllKeys();\n    logger2.debug(\"got keys\", keys);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const item = await storage.get(key);\n      let remove = false;\n      if (item) {\n        try {\n          const state = await _State.fromStorageString(item);\n          logger2.debug(\"got item from key:\", key, state.created);\n          if (state.created <= cutoff) {\n            remove = true;\n          }\n        } catch (err) {\n          logger2.error(\"Error parsing state for key:\", key, err);\n          remove = true;\n        }\n      } else {\n        logger2.debug(\"no item in storage for key:\", key);\n        remove = true;\n      }\n      if (remove) {\n        logger2.debug(\"removed item for key:\", key);\n        void storage.remove(key);\n      }\n    }\n  }\n};\n\n// src/SigninState.ts\nvar SigninState = class _SigninState extends State {\n  constructor(args) {\n    super(args);\n    this.code_verifier = args.code_verifier;\n    this.code_challenge = args.code_challenge;\n    this.authority = args.authority;\n    this.client_id = args.client_id;\n    this.redirect_uri = args.redirect_uri;\n    this.scope = args.scope;\n    this.client_secret = args.client_secret;\n    this.extraTokenParams = args.extraTokenParams;\n    this.response_mode = args.response_mode;\n    this.skipUserInfo = args.skipUserInfo;\n  }\n  static async create(args) {\n    const code_verifier = args.code_verifier === true ? CryptoUtils.generateCodeVerifier() : args.code_verifier || void 0;\n    const code_challenge = code_verifier ? await CryptoUtils.generateCodeChallenge(code_verifier) : void 0;\n    return new _SigninState({\n      ...args,\n      code_verifier,\n      code_challenge\n    });\n  }\n  toStorageString() {\n    new Logger(\"SigninState\").create(\"toStorageString\");\n    return JSON.stringify({\n      id: this.id,\n      data: this.data,\n      created: this.created,\n      request_type: this.request_type,\n      url_state: this.url_state,\n      code_verifier: this.code_verifier,\n      authority: this.authority,\n      client_id: this.client_id,\n      redirect_uri: this.redirect_uri,\n      scope: this.scope,\n      client_secret: this.client_secret,\n      extraTokenParams: this.extraTokenParams,\n      response_mode: this.response_mode,\n      skipUserInfo: this.skipUserInfo\n    });\n  }\n  static fromStorageString(storageString) {\n    Logger.createStatic(\"SigninState\", \"fromStorageString\");\n    const data = JSON.parse(storageString);\n    return _SigninState.create(data);\n  }\n};\n\n// src/SigninRequest.ts\nvar _SigninRequest = class _SigninRequest {\n  constructor(args) {\n    this.url = args.url;\n    this.state = args.state;\n  }\n  static async create({\n    // mandatory\n    url,\n    authority,\n    client_id,\n    redirect_uri,\n    response_type,\n    scope,\n    // optional\n    state_data,\n    response_mode,\n    request_type,\n    client_secret,\n    nonce,\n    url_state,\n    resource,\n    skipUserInfo,\n    extraQueryParams,\n    extraTokenParams,\n    disablePKCE,\n    dpopJkt,\n    omitScopeWhenRequesting,\n    ...optionalParams\n  }) {\n    if (!url) {\n      this._logger.error(\"create: No url passed\");\n      throw new Error(\"url\");\n    }\n    if (!client_id) {\n      this._logger.error(\"create: No client_id passed\");\n      throw new Error(\"client_id\");\n    }\n    if (!redirect_uri) {\n      this._logger.error(\"create: No redirect_uri passed\");\n      throw new Error(\"redirect_uri\");\n    }\n    if (!response_type) {\n      this._logger.error(\"create: No response_type passed\");\n      throw new Error(\"response_type\");\n    }\n    if (!scope) {\n      this._logger.error(\"create: No scope passed\");\n      throw new Error(\"scope\");\n    }\n    if (!authority) {\n      this._logger.error(\"create: No authority passed\");\n      throw new Error(\"authority\");\n    }\n    const state = await SigninState.create({\n      data: state_data,\n      request_type,\n      url_state,\n      code_verifier: !disablePKCE,\n      client_id,\n      authority,\n      redirect_uri,\n      response_mode,\n      client_secret,\n      scope,\n      extraTokenParams,\n      skipUserInfo\n    });\n    const parsedUrl = new URL(url);\n    parsedUrl.searchParams.append(\"client_id\", client_id);\n    parsedUrl.searchParams.append(\"redirect_uri\", redirect_uri);\n    parsedUrl.searchParams.append(\"response_type\", response_type);\n    if (!omitScopeWhenRequesting) {\n      parsedUrl.searchParams.append(\"scope\", scope);\n    }\n    if (nonce) {\n      parsedUrl.searchParams.append(\"nonce\", nonce);\n    }\n    if (dpopJkt) {\n      parsedUrl.searchParams.append(\"dpop_jkt\", dpopJkt);\n    }\n    let stateParam = state.id;\n    if (url_state) {\n      stateParam = `${stateParam}${URL_STATE_DELIMITER}${url_state}`;\n    }\n    parsedUrl.searchParams.append(\"state\", stateParam);\n    if (state.code_challenge) {\n      parsedUrl.searchParams.append(\"code_challenge\", state.code_challenge);\n      parsedUrl.searchParams.append(\"code_challenge_method\", \"S256\");\n    }\n    if (resource) {\n      const resources = Array.isArray(resource) ? resource : [resource];\n      resources.forEach((r) => parsedUrl.searchParams.append(\"resource\", r));\n    }\n    for (const [key, value] of Object.entries({ response_mode, ...optionalParams, ...extraQueryParams })) {\n      if (value != null) {\n        parsedUrl.searchParams.append(key, value.toString());\n      }\n    }\n    return new _SigninRequest({\n      url: parsedUrl.href,\n      state\n    });\n  }\n};\n_SigninRequest._logger = new Logger(\"SigninRequest\");\nvar SigninRequest = _SigninRequest;\n\n// src/SigninResponse.ts\nvar OidcScope = \"openid\";\nvar SigninResponse = class {\n  constructor(params) {\n    /** @see {@link User.access_token} */\n    this.access_token = \"\";\n    /** @see {@link User.token_type} */\n    this.token_type = \"\";\n    /** @see {@link User.profile} */\n    this.profile = {};\n    this.state = params.get(\"state\");\n    this.session_state = params.get(\"session_state\");\n    if (this.state) {\n      const splitState = decodeURIComponent(this.state).split(URL_STATE_DELIMITER);\n      this.state = splitState[0];\n      if (splitState.length > 1) {\n        this.url_state = splitState.slice(1).join(URL_STATE_DELIMITER);\n      }\n    }\n    this.error = params.get(\"error\");\n    this.error_description = params.get(\"error_description\");\n    this.error_uri = params.get(\"error_uri\");\n    this.code = params.get(\"code\");\n  }\n  get expires_in() {\n    if (this.expires_at === void 0) {\n      return void 0;\n    }\n    return this.expires_at - Timer.getEpochTime();\n  }\n  set expires_in(value) {\n    if (typeof value === \"string\") value = Number(value);\n    if (value !== void 0 && value >= 0) {\n      this.expires_at = Math.floor(value) + Timer.getEpochTime();\n    }\n  }\n  get isOpenId() {\n    var _a;\n    return ((_a = this.scope) == null ? void 0 : _a.split(\" \").includes(OidcScope)) || !!this.id_token;\n  }\n};\n\n// src/SignoutRequest.ts\nvar SignoutRequest = class {\n  constructor({\n    url,\n    state_data,\n    id_token_hint,\n    post_logout_redirect_uri,\n    extraQueryParams,\n    request_type,\n    client_id,\n    url_state\n  }) {\n    this._logger = new Logger(\"SignoutRequest\");\n    if (!url) {\n      this._logger.error(\"ctor: No url passed\");\n      throw new Error(\"url\");\n    }\n    const parsedUrl = new URL(url);\n    if (id_token_hint) {\n      parsedUrl.searchParams.append(\"id_token_hint\", id_token_hint);\n    }\n    if (client_id) {\n      parsedUrl.searchParams.append(\"client_id\", client_id);\n    }\n    if (post_logout_redirect_uri) {\n      parsedUrl.searchParams.append(\"post_logout_redirect_uri\", post_logout_redirect_uri);\n      if (state_data || url_state) {\n        this.state = new State({ data: state_data, request_type, url_state });\n        let stateParam = this.state.id;\n        if (url_state) {\n          stateParam = `${stateParam}${URL_STATE_DELIMITER}${url_state}`;\n        }\n        parsedUrl.searchParams.append(\"state\", stateParam);\n      }\n    }\n    for (const [key, value] of Object.entries({ ...extraQueryParams })) {\n      if (value != null) {\n        parsedUrl.searchParams.append(key, value.toString());\n      }\n    }\n    this.url = parsedUrl.href;\n  }\n};\n\n// src/SignoutResponse.ts\nvar SignoutResponse = class {\n  constructor(params) {\n    this.state = params.get(\"state\");\n    if (this.state) {\n      const splitState = decodeURIComponent(this.state).split(URL_STATE_DELIMITER);\n      this.state = splitState[0];\n      if (splitState.length > 1) {\n        this.url_state = splitState.slice(1).join(URL_STATE_DELIMITER);\n      }\n    }\n    this.error = params.get(\"error\");\n    this.error_description = params.get(\"error_description\");\n    this.error_uri = params.get(\"error_uri\");\n  }\n};\n\n// src/ClaimsService.ts\nvar DefaultProtocolClaims = [\n  \"nbf\",\n  \"jti\",\n  \"auth_time\",\n  \"nonce\",\n  \"acr\",\n  \"amr\",\n  \"azp\",\n  \"at_hash\"\n  // https://openid.net/specs/openid-connect-core-1_0.html#CodeIDToken\n];\nvar InternalRequiredProtocolClaims = [\"sub\", \"iss\", \"aud\", \"exp\", \"iat\"];\nvar ClaimsService = class {\n  constructor(_settings) {\n    this._settings = _settings;\n    this._logger = new Logger(\"ClaimsService\");\n  }\n  filterProtocolClaims(claims) {\n    const result = { ...claims };\n    if (this._settings.filterProtocolClaims) {\n      let protocolClaims;\n      if (Array.isArray(this._settings.filterProtocolClaims)) {\n        protocolClaims = this._settings.filterProtocolClaims;\n      } else {\n        protocolClaims = DefaultProtocolClaims;\n      }\n      for (const claim of protocolClaims) {\n        if (!InternalRequiredProtocolClaims.includes(claim)) {\n          delete result[claim];\n        }\n      }\n    }\n    return result;\n  }\n  mergeClaims(claims1, claims2) {\n    const result = { ...claims1 };\n    for (const [claim, values] of Object.entries(claims2)) {\n      if (result[claim] !== values) {\n        if (Array.isArray(result[claim]) || Array.isArray(values)) {\n          if (this._settings.mergeClaimsStrategy.array == \"replace\") {\n            result[claim] = values;\n          } else {\n            const mergedValues = Array.isArray(result[claim]) ? result[claim] : [result[claim]];\n            for (const value of Array.isArray(values) ? values : [values]) {\n              if (!mergedValues.includes(value)) {\n                mergedValues.push(value);\n              }\n            }\n            result[claim] = mergedValues;\n          }\n        } else if (typeof result[claim] === \"object\" && typeof values === \"object\") {\n          result[claim] = this.mergeClaims(result[claim], values);\n        } else {\n          result[claim] = values;\n        }\n      }\n    }\n    return result;\n  }\n};\n\n// src/DPoPStore.ts\nvar DPoPState = class {\n  constructor(keys, nonce) {\n    this.keys = keys;\n    this.nonce = nonce;\n  }\n};\n\n// src/OidcClient.ts\nvar OidcClient = class {\n  constructor(settings, metadataService) {\n    this._logger = new Logger(\"OidcClient\");\n    this.settings = settings instanceof OidcClientSettingsStore ? settings : new OidcClientSettingsStore(settings);\n    this.metadataService = metadataService != null ? metadataService : new MetadataService(this.settings);\n    this._claimsService = new ClaimsService(this.settings);\n    this._validator = new ResponseValidator(this.settings, this.metadataService, this._claimsService);\n    this._tokenClient = new TokenClient(this.settings, this.metadataService);\n  }\n  async createSigninRequest({\n    state,\n    request,\n    request_uri,\n    request_type,\n    id_token_hint,\n    login_hint,\n    skipUserInfo,\n    nonce,\n    url_state,\n    response_type = this.settings.response_type,\n    scope = this.settings.scope,\n    redirect_uri = this.settings.redirect_uri,\n    prompt = this.settings.prompt,\n    display = this.settings.display,\n    max_age = this.settings.max_age,\n    ui_locales = this.settings.ui_locales,\n    acr_values = this.settings.acr_values,\n    resource = this.settings.resource,\n    response_mode = this.settings.response_mode,\n    extraQueryParams = this.settings.extraQueryParams,\n    extraTokenParams = this.settings.extraTokenParams,\n    dpopJkt,\n    omitScopeWhenRequesting = this.settings.omitScopeWhenRequesting\n  }) {\n    const logger2 = this._logger.create(\"createSigninRequest\");\n    if (response_type !== \"code\") {\n      throw new Error(\"Only the Authorization Code flow (with PKCE) is supported\");\n    }\n    const url = await this.metadataService.getAuthorizationEndpoint();\n    logger2.debug(\"Received authorization endpoint\", url);\n    const signinRequest = await SigninRequest.create({\n      url,\n      authority: this.settings.authority,\n      client_id: this.settings.client_id,\n      redirect_uri,\n      response_type,\n      scope,\n      state_data: state,\n      url_state,\n      prompt,\n      display,\n      max_age,\n      ui_locales,\n      id_token_hint,\n      login_hint,\n      acr_values,\n      dpopJkt,\n      resource,\n      request,\n      request_uri,\n      extraQueryParams,\n      extraTokenParams,\n      request_type,\n      response_mode,\n      client_secret: this.settings.client_secret,\n      skipUserInfo,\n      nonce,\n      disablePKCE: this.settings.disablePKCE,\n      omitScopeWhenRequesting\n    });\n    await this.clearStaleState();\n    const signinState = signinRequest.state;\n    await this.settings.stateStore.set(signinState.id, signinState.toStorageString());\n    return signinRequest;\n  }\n  async readSigninResponseState(url, removeState = false) {\n    const logger2 = this._logger.create(\"readSigninResponseState\");\n    const response = new SigninResponse(UrlUtils.readParams(url, this.settings.response_mode));\n    if (!response.state) {\n      logger2.throw(new Error(\"No state in response\"));\n      throw null;\n    }\n    const storedStateString = await this.settings.stateStore[removeState ? \"remove\" : \"get\"](response.state);\n    if (!storedStateString) {\n      logger2.throw(new Error(\"No matching state found in storage\"));\n      throw null;\n    }\n    const state = await SigninState.fromStorageString(storedStateString);\n    return { state, response };\n  }\n  async processSigninResponse(url, extraHeaders, removeState = true) {\n    const logger2 = this._logger.create(\"processSigninResponse\");\n    const { state, response } = await this.readSigninResponseState(url, removeState);\n    logger2.debug(\"received state from storage; validating response\");\n    if (this.settings.dpop && this.settings.dpop.store) {\n      const dpopProof = await this.getDpopProof(this.settings.dpop.store);\n      extraHeaders = { ...extraHeaders, \"DPoP\": dpopProof };\n    }\n    try {\n      await this._validator.validateSigninResponse(response, state, extraHeaders);\n    } catch (err) {\n      if (err instanceof ErrorDPoPNonce && this.settings.dpop) {\n        const dpopProof = await this.getDpopProof(this.settings.dpop.store, err.nonce);\n        extraHeaders[\"DPoP\"] = dpopProof;\n        await this._validator.validateSigninResponse(response, state, extraHeaders);\n      } else {\n        throw err;\n      }\n    }\n    return response;\n  }\n  async getDpopProof(dpopStore, nonce) {\n    let keyPair;\n    let dpopState;\n    if (!(await dpopStore.getAllKeys()).includes(this.settings.client_id)) {\n      keyPair = await CryptoUtils.generateDPoPKeys();\n      dpopState = new DPoPState(keyPair, nonce);\n      await dpopStore.set(this.settings.client_id, dpopState);\n    } else {\n      dpopState = await dpopStore.get(this.settings.client_id);\n      if (dpopState.nonce !== nonce && nonce) {\n        dpopState.nonce = nonce;\n        await dpopStore.set(this.settings.client_id, dpopState);\n      }\n    }\n    return await CryptoUtils.generateDPoPProof({\n      url: await this.metadataService.getTokenEndpoint(false),\n      httpMethod: \"POST\",\n      keyPair: dpopState.keys,\n      nonce: dpopState.nonce\n    });\n  }\n  async processResourceOwnerPasswordCredentials({\n    username,\n    password,\n    skipUserInfo = false,\n    extraTokenParams = {}\n  }) {\n    const tokenResponse = await this._tokenClient.exchangeCredentials({ username, password, ...extraTokenParams });\n    const signinResponse = new SigninResponse(new URLSearchParams());\n    Object.assign(signinResponse, tokenResponse);\n    await this._validator.validateCredentialsResponse(signinResponse, skipUserInfo);\n    return signinResponse;\n  }\n  async useRefreshToken({\n    state,\n    redirect_uri,\n    resource,\n    timeoutInSeconds,\n    extraHeaders,\n    extraTokenParams\n  }) {\n    var _a;\n    const logger2 = this._logger.create(\"useRefreshToken\");\n    let scope;\n    if (this.settings.refreshTokenAllowedScope === void 0) {\n      scope = state.scope;\n    } else {\n      const allowableScopes = this.settings.refreshTokenAllowedScope.split(\" \");\n      const providedScopes = ((_a = state.scope) == null ? void 0 : _a.split(\" \")) || [];\n      scope = providedScopes.filter((s) => allowableScopes.includes(s)).join(\" \");\n    }\n    if (this.settings.dpop && this.settings.dpop.store) {\n      const dpopProof = await this.getDpopProof(this.settings.dpop.store);\n      extraHeaders = { ...extraHeaders, \"DPoP\": dpopProof };\n    }\n    let result;\n    try {\n      result = await this._tokenClient.exchangeRefreshToken({\n        refresh_token: state.refresh_token,\n        // provide the (possible filtered) scope list\n        scope,\n        redirect_uri,\n        resource,\n        timeoutInSeconds,\n        extraHeaders,\n        ...extraTokenParams\n      });\n    } catch (err) {\n      if (err instanceof ErrorDPoPNonce && this.settings.dpop) {\n        extraHeaders[\"DPoP\"] = await this.getDpopProof(this.settings.dpop.store, err.nonce);\n        result = await this._tokenClient.exchangeRefreshToken({\n          refresh_token: state.refresh_token,\n          // provide the (possible filtered) scope list\n          scope,\n          redirect_uri,\n          resource,\n          timeoutInSeconds,\n          extraHeaders,\n          ...extraTokenParams\n        });\n      } else {\n        throw err;\n      }\n    }\n    const response = new SigninResponse(new URLSearchParams());\n    Object.assign(response, result);\n    logger2.debug(\"validating response\", response);\n    await this._validator.validateRefreshResponse(response, {\n      ...state,\n      // override the scope in the state handed over to the validator\n      // so it can set the granted scope to the requested scope in case none is included in the response\n      scope\n    });\n    return response;\n  }\n  async createSignoutRequest({\n    state,\n    id_token_hint,\n    client_id,\n    request_type,\n    url_state,\n    post_logout_redirect_uri = this.settings.post_logout_redirect_uri,\n    extraQueryParams = this.settings.extraQueryParams\n  } = {}) {\n    const logger2 = this._logger.create(\"createSignoutRequest\");\n    const url = await this.metadataService.getEndSessionEndpoint();\n    if (!url) {\n      logger2.throw(new Error(\"No end session endpoint\"));\n      throw null;\n    }\n    logger2.debug(\"Received end session endpoint\", url);\n    if (!client_id && post_logout_redirect_uri && !id_token_hint) {\n      client_id = this.settings.client_id;\n    }\n    const request = new SignoutRequest({\n      url,\n      id_token_hint,\n      client_id,\n      post_logout_redirect_uri,\n      state_data: state,\n      extraQueryParams,\n      request_type,\n      url_state\n    });\n    await this.clearStaleState();\n    const signoutState = request.state;\n    if (signoutState) {\n      logger2.debug(\"Signout request has state to persist\");\n      await this.settings.stateStore.set(signoutState.id, signoutState.toStorageString());\n    }\n    return request;\n  }\n  async readSignoutResponseState(url, removeState = false) {\n    const logger2 = this._logger.create(\"readSignoutResponseState\");\n    const response = new SignoutResponse(UrlUtils.readParams(url, this.settings.response_mode));\n    if (!response.state) {\n      logger2.debug(\"No state in response\");\n      if (response.error) {\n        logger2.warn(\"Response was error:\", response.error);\n        throw new ErrorResponse(response);\n      }\n      return { state: void 0, response };\n    }\n    const storedStateString = await this.settings.stateStore[removeState ? \"remove\" : \"get\"](response.state);\n    if (!storedStateString) {\n      logger2.throw(new Error(\"No matching state found in storage\"));\n      throw null;\n    }\n    const state = await State.fromStorageString(storedStateString);\n    return { state, response };\n  }\n  async processSignoutResponse(url) {\n    const logger2 = this._logger.create(\"processSignoutResponse\");\n    const { state, response } = await this.readSignoutResponseState(url, true);\n    if (state) {\n      logger2.debug(\"Received state from storage; validating response\");\n      this._validator.validateSignoutResponse(response, state);\n    } else {\n      logger2.debug(\"No state from storage; skipping response validation\");\n    }\n    return response;\n  }\n  clearStaleState() {\n    this._logger.create(\"clearStaleState\");\n    return State.clearStaleState(this.settings.stateStore, this.settings.staleStateAgeInSeconds);\n  }\n  async revokeToken(token, type) {\n    this._logger.create(\"revokeToken\");\n    return await this._tokenClient.revoke({\n      token,\n      token_type_hint: type\n    });\n  }\n};\n\n// src/SessionMonitor.ts\nvar SessionMonitor = class {\n  constructor(_userManager) {\n    this._userManager = _userManager;\n    this._logger = new Logger(\"SessionMonitor\");\n    this._start = async (user) => {\n      const session_state = user.session_state;\n      if (!session_state) {\n        return;\n      }\n      const logger2 = this._logger.create(\"_start\");\n      if (user.profile) {\n        this._sub = user.profile.sub;\n        logger2.debug(\"session_state\", session_state, \", sub\", this._sub);\n      } else {\n        this._sub = void 0;\n        logger2.debug(\"session_state\", session_state, \", anonymous user\");\n      }\n      if (this._checkSessionIFrame) {\n        this._checkSessionIFrame.start(session_state);\n        return;\n      }\n      try {\n        const url = await this._userManager.metadataService.getCheckSessionIframe();\n        if (url) {\n          logger2.debug(\"initializing check session iframe\");\n          const client_id = this._userManager.settings.client_id;\n          const intervalInSeconds = this._userManager.settings.checkSessionIntervalInSeconds;\n          const stopOnError = this._userManager.settings.stopCheckSessionOnError;\n          const checkSessionIFrame = new CheckSessionIFrame(this._callback, client_id, url, intervalInSeconds, stopOnError);\n          await checkSessionIFrame.load();\n          this._checkSessionIFrame = checkSessionIFrame;\n          checkSessionIFrame.start(session_state);\n        } else {\n          logger2.warn(\"no check session iframe found in the metadata\");\n        }\n      } catch (err) {\n        logger2.error(\"Error from getCheckSessionIframe:\", err instanceof Error ? err.message : err);\n      }\n    };\n    this._stop = () => {\n      const logger2 = this._logger.create(\"_stop\");\n      this._sub = void 0;\n      if (this._checkSessionIFrame) {\n        this._checkSessionIFrame.stop();\n      }\n      if (this._userManager.settings.monitorAnonymousSession) {\n        const timerHandle = setInterval(async () => {\n          clearInterval(timerHandle);\n          try {\n            const session = await this._userManager.querySessionStatus();\n            if (session) {\n              const tmpUser = {\n                session_state: session.session_state,\n                profile: session.sub ? {\n                  sub: session.sub\n                } : null\n              };\n              void this._start(tmpUser);\n            }\n          } catch (err) {\n            logger2.error(\"error from querySessionStatus\", err instanceof Error ? err.message : err);\n          }\n        }, 1e3);\n      }\n    };\n    this._callback = async () => {\n      const logger2 = this._logger.create(\"_callback\");\n      try {\n        const session = await this._userManager.querySessionStatus();\n        let raiseEvent = true;\n        if (session && this._checkSessionIFrame) {\n          if (session.sub === this._sub) {\n            raiseEvent = false;\n            this._checkSessionIFrame.start(session.session_state);\n            logger2.debug(\"same sub still logged in at OP, session state has changed, restarting check session iframe; session_state\", session.session_state);\n            await this._userManager.events._raiseUserSessionChanged();\n          } else {\n            logger2.debug(\"different subject signed into OP\", session.sub);\n          }\n        } else {\n          logger2.debug(\"subject no longer signed into OP\");\n        }\n        if (raiseEvent) {\n          if (this._sub) {\n            await this._userManager.events._raiseUserSignedOut();\n          } else {\n            await this._userManager.events._raiseUserSignedIn();\n          }\n        } else {\n          logger2.debug(\"no change in session detected, no event to raise\");\n        }\n      } catch (err) {\n        if (this._sub) {\n          logger2.debug(\"Error calling queryCurrentSigninSession; raising signed out event\", err);\n          await this._userManager.events._raiseUserSignedOut();\n        }\n      }\n    };\n    if (!_userManager) {\n      this._logger.throw(new Error(\"No user manager passed\"));\n    }\n    this._userManager.events.addUserLoaded(this._start);\n    this._userManager.events.addUserUnloaded(this._stop);\n    this._init().catch((err) => {\n      this._logger.error(err);\n    });\n  }\n  async _init() {\n    this._logger.create(\"_init\");\n    const user = await this._userManager.getUser();\n    if (user) {\n      void this._start(user);\n    } else if (this._userManager.settings.monitorAnonymousSession) {\n      const session = await this._userManager.querySessionStatus();\n      if (session) {\n        const tmpUser = {\n          session_state: session.session_state,\n          profile: session.sub ? {\n            sub: session.sub\n          } : null\n        };\n        void this._start(tmpUser);\n      }\n    }\n  }\n};\n\n// src/User.ts\nvar User = class _User {\n  constructor(args) {\n    var _a;\n    this.id_token = args.id_token;\n    this.session_state = (_a = args.session_state) != null ? _a : null;\n    this.access_token = args.access_token;\n    this.refresh_token = args.refresh_token;\n    this.token_type = args.token_type;\n    this.scope = args.scope;\n    this.profile = args.profile;\n    this.expires_at = args.expires_at;\n    this.state = args.userState;\n    this.url_state = args.url_state;\n  }\n  /** Computed number of seconds the access token has remaining. */\n  get expires_in() {\n    if (this.expires_at === void 0) {\n      return void 0;\n    }\n    return this.expires_at - Timer.getEpochTime();\n  }\n  set expires_in(value) {\n    if (value !== void 0) {\n      this.expires_at = Math.floor(value) + Timer.getEpochTime();\n    }\n  }\n  /** Computed value indicating if the access token is expired. */\n  get expired() {\n    const expires_in = this.expires_in;\n    if (expires_in === void 0) {\n      return void 0;\n    }\n    return expires_in <= 0;\n  }\n  /** Array representing the parsed values from the `scope`. */\n  get scopes() {\n    var _a, _b;\n    return (_b = (_a = this.scope) == null ? void 0 : _a.split(\" \")) != null ? _b : [];\n  }\n  toStorageString() {\n    new Logger(\"User\").create(\"toStorageString\");\n    return JSON.stringify({\n      id_token: this.id_token,\n      session_state: this.session_state,\n      access_token: this.access_token,\n      refresh_token: this.refresh_token,\n      token_type: this.token_type,\n      scope: this.scope,\n      profile: this.profile,\n      expires_at: this.expires_at\n    });\n  }\n  static fromStorageString(storageString) {\n    Logger.createStatic(\"User\", \"fromStorageString\");\n    return new _User(JSON.parse(storageString));\n  }\n};\n\n// src/navigators/AbstractChildWindow.ts\nvar messageSource = \"oidc-client\";\nvar AbstractChildWindow = class {\n  constructor() {\n    this._abort = new Event(\"Window navigation aborted\");\n    this._disposeHandlers = /* @__PURE__ */ new Set();\n    this._window = null;\n  }\n  async navigate(params) {\n    const logger2 = this._logger.create(\"navigate\");\n    if (!this._window) {\n      throw new Error(\"Attempted to navigate on a disposed window\");\n    }\n    logger2.debug(\"setting URL in window\");\n    this._window.location.replace(params.url);\n    const { url, keepOpen } = await new Promise((resolve, reject) => {\n      const listener = (e) => {\n        var _a;\n        const data = e.data;\n        const origin = (_a = params.scriptOrigin) != null ? _a : window.location.origin;\n        if (e.origin !== origin || (data == null ? void 0 : data.source) !== messageSource) {\n          return;\n        }\n        try {\n          const state = UrlUtils.readParams(data.url, params.response_mode).get(\"state\");\n          if (!state) {\n            logger2.warn(\"no state found in response url\");\n          }\n          if (e.source !== this._window && state !== params.state) {\n            return;\n          }\n        } catch {\n          this._dispose();\n          reject(new Error(\"Invalid response from window\"));\n        }\n        resolve(data);\n      };\n      window.addEventListener(\"message\", listener, false);\n      this._disposeHandlers.add(() => window.removeEventListener(\"message\", listener, false));\n      this._disposeHandlers.add(this._abort.addHandler((reason) => {\n        this._dispose();\n        reject(reason);\n      }));\n    });\n    logger2.debug(\"got response from window\");\n    this._dispose();\n    if (!keepOpen) {\n      this.close();\n    }\n    return { url };\n  }\n  _dispose() {\n    this._logger.create(\"_dispose\");\n    for (const dispose of this._disposeHandlers) {\n      dispose();\n    }\n    this._disposeHandlers.clear();\n  }\n  static _notifyParent(parent, url, keepOpen = false, targetOrigin = window.location.origin) {\n    parent.postMessage({\n      source: messageSource,\n      url,\n      keepOpen\n    }, targetOrigin);\n  }\n};\n\n// src/UserManagerSettings.ts\nvar DefaultPopupWindowFeatures = {\n  location: false,\n  toolbar: false,\n  height: 640,\n  closePopupWindowAfterInSeconds: -1\n};\nvar DefaultPopupTarget = \"_blank\";\nvar DefaultAccessTokenExpiringNotificationTimeInSeconds = 60;\nvar DefaultCheckSessionIntervalInSeconds = 2;\nvar DefaultSilentRequestTimeoutInSeconds = 10;\nvar UserManagerSettingsStore = class extends OidcClientSettingsStore {\n  constructor(args) {\n    const {\n      popup_redirect_uri = args.redirect_uri,\n      popup_post_logout_redirect_uri = args.post_logout_redirect_uri,\n      popupWindowFeatures = DefaultPopupWindowFeatures,\n      popupWindowTarget = DefaultPopupTarget,\n      redirectMethod = \"assign\",\n      redirectTarget = \"self\",\n      iframeNotifyParentOrigin = args.iframeNotifyParentOrigin,\n      iframeScriptOrigin = args.iframeScriptOrigin,\n      requestTimeoutInSeconds,\n      silent_redirect_uri = args.redirect_uri,\n      silentRequestTimeoutInSeconds,\n      automaticSilentRenew = true,\n      validateSubOnSilentRenew = true,\n      includeIdTokenInSilentRenew = false,\n      monitorSession = false,\n      monitorAnonymousSession = false,\n      checkSessionIntervalInSeconds = DefaultCheckSessionIntervalInSeconds,\n      query_status_response_type = \"code\",\n      stopCheckSessionOnError = true,\n      revokeTokenTypes = [\"access_token\", \"refresh_token\"],\n      revokeTokensOnSignout = false,\n      includeIdTokenInSilentSignout = false,\n      accessTokenExpiringNotificationTimeInSeconds = DefaultAccessTokenExpiringNotificationTimeInSeconds,\n      userStore\n    } = args;\n    super(args);\n    this.popup_redirect_uri = popup_redirect_uri;\n    this.popup_post_logout_redirect_uri = popup_post_logout_redirect_uri;\n    this.popupWindowFeatures = popupWindowFeatures;\n    this.popupWindowTarget = popupWindowTarget;\n    this.redirectMethod = redirectMethod;\n    this.redirectTarget = redirectTarget;\n    this.iframeNotifyParentOrigin = iframeNotifyParentOrigin;\n    this.iframeScriptOrigin = iframeScriptOrigin;\n    this.silent_redirect_uri = silent_redirect_uri;\n    this.silentRequestTimeoutInSeconds = silentRequestTimeoutInSeconds || requestTimeoutInSeconds || DefaultSilentRequestTimeoutInSeconds;\n    this.automaticSilentRenew = automaticSilentRenew;\n    this.validateSubOnSilentRenew = validateSubOnSilentRenew;\n    this.includeIdTokenInSilentRenew = includeIdTokenInSilentRenew;\n    this.monitorSession = monitorSession;\n    this.monitorAnonymousSession = monitorAnonymousSession;\n    this.checkSessionIntervalInSeconds = checkSessionIntervalInSeconds;\n    this.stopCheckSessionOnError = stopCheckSessionOnError;\n    this.query_status_response_type = query_status_response_type;\n    this.revokeTokenTypes = revokeTokenTypes;\n    this.revokeTokensOnSignout = revokeTokensOnSignout;\n    this.includeIdTokenInSilentSignout = includeIdTokenInSilentSignout;\n    this.accessTokenExpiringNotificationTimeInSeconds = accessTokenExpiringNotificationTimeInSeconds;\n    if (userStore) {\n      this.userStore = userStore;\n    } else {\n      const store = typeof window !== \"undefined\" ? window.sessionStorage : new InMemoryWebStorage();\n      this.userStore = new WebStorageStateStore({ store });\n    }\n  }\n};\n\n// src/navigators/IFrameWindow.ts\nvar IFrameWindow = class _IFrameWindow extends AbstractChildWindow {\n  constructor({\n    silentRequestTimeoutInSeconds = DefaultSilentRequestTimeoutInSeconds\n  }) {\n    super();\n    this._logger = new Logger(\"IFrameWindow\");\n    this._timeoutInSeconds = silentRequestTimeoutInSeconds;\n    this._frame = _IFrameWindow.createHiddenIframe();\n    this._window = this._frame.contentWindow;\n  }\n  static createHiddenIframe() {\n    const iframe = window.document.createElement(\"iframe\");\n    iframe.style.visibility = \"hidden\";\n    iframe.style.position = \"fixed\";\n    iframe.style.left = \"-1000px\";\n    iframe.style.top = \"0\";\n    iframe.width = \"0\";\n    iframe.height = \"0\";\n    window.document.body.appendChild(iframe);\n    return iframe;\n  }\n  async navigate(params) {\n    this._logger.debug(\"navigate: Using timeout of:\", this._timeoutInSeconds);\n    const timer = setTimeout(() => void this._abort.raise(new ErrorTimeout(\"IFrame timed out without a response\")), this._timeoutInSeconds * 1e3);\n    this._disposeHandlers.add(() => clearTimeout(timer));\n    return await super.navigate(params);\n  }\n  close() {\n    var _a;\n    if (this._frame) {\n      if (this._frame.parentNode) {\n        this._frame.addEventListener(\"load\", (ev) => {\n          var _a2;\n          const frame = ev.target;\n          (_a2 = frame.parentNode) == null ? void 0 : _a2.removeChild(frame);\n          void this._abort.raise(new Error(\"IFrame removed from DOM\"));\n        }, true);\n        (_a = this._frame.contentWindow) == null ? void 0 : _a.location.replace(\"about:blank\");\n      }\n      this._frame = null;\n    }\n    this._window = null;\n  }\n  static notifyParent(url, targetOrigin) {\n    return super._notifyParent(window.parent, url, false, targetOrigin);\n  }\n};\n\n// src/navigators/IFrameNavigator.ts\nvar IFrameNavigator = class {\n  constructor(_settings) {\n    this._settings = _settings;\n    this._logger = new Logger(\"IFrameNavigator\");\n  }\n  async prepare({\n    silentRequestTimeoutInSeconds = this._settings.silentRequestTimeoutInSeconds\n  }) {\n    return new IFrameWindow({ silentRequestTimeoutInSeconds });\n  }\n  async callback(url) {\n    this._logger.create(\"callback\");\n    IFrameWindow.notifyParent(url, this._settings.iframeNotifyParentOrigin);\n  }\n};\n\n// src/navigators/PopupWindow.ts\nvar checkForPopupClosedInterval = 500;\nvar second = 1e3;\nvar PopupWindow = class extends AbstractChildWindow {\n  constructor({\n    popupWindowTarget = DefaultPopupTarget,\n    popupWindowFeatures = {},\n    popupSignal\n  }) {\n    super();\n    this._logger = new Logger(\"PopupWindow\");\n    const centeredPopup = PopupUtils.center({ ...DefaultPopupWindowFeatures, ...popupWindowFeatures });\n    this._window = window.open(void 0, popupWindowTarget, PopupUtils.serialize(centeredPopup));\n    if (popupSignal) {\n      popupSignal.addEventListener(\"abort\", () => {\n        var _a;\n        void this._abort.raise(new Error((_a = popupSignal.reason) != null ? _a : \"Popup aborted\"));\n      });\n    }\n    if (popupWindowFeatures.closePopupWindowAfterInSeconds && popupWindowFeatures.closePopupWindowAfterInSeconds > 0) {\n      setTimeout(() => {\n        if (!this._window || typeof this._window.closed !== \"boolean\" || this._window.closed) {\n          void this._abort.raise(new Error(\"Popup blocked by user\"));\n          return;\n        }\n        this.close();\n      }, popupWindowFeatures.closePopupWindowAfterInSeconds * second);\n    }\n  }\n  async navigate(params) {\n    var _a;\n    (_a = this._window) == null ? void 0 : _a.focus();\n    const popupClosedInterval = setInterval(() => {\n      if (!this._window || this._window.closed) {\n        void this._abort.raise(new Error(\"Popup closed by user\"));\n      }\n    }, checkForPopupClosedInterval);\n    this._disposeHandlers.add(() => clearInterval(popupClosedInterval));\n    return await super.navigate(params);\n  }\n  close() {\n    if (this._window) {\n      if (!this._window.closed) {\n        this._window.close();\n        void this._abort.raise(new Error(\"Popup closed\"));\n      }\n    }\n    this._window = null;\n  }\n  static notifyOpener(url, keepOpen) {\n    if (!window.opener) {\n      throw new Error(\"No window.opener. Can't complete notification.\");\n    }\n    return super._notifyParent(window.opener, url, keepOpen);\n  }\n};\n\n// src/navigators/PopupNavigator.ts\nvar PopupNavigator = class {\n  constructor(_settings) {\n    this._settings = _settings;\n    this._logger = new Logger(\"PopupNavigator\");\n  }\n  async prepare({\n    popupWindowFeatures = this._settings.popupWindowFeatures,\n    popupWindowTarget = this._settings.popupWindowTarget,\n    popupSignal\n  }) {\n    return new PopupWindow({ popupWindowFeatures, popupWindowTarget, popupSignal });\n  }\n  async callback(url, { keepOpen = false }) {\n    this._logger.create(\"callback\");\n    PopupWindow.notifyOpener(url, keepOpen);\n  }\n};\n\n// src/navigators/RedirectNavigator.ts\nvar RedirectNavigator = class {\n  constructor(_settings) {\n    this._settings = _settings;\n    this._logger = new Logger(\"RedirectNavigator\");\n  }\n  async prepare({\n    redirectMethod = this._settings.redirectMethod,\n    redirectTarget = this._settings.redirectTarget\n  }) {\n    var _a;\n    this._logger.create(\"prepare\");\n    let targetWindow = window.self;\n    if (redirectTarget === \"top\") {\n      targetWindow = (_a = window.top) != null ? _a : window.self;\n    }\n    const redirect = targetWindow.location[redirectMethod].bind(targetWindow.location);\n    let abort;\n    return {\n      navigate: async (params) => {\n        this._logger.create(\"navigate\");\n        const promise = new Promise((resolve, reject) => {\n          abort = reject;\n        });\n        redirect(params.url);\n        return await promise;\n      },\n      close: () => {\n        this._logger.create(\"close\");\n        abort == null ? void 0 : abort(new Error(\"Redirect aborted\"));\n        targetWindow.stop();\n      }\n    };\n  }\n  async callback() {\n    return;\n  }\n};\n\n// src/UserManagerEvents.ts\nvar UserManagerEvents = class extends AccessTokenEvents {\n  constructor(settings) {\n    super({ expiringNotificationTimeInSeconds: settings.accessTokenExpiringNotificationTimeInSeconds });\n    this._logger = new Logger(\"UserManagerEvents\");\n    this._userLoaded = new Event(\"User loaded\");\n    this._userUnloaded = new Event(\"User unloaded\");\n    this._silentRenewError = new Event(\"Silent renew error\");\n    this._userSignedIn = new Event(\"User signed in\");\n    this._userSignedOut = new Event(\"User signed out\");\n    this._userSessionChanged = new Event(\"User session changed\");\n  }\n  async load(user, raiseEvent = true) {\n    await super.load(user);\n    if (raiseEvent) {\n      await this._userLoaded.raise(user);\n    }\n  }\n  async unload() {\n    await super.unload();\n    await this._userUnloaded.raise();\n  }\n  /**\n   * Add callback: Raised when a user session has been established (or re-established).\n   */\n  addUserLoaded(cb) {\n    return this._userLoaded.addHandler(cb);\n  }\n  /**\n   * Remove callback: Raised when a user session has been established (or re-established).\n   */\n  removeUserLoaded(cb) {\n    return this._userLoaded.removeHandler(cb);\n  }\n  /**\n   * Add callback: Raised when a user session has been terminated.\n   */\n  addUserUnloaded(cb) {\n    return this._userUnloaded.addHandler(cb);\n  }\n  /**\n   * Remove callback: Raised when a user session has been terminated.\n   */\n  removeUserUnloaded(cb) {\n    return this._userUnloaded.removeHandler(cb);\n  }\n  /**\n   * Add callback: Raised when the automatic silent renew has failed.\n   */\n  addSilentRenewError(cb) {\n    return this._silentRenewError.addHandler(cb);\n  }\n  /**\n   * Remove callback: Raised when the automatic silent renew has failed.\n   */\n  removeSilentRenewError(cb) {\n    return this._silentRenewError.removeHandler(cb);\n  }\n  /**\n   * @internal\n   */\n  async _raiseSilentRenewError(e) {\n    await this._silentRenewError.raise(e);\n  }\n  /**\n   * Add callback: Raised when the user is signed in (when `monitorSession` is set).\n   * @see {@link UserManagerSettings.monitorSession}\n   */\n  addUserSignedIn(cb) {\n    return this._userSignedIn.addHandler(cb);\n  }\n  /**\n   * Remove callback: Raised when the user is signed in (when `monitorSession` is set).\n   */\n  removeUserSignedIn(cb) {\n    this._userSignedIn.removeHandler(cb);\n  }\n  /**\n   * @internal\n   */\n  async _raiseUserSignedIn() {\n    await this._userSignedIn.raise();\n  }\n  /**\n   * Add callback: Raised when the user's sign-in status at the OP has changed (when `monitorSession` is set).\n   * @see {@link UserManagerSettings.monitorSession}\n   */\n  addUserSignedOut(cb) {\n    return this._userSignedOut.addHandler(cb);\n  }\n  /**\n   * Remove callback: Raised when the user's sign-in status at the OP has changed (when `monitorSession` is set).\n   */\n  removeUserSignedOut(cb) {\n    this._userSignedOut.removeHandler(cb);\n  }\n  /**\n   * @internal\n   */\n  async _raiseUserSignedOut() {\n    await this._userSignedOut.raise();\n  }\n  /**\n   * Add callback: Raised when the user session changed (when `monitorSession` is set).\n   * @see {@link UserManagerSettings.monitorSession}\n   */\n  addUserSessionChanged(cb) {\n    return this._userSessionChanged.addHandler(cb);\n  }\n  /**\n   * Remove callback: Raised when the user session changed (when `monitorSession` is set).\n   */\n  removeUserSessionChanged(cb) {\n    this._userSessionChanged.removeHandler(cb);\n  }\n  /**\n   * @internal\n   */\n  async _raiseUserSessionChanged() {\n    await this._userSessionChanged.raise();\n  }\n};\n\n// src/SilentRenewService.ts\nvar SilentRenewService = class {\n  constructor(_userManager) {\n    this._userManager = _userManager;\n    this._logger = new Logger(\"SilentRenewService\");\n    this._isStarted = false;\n    this._retryTimer = new Timer(\"Retry Silent Renew\");\n    this._tokenExpiring = async () => {\n      const logger2 = this._logger.create(\"_tokenExpiring\");\n      try {\n        await this._userManager.signinSilent();\n        logger2.debug(\"silent token renewal successful\");\n      } catch (err) {\n        if (err instanceof ErrorTimeout) {\n          logger2.warn(\"ErrorTimeout from signinSilent:\", err, \"retry in 5s\");\n          this._retryTimer.init(5);\n          return;\n        }\n        logger2.error(\"Error from signinSilent:\", err);\n        await this._userManager.events._raiseSilentRenewError(err);\n      }\n    };\n  }\n  async start() {\n    const logger2 = this._logger.create(\"start\");\n    if (!this._isStarted) {\n      this._isStarted = true;\n      this._userManager.events.addAccessTokenExpiring(this._tokenExpiring);\n      this._retryTimer.addHandler(this._tokenExpiring);\n      try {\n        await this._userManager.getUser();\n      } catch (err) {\n        logger2.error(\"getUser error\", err);\n      }\n    }\n  }\n  stop() {\n    if (this._isStarted) {\n      this._retryTimer.cancel();\n      this._retryTimer.removeHandler(this._tokenExpiring);\n      this._userManager.events.removeAccessTokenExpiring(this._tokenExpiring);\n      this._isStarted = false;\n    }\n  }\n};\n\n// src/RefreshState.ts\nvar RefreshState = class {\n  constructor(args) {\n    this.refresh_token = args.refresh_token;\n    this.id_token = args.id_token;\n    this.session_state = args.session_state;\n    this.scope = args.scope;\n    this.profile = args.profile;\n    this.data = args.state;\n  }\n};\n\n// src/UserManager.ts\nvar UserManager = class {\n  constructor(settings, redirectNavigator, popupNavigator, iframeNavigator) {\n    this._logger = new Logger(\"UserManager\");\n    this.settings = new UserManagerSettingsStore(settings);\n    this._client = new OidcClient(settings);\n    this._redirectNavigator = redirectNavigator != null ? redirectNavigator : new RedirectNavigator(this.settings);\n    this._popupNavigator = popupNavigator != null ? popupNavigator : new PopupNavigator(this.settings);\n    this._iframeNavigator = iframeNavigator != null ? iframeNavigator : new IFrameNavigator(this.settings);\n    this._events = new UserManagerEvents(this.settings);\n    this._silentRenewService = new SilentRenewService(this);\n    if (this.settings.automaticSilentRenew) {\n      this.startSilentRenew();\n    }\n    this._sessionMonitor = null;\n    if (this.settings.monitorSession) {\n      this._sessionMonitor = new SessionMonitor(this);\n    }\n  }\n  /**\n   * Get object used to register for events raised by the `UserManager`.\n   */\n  get events() {\n    return this._events;\n  }\n  /**\n   * Get object used to access the metadata configuration of the identity provider.\n   */\n  get metadataService() {\n    return this._client.metadataService;\n  }\n  /**\n   * Load the `User` object for the currently authenticated user.\n   *\n   * @param raiseEvent - If `true`, the `UserLoaded` event will be raised. Defaults to false.\n   * @returns A promise\n   */\n  async getUser(raiseEvent = false) {\n    const logger2 = this._logger.create(\"getUser\");\n    const user = await this._loadUser();\n    if (user) {\n      logger2.info(\"user loaded\");\n      await this._events.load(user, raiseEvent);\n      return user;\n    }\n    logger2.info(\"user not found in storage\");\n    return null;\n  }\n  /**\n   * Remove from any storage the currently authenticated user.\n   *\n   * @returns A promise\n   */\n  async removeUser() {\n    const logger2 = this._logger.create(\"removeUser\");\n    await this.storeUser(null);\n    logger2.info(\"user removed from storage\");\n    await this._events.unload();\n  }\n  /**\n   * Trigger a redirect of the current window to the authorization endpoint.\n   *\n   * @returns A promise\n   *\n   * @throws `Error` In cases of wrong authentication.\n   */\n  async signinRedirect(args = {}) {\n    var _a;\n    this._logger.create(\"signinRedirect\");\n    const {\n      redirectMethod,\n      ...requestArgs\n    } = args;\n    let dpopJkt;\n    if ((_a = this.settings.dpop) == null ? void 0 : _a.bind_authorization_code) {\n      dpopJkt = await this.generateDPoPJkt(this.settings.dpop);\n    }\n    const handle = await this._redirectNavigator.prepare({ redirectMethod });\n    await this._signinStart({\n      request_type: \"si:r\",\n      dpopJkt,\n      ...requestArgs\n    }, handle);\n  }\n  /**\n   * Process the response (callback) from the authorization endpoint.\n   * It is recommended to use {@link UserManager.signinCallback} instead.\n   *\n   * @returns A promise containing the authenticated `User`.\n   *\n   * @see {@link UserManager.signinCallback}\n   */\n  async signinRedirectCallback(url = window.location.href) {\n    const logger2 = this._logger.create(\"signinRedirectCallback\");\n    const user = await this._signinEnd(url);\n    if (user.profile && user.profile.sub) {\n      logger2.info(\"success, signed in subject\", user.profile.sub);\n    } else {\n      logger2.info(\"no subject\");\n    }\n    return user;\n  }\n  /**\n   * Trigger the signin with user/password.\n   *\n   * @returns A promise containing the authenticated `User`.\n   * @throws {@link ErrorResponse} In cases of wrong authentication.\n   */\n  async signinResourceOwnerCredentials({\n    username,\n    password,\n    skipUserInfo = false\n  }) {\n    const logger2 = this._logger.create(\"signinResourceOwnerCredential\");\n    const signinResponse = await this._client.processResourceOwnerPasswordCredentials({\n      username,\n      password,\n      skipUserInfo,\n      extraTokenParams: this.settings.extraTokenParams\n    });\n    logger2.debug(\"got signin response\");\n    const user = await this._buildUser(signinResponse);\n    if (user.profile && user.profile.sub) {\n      logger2.info(\"success, signed in subject\", user.profile.sub);\n    } else {\n      logger2.info(\"no subject\");\n    }\n    return user;\n  }\n  /**\n   * Trigger a request (via a popup window) to the authorization endpoint.\n   *\n   * @returns A promise containing the authenticated `User`.\n   * @throws `Error` In cases of wrong authentication.\n   */\n  async signinPopup(args = {}) {\n    var _a;\n    const logger2 = this._logger.create(\"signinPopup\");\n    let dpopJkt;\n    if ((_a = this.settings.dpop) == null ? void 0 : _a.bind_authorization_code) {\n      dpopJkt = await this.generateDPoPJkt(this.settings.dpop);\n    }\n    const {\n      popupWindowFeatures,\n      popupWindowTarget,\n      popupSignal,\n      ...requestArgs\n    } = args;\n    const url = this.settings.popup_redirect_uri;\n    if (!url) {\n      logger2.throw(new Error(\"No popup_redirect_uri configured\"));\n    }\n    const handle = await this._popupNavigator.prepare({ popupWindowFeatures, popupWindowTarget, popupSignal });\n    const user = await this._signin({\n      request_type: \"si:p\",\n      redirect_uri: url,\n      display: \"popup\",\n      dpopJkt,\n      ...requestArgs\n    }, handle);\n    if (user) {\n      if (user.profile && user.profile.sub) {\n        logger2.info(\"success, signed in subject\", user.profile.sub);\n      } else {\n        logger2.info(\"no subject\");\n      }\n    }\n    return user;\n  }\n  /**\n   * Notify the opening window of response (callback) from the authorization endpoint.\n   * It is recommended to use {@link UserManager.signinCallback} instead.\n   *\n   * @returns A promise\n   *\n   * @see {@link UserManager.signinCallback}\n   */\n  async signinPopupCallback(url = window.location.href, keepOpen = false) {\n    const logger2 = this._logger.create(\"signinPopupCallback\");\n    await this._popupNavigator.callback(url, { keepOpen });\n    logger2.info(\"success\");\n  }\n  /**\n   * Trigger a silent request (via refresh token or an iframe) to the authorization endpoint.\n   *\n   * @returns A promise that contains the authenticated `User`.\n   */\n  async signinSilent(args = {}) {\n    var _a, _b;\n    const logger2 = this._logger.create(\"signinSilent\");\n    const {\n      silentRequestTimeoutInSeconds,\n      ...requestArgs\n    } = args;\n    let user = await this._loadUser();\n    if (user == null ? void 0 : user.refresh_token) {\n      logger2.debug(\"using refresh token\");\n      const state = new RefreshState(user);\n      return await this._useRefreshToken({\n        state,\n        redirect_uri: requestArgs.redirect_uri,\n        resource: requestArgs.resource,\n        extraTokenParams: requestArgs.extraTokenParams,\n        timeoutInSeconds: silentRequestTimeoutInSeconds\n      });\n    }\n    let dpopJkt;\n    if ((_a = this.settings.dpop) == null ? void 0 : _a.bind_authorization_code) {\n      dpopJkt = await this.generateDPoPJkt(this.settings.dpop);\n    }\n    const url = this.settings.silent_redirect_uri;\n    if (!url) {\n      logger2.throw(new Error(\"No silent_redirect_uri configured\"));\n    }\n    let verifySub;\n    if (user && this.settings.validateSubOnSilentRenew) {\n      logger2.debug(\"subject prior to silent renew:\", user.profile.sub);\n      verifySub = user.profile.sub;\n    }\n    const handle = await this._iframeNavigator.prepare({ silentRequestTimeoutInSeconds });\n    user = await this._signin({\n      request_type: \"si:s\",\n      redirect_uri: url,\n      prompt: \"none\",\n      id_token_hint: this.settings.includeIdTokenInSilentRenew ? user == null ? void 0 : user.id_token : void 0,\n      dpopJkt,\n      ...requestArgs\n    }, handle, verifySub);\n    if (user) {\n      if ((_b = user.profile) == null ? void 0 : _b.sub) {\n        logger2.info(\"success, signed in subject\", user.profile.sub);\n      } else {\n        logger2.info(\"no subject\");\n      }\n    }\n    return user;\n  }\n  async _useRefreshToken(args) {\n    const response = await this._client.useRefreshToken({\n      timeoutInSeconds: this.settings.silentRequestTimeoutInSeconds,\n      ...args\n    });\n    const user = new User({ ...args.state, ...response });\n    await this.storeUser(user);\n    await this._events.load(user);\n    return user;\n  }\n  /**\n   *\n   * Notify the parent window of response (callback) from the authorization endpoint.\n   * It is recommended to use {@link UserManager.signinCallback} instead.\n   *\n   * @returns A promise\n   *\n   * @see {@link UserManager.signinCallback}\n   */\n  async signinSilentCallback(url = window.location.href) {\n    const logger2 = this._logger.create(\"signinSilentCallback\");\n    await this._iframeNavigator.callback(url);\n    logger2.info(\"success\");\n  }\n  /**\n   * Process any response (callback) from the authorization endpoint, by dispatching the request_type\n   * and executing one of the following functions:\n   * - {@link UserManager.signinRedirectCallback}\n   * - {@link UserManager.signinPopupCallback}\n   * - {@link UserManager.signinSilentCallback}\n   *\n   * @throws `Error` If request_type is unknown or signin cannot be processed.\n   */\n  async signinCallback(url = window.location.href) {\n    const { state } = await this._client.readSigninResponseState(url);\n    switch (state.request_type) {\n      case \"si:r\":\n        return await this.signinRedirectCallback(url);\n      case \"si:p\":\n        await this.signinPopupCallback(url);\n        break;\n      case \"si:s\":\n        await this.signinSilentCallback(url);\n        break;\n      default:\n        throw new Error(\"invalid response_type in state\");\n    }\n    return void 0;\n  }\n  /**\n   * Process any response (callback) from the end session endpoint, by dispatching the request_type\n   * and executing one of the following functions:\n   * - {@link UserManager.signoutRedirectCallback}\n   * - {@link UserManager.signoutPopupCallback}\n   * - {@link UserManager.signoutSilentCallback}\n   *\n   * @throws `Error` If request_type is unknown or signout cannot be processed.\n   */\n  async signoutCallback(url = window.location.href, keepOpen = false) {\n    const { state } = await this._client.readSignoutResponseState(url);\n    if (!state) {\n      return void 0;\n    }\n    switch (state.request_type) {\n      case \"so:r\":\n        return await this.signoutRedirectCallback(url);\n      case \"so:p\":\n        await this.signoutPopupCallback(url, keepOpen);\n        break;\n      case \"so:s\":\n        await this.signoutSilentCallback(url);\n        break;\n      default:\n        throw new Error(\"invalid response_type in state\");\n    }\n    return void 0;\n  }\n  /**\n   * Query OP for user's current signin status.\n   *\n   * @returns A promise object with session_state and subject identifier.\n   */\n  async querySessionStatus(args = {}) {\n    const logger2 = this._logger.create(\"querySessionStatus\");\n    const {\n      silentRequestTimeoutInSeconds,\n      ...requestArgs\n    } = args;\n    const url = this.settings.silent_redirect_uri;\n    if (!url) {\n      logger2.throw(new Error(\"No silent_redirect_uri configured\"));\n    }\n    const user = await this._loadUser();\n    const handle = await this._iframeNavigator.prepare({ silentRequestTimeoutInSeconds });\n    const navResponse = await this._signinStart({\n      request_type: \"si:s\",\n      // this acts like a signin silent\n      redirect_uri: url,\n      prompt: \"none\",\n      id_token_hint: this.settings.includeIdTokenInSilentRenew ? user == null ? void 0 : user.id_token : void 0,\n      response_type: this.settings.query_status_response_type,\n      scope: \"openid\",\n      skipUserInfo: true,\n      ...requestArgs\n    }, handle);\n    try {\n      const extraHeaders = {};\n      const signinResponse = await this._client.processSigninResponse(navResponse.url, extraHeaders);\n      logger2.debug(\"got signin response\");\n      if (signinResponse.session_state && signinResponse.profile.sub) {\n        logger2.info(\"success for subject\", signinResponse.profile.sub);\n        return {\n          session_state: signinResponse.session_state,\n          sub: signinResponse.profile.sub\n        };\n      }\n      logger2.info(\"success, user not authenticated\");\n      return null;\n    } catch (err) {\n      if (this.settings.monitorAnonymousSession && err instanceof ErrorResponse) {\n        switch (err.error) {\n          case \"login_required\":\n          case \"consent_required\":\n          case \"interaction_required\":\n          case \"account_selection_required\":\n            logger2.info(\"success for anonymous user\");\n            return {\n              session_state: err.session_state\n            };\n        }\n      }\n      throw err;\n    }\n  }\n  async _signin(args, handle, verifySub) {\n    const navResponse = await this._signinStart(args, handle);\n    return await this._signinEnd(navResponse.url, verifySub);\n  }\n  async _signinStart(args, handle) {\n    const logger2 = this._logger.create(\"_signinStart\");\n    try {\n      const signinRequest = await this._client.createSigninRequest(args);\n      logger2.debug(\"got signin request\");\n      return await handle.navigate({\n        url: signinRequest.url,\n        state: signinRequest.state.id,\n        response_mode: signinRequest.state.response_mode,\n        scriptOrigin: this.settings.iframeScriptOrigin\n      });\n    } catch (err) {\n      logger2.debug(\"error after preparing navigator, closing navigator window\");\n      handle.close();\n      throw err;\n    }\n  }\n  async _signinEnd(url, verifySub) {\n    const logger2 = this._logger.create(\"_signinEnd\");\n    const extraHeaders = {};\n    const signinResponse = await this._client.processSigninResponse(url, extraHeaders);\n    logger2.debug(\"got signin response\");\n    const user = await this._buildUser(signinResponse, verifySub);\n    return user;\n  }\n  async _buildUser(signinResponse, verifySub) {\n    const logger2 = this._logger.create(\"_buildUser\");\n    const user = new User(signinResponse);\n    if (verifySub) {\n      if (verifySub !== user.profile.sub) {\n        logger2.debug(\"current user does not match user returned from signin. sub from signin:\", user.profile.sub);\n        throw new ErrorResponse({ ...signinResponse, error: \"login_required\" });\n      }\n      logger2.debug(\"current user matches user returned from signin\");\n    }\n    await this.storeUser(user);\n    logger2.debug(\"user stored\");\n    await this._events.load(user);\n    return user;\n  }\n  /**\n   * Trigger a redirect of the current window to the end session endpoint.\n   *\n   * @returns A promise\n   */\n  async signoutRedirect(args = {}) {\n    const logger2 = this._logger.create(\"signoutRedirect\");\n    const {\n      redirectMethod,\n      ...requestArgs\n    } = args;\n    const handle = await this._redirectNavigator.prepare({ redirectMethod });\n    await this._signoutStart({\n      request_type: \"so:r\",\n      post_logout_redirect_uri: this.settings.post_logout_redirect_uri,\n      ...requestArgs\n    }, handle);\n    logger2.info(\"success\");\n  }\n  /**\n   * Process response (callback) from the end session endpoint.\n   * It is recommended to use {@link UserManager.signoutCallback} instead.\n   *\n   * @returns A promise containing signout response\n   *\n   * @see {@link UserManager.signoutCallback}\n   */\n  async signoutRedirectCallback(url = window.location.href) {\n    const logger2 = this._logger.create(\"signoutRedirectCallback\");\n    const response = await this._signoutEnd(url);\n    logger2.info(\"success\");\n    return response;\n  }\n  /**\n   * Trigger a redirect of a popup window to the end session endpoint.\n   *\n   * @returns A promise\n   */\n  async signoutPopup(args = {}) {\n    const logger2 = this._logger.create(\"signoutPopup\");\n    const {\n      popupWindowFeatures,\n      popupWindowTarget,\n      popupSignal,\n      ...requestArgs\n    } = args;\n    const url = this.settings.popup_post_logout_redirect_uri;\n    const handle = await this._popupNavigator.prepare({ popupWindowFeatures, popupWindowTarget, popupSignal });\n    await this._signout({\n      request_type: \"so:p\",\n      post_logout_redirect_uri: url,\n      // we're putting a dummy entry in here because we\n      // need a unique id from the state for notification\n      // to the parent window, which is necessary if we\n      // plan to return back to the client after signout\n      // and so we can close the popup after signout\n      state: url == null ? void 0 : {},\n      ...requestArgs\n    }, handle);\n    logger2.info(\"success\");\n  }\n  /**\n   * Process response (callback) from the end session endpoint from a popup window.\n   * It is recommended to use {@link UserManager.signoutCallback} instead.\n   *\n   * @returns A promise\n   *\n   * @see {@link UserManager.signoutCallback}\n   */\n  async signoutPopupCallback(url = window.location.href, keepOpen = false) {\n    const logger2 = this._logger.create(\"signoutPopupCallback\");\n    await this._popupNavigator.callback(url, { keepOpen });\n    logger2.info(\"success\");\n  }\n  async _signout(args, handle) {\n    const navResponse = await this._signoutStart(args, handle);\n    return await this._signoutEnd(navResponse.url);\n  }\n  async _signoutStart(args = {}, handle) {\n    var _a;\n    const logger2 = this._logger.create(\"_signoutStart\");\n    try {\n      const user = await this._loadUser();\n      logger2.debug(\"loaded current user from storage\");\n      if (this.settings.revokeTokensOnSignout) {\n        await this._revokeInternal(user);\n      }\n      const id_token = args.id_token_hint || user && user.id_token;\n      if (id_token) {\n        logger2.debug(\"setting id_token_hint in signout request\");\n        args.id_token_hint = id_token;\n      }\n      await this.removeUser();\n      logger2.debug(\"user removed, creating signout request\");\n      const signoutRequest = await this._client.createSignoutRequest(args);\n      logger2.debug(\"got signout request\");\n      return await handle.navigate({\n        url: signoutRequest.url,\n        state: (_a = signoutRequest.state) == null ? void 0 : _a.id,\n        scriptOrigin: this.settings.iframeScriptOrigin\n      });\n    } catch (err) {\n      logger2.debug(\"error after preparing navigator, closing navigator window\");\n      handle.close();\n      throw err;\n    }\n  }\n  async _signoutEnd(url) {\n    const logger2 = this._logger.create(\"_signoutEnd\");\n    const signoutResponse = await this._client.processSignoutResponse(url);\n    logger2.debug(\"got signout response\");\n    return signoutResponse;\n  }\n  /**\n   * Trigger a silent request (via an iframe) to the end session endpoint.\n   *\n   * @returns A promise\n   */\n  async signoutSilent(args = {}) {\n    var _a;\n    const logger2 = this._logger.create(\"signoutSilent\");\n    const {\n      silentRequestTimeoutInSeconds,\n      ...requestArgs\n    } = args;\n    const id_token_hint = this.settings.includeIdTokenInSilentSignout ? (_a = await this._loadUser()) == null ? void 0 : _a.id_token : void 0;\n    const url = this.settings.popup_post_logout_redirect_uri;\n    const handle = await this._iframeNavigator.prepare({ silentRequestTimeoutInSeconds });\n    await this._signout({\n      request_type: \"so:s\",\n      post_logout_redirect_uri: url,\n      id_token_hint,\n      ...requestArgs\n    }, handle);\n    logger2.info(\"success\");\n  }\n  /**\n   * Notify the parent window of response (callback) from the end session endpoint.\n   * It is recommended to use {@link UserManager.signoutCallback} instead.\n   *\n   * @returns A promise\n   *\n   * @see {@link UserManager.signoutCallback}\n   */\n  async signoutSilentCallback(url = window.location.href) {\n    const logger2 = this._logger.create(\"signoutSilentCallback\");\n    await this._iframeNavigator.callback(url);\n    logger2.info(\"success\");\n  }\n  async revokeTokens(types) {\n    const user = await this._loadUser();\n    await this._revokeInternal(user, types);\n  }\n  async _revokeInternal(user, types = this.settings.revokeTokenTypes) {\n    const logger2 = this._logger.create(\"_revokeInternal\");\n    if (!user) return;\n    const typesPresent = types.filter((type) => typeof user[type] === \"string\");\n    if (!typesPresent.length) {\n      logger2.debug(\"no need to revoke due to no token(s)\");\n      return;\n    }\n    for (const type of typesPresent) {\n      await this._client.revokeToken(\n        user[type],\n        type\n      );\n      logger2.info(`${type} revoked successfully`);\n      if (type !== \"access_token\") {\n        user[type] = null;\n      }\n    }\n    await this.storeUser(user);\n    logger2.debug(\"user stored\");\n    await this._events.load(user);\n  }\n  /**\n   * Enables silent renew for the `UserManager`.\n   */\n  startSilentRenew() {\n    this._logger.create(\"startSilentRenew\");\n    void this._silentRenewService.start();\n  }\n  /**\n   * Disables silent renew for the `UserManager`.\n   */\n  stopSilentRenew() {\n    this._silentRenewService.stop();\n  }\n  get _userStoreKey() {\n    return `user:${this.settings.authority}:${this.settings.client_id}`;\n  }\n  async _loadUser() {\n    const logger2 = this._logger.create(\"_loadUser\");\n    const storageString = await this.settings.userStore.get(this._userStoreKey);\n    if (storageString) {\n      logger2.debug(\"user storageString loaded\");\n      return User.fromStorageString(storageString);\n    }\n    logger2.debug(\"no user storageString\");\n    return null;\n  }\n  async storeUser(user) {\n    const logger2 = this._logger.create(\"storeUser\");\n    if (user) {\n      logger2.debug(\"storing user\");\n      const storageString = user.toStorageString();\n      await this.settings.userStore.set(this._userStoreKey, storageString);\n    } else {\n      this._logger.debug(\"removing user\");\n      await this.settings.userStore.remove(this._userStoreKey);\n      if (this.settings.dpop) {\n        await this.settings.dpop.store.remove(this.settings.client_id);\n      }\n    }\n  }\n  /**\n   * Removes stale state entries in storage for incomplete authorize requests.\n   */\n  async clearStaleState() {\n    await this._client.clearStaleState();\n  }\n  /**\n   * Dynamically generates a DPoP proof for a given user, URL and optional Http method.\n   * This method is useful when you need to make a request to a resource server\n   * with fetch or similar, and you need to include a DPoP proof in a DPoP header.\n   * @param url - The URL to generate the DPoP proof for\n   * @param user - The user to generate the DPoP proof for\n   * @param httpMethod - Optional, defaults to \"GET\"\n   * @param nonce - Optional nonce provided by the resource server\n   *\n   * @returns A promise containing the DPoP proof or undefined if DPoP is not enabled/no user is found.\n   */\n  async dpopProof(url, user, httpMethod, nonce) {\n    var _a, _b;\n    const dpopState = await ((_b = (_a = this.settings.dpop) == null ? void 0 : _a.store) == null ? void 0 : _b.get(this.settings.client_id));\n    if (dpopState) {\n      return await CryptoUtils.generateDPoPProof({\n        url,\n        accessToken: user == null ? void 0 : user.access_token,\n        httpMethod,\n        keyPair: dpopState.keys,\n        nonce\n      });\n    }\n    return void 0;\n  }\n  async generateDPoPJkt(dpopSettings) {\n    let dpopState = await dpopSettings.store.get(this.settings.client_id);\n    if (!dpopState) {\n      const dpopKeys = await CryptoUtils.generateDPoPKeys();\n      dpopState = new DPoPState(dpopKeys);\n      await dpopSettings.store.set(this.settings.client_id, dpopState);\n    }\n    return await CryptoUtils.generateDPoPJkt(dpopState.keys);\n  }\n};\n\n// package.json\nvar version = \"3.2.0\";\n\n// src/Version.ts\nvar Version = version;\n\n// src/IndexedDbDPoPStore.ts\nvar IndexedDbDPoPStore = class {\n  constructor() {\n    this._dbName = \"oidc\";\n    this._storeName = \"dpop\";\n  }\n  async set(key, value) {\n    const store = await this.createStore(this._dbName, this._storeName);\n    await store(\"readwrite\", (str) => {\n      str.put(value, key);\n      return this.promisifyRequest(str.transaction);\n    });\n  }\n  async get(key) {\n    const store = await this.createStore(this._dbName, this._storeName);\n    return await store(\"readonly\", (str) => {\n      return this.promisifyRequest(str.get(key));\n    });\n  }\n  async remove(key) {\n    const item = await this.get(key);\n    const store = await this.createStore(this._dbName, this._storeName);\n    await store(\"readwrite\", (str) => {\n      return this.promisifyRequest(str.delete(key));\n    });\n    return item;\n  }\n  async getAllKeys() {\n    const store = await this.createStore(this._dbName, this._storeName);\n    return await store(\"readonly\", (str) => {\n      return this.promisifyRequest(str.getAllKeys());\n    });\n  }\n  promisifyRequest(request) {\n    return new Promise((resolve, reject) => {\n      request.oncomplete = request.onsuccess = () => resolve(request.result);\n      request.onabort = request.onerror = () => reject(request.error);\n    });\n  }\n  async createStore(dbName, storeName) {\n    const request = indexedDB.open(dbName);\n    request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n    const db = await this.promisifyRequest(request);\n    return async (txMode, callback) => {\n      const tx = db.transaction(storeName, txMode);\n      const store = tx.objectStore(storeName);\n      return await callback(store);\n    };\n  }\n};\n\n//# sourceMappingURL=oidc-client-ts.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2lkYy1jbGllbnQtdHMvZGlzdC9lc20vb2lkYy1jbGllbnQtdHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsV0FBVztBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGtCQUFrQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxLQUFLLEdBQUcsYUFBYTtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixLQUFLO0FBQzVCLHVCQUF1QixRQUFRLEVBQUUsT0FBTztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ3VDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxxREFBUztBQUN0QixNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsY0FBYyxHQUFHLGVBQWU7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsYUFBYSxHQUFHLGlCQUFpQjtBQUMvQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsNERBQTRELFlBQVk7QUFDeEUsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxzRUFBc0UsWUFBWTtBQUNsRixRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLFdBQVc7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGFBQWE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0dBQWtHLElBQUksR0FBRywwREFBMEQ7QUFDbks7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxXQUFXO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qjs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxJQUFJO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxJQUFJO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxJQUFJO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlGQUFpRjtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekMsWUFBWSxpQ0FBaUM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxJQUFJO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELHVEQUF1RDtBQUMzRyxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLGdEQUFnRCxjQUFjLElBQUk7QUFDbEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLHlCQUF5QixxQkFBcUIsR0FBRyxnQkFBZ0I7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHFCQUFxQixHQUFHLGdCQUFnQixLQUFLLHFCQUFxQjtBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsK0VBQStFO0FBQ25JLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsZ0RBQWdELGNBQWMsSUFBSTtBQUMxSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLDJCQUEyQixxQkFBcUIsR0FBRyxnQkFBZ0I7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLHFCQUFxQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixxQkFBcUIsR0FBRyxnQkFBZ0IsS0FBSyxxQkFBcUI7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLHNHQUFzRztBQUNoTDtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsS0FBSztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCwwREFBMEQ7QUFDekg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLElBQUk7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLElBQUk7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsSUFBSTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLElBQUk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGFBQWE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixrQkFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLG1EQUFtRCxPQUFPO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsMEJBQTBCO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxZQUFZO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsNElBQTRJO0FBQ3pNO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxZQUFZO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsa0hBQWtIO0FBQy9LO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxnRUFBZ0U7QUFDdkg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsd0VBQXdFO0FBQ3BIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixXQUFXLEVBQUUsb0JBQW9CLEVBQUUsVUFBVTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCx1REFBdUQ7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHlCQUF5QjtBQUN2QztBQUNBLGNBQWMsdUJBQXVCO0FBQ3JDO0FBQ0EsY0FBYyxvQkFBb0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQywyQ0FBMkM7QUFDNUU7QUFDQTtBQUNBLDBCQUEwQixXQUFXLEVBQUUsb0JBQW9CLEVBQUUsVUFBVTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxxQkFBcUI7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsWUFBWSxrQkFBa0I7QUFDOUIsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCx3RUFBd0UseUNBQXlDO0FBQ2pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLElBQUk7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFlBQVksa0JBQWtCO0FBQzlCO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0EsTUFBTTtBQUNOLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1SEFBdUg7QUFDdkg7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLGtFQUFrRTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnQkFBZ0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLGtEQUFrRCxPQUFPO0FBQ3pEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsOEJBQThCLCtCQUErQjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSw4Q0FBOEMsdURBQXVEO0FBQ3JHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsNkJBQTZCLHFEQUFxRDtBQUNsRjtBQUNBLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDBGQUEwRjtBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsZ0JBQWdCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixrQ0FBa0M7QUFDakU7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxxQkFBcUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxxREFBcUQ7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixrQ0FBa0M7QUFDakU7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxVQUFVO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCwrQkFBK0I7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCw0QkFBNEIsNEJBQTRCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGtDQUFrQztBQUNqRTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLFFBQVE7QUFDUixRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixRQUFRO0FBQ1IsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsK0JBQStCO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLDRDQUE0QztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTiwyREFBMkQsZ0JBQWdCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLG1DQUFtQztBQUNsRTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLHdEQUF3RCxxREFBcUQ7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixtQ0FBbUM7QUFDbEU7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxVQUFVO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLHlEQUF5RCwrQkFBK0I7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixtQ0FBbUM7QUFDbEU7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsTUFBTTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix3QkFBd0IsR0FBRyx3QkFBd0I7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF3QkU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvb2lkYy1jbGllbnQtdHMvZGlzdC9lc20vb2lkYy1jbGllbnQtdHMuanM/N2JjZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvdXRpbHMvTG9nZ2VyLnRzXG52YXIgbm9wTG9nZ2VyID0ge1xuICBkZWJ1ZzogKCkgPT4gdm9pZCAwLFxuICBpbmZvOiAoKSA9PiB2b2lkIDAsXG4gIHdhcm46ICgpID0+IHZvaWQgMCxcbiAgZXJyb3I6ICgpID0+IHZvaWQgMFxufTtcbnZhciBsZXZlbDtcbnZhciBsb2dnZXI7XG52YXIgTG9nID0gLyogQF9fUFVSRV9fICovICgoTG9nMikgPT4ge1xuICBMb2cyW0xvZzJbXCJOT05FXCJdID0gMF0gPSBcIk5PTkVcIjtcbiAgTG9nMltMb2cyW1wiRVJST1JcIl0gPSAxXSA9IFwiRVJST1JcIjtcbiAgTG9nMltMb2cyW1wiV0FSTlwiXSA9IDJdID0gXCJXQVJOXCI7XG4gIExvZzJbTG9nMltcIklORk9cIl0gPSAzXSA9IFwiSU5GT1wiO1xuICBMb2cyW0xvZzJbXCJERUJVR1wiXSA9IDRdID0gXCJERUJVR1wiO1xuICByZXR1cm4gTG9nMjtcbn0pKExvZyB8fCB7fSk7XG4oKExvZzIpID0+IHtcbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgbGV2ZWwgPSAzIC8qIElORk8gKi87XG4gICAgbG9nZ2VyID0gbm9wTG9nZ2VyO1xuICB9XG4gIExvZzIucmVzZXQgPSByZXNldDtcbiAgZnVuY3Rpb24gc2V0TGV2ZWwodmFsdWUpIHtcbiAgICBpZiAoISgwIC8qIE5PTkUgKi8gPD0gdmFsdWUgJiYgdmFsdWUgPD0gNCAvKiBERUJVRyAqLykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbG9nIGxldmVsXCIpO1xuICAgIH1cbiAgICBsZXZlbCA9IHZhbHVlO1xuICB9XG4gIExvZzIuc2V0TGV2ZWwgPSBzZXRMZXZlbDtcbiAgZnVuY3Rpb24gc2V0TG9nZ2VyKHZhbHVlKSB7XG4gICAgbG9nZ2VyID0gdmFsdWU7XG4gIH1cbiAgTG9nMi5zZXRMb2dnZXIgPSBzZXRMb2dnZXI7XG59KShMb2cgfHwgKExvZyA9IHt9KSk7XG52YXIgTG9nZ2VyID0gY2xhc3MgX0xvZ2dlciB7XG4gIGNvbnN0cnVjdG9yKF9uYW1lKSB7XG4gICAgdGhpcy5fbmFtZSA9IF9uYW1lO1xuICB9XG4gIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtZW51bS1jb21wYXJpc29uICovXG4gIGRlYnVnKC4uLmFyZ3MpIHtcbiAgICBpZiAobGV2ZWwgPj0gNCAvKiBERUJVRyAqLykge1xuICAgICAgbG9nZ2VyLmRlYnVnKF9Mb2dnZXIuX2Zvcm1hdCh0aGlzLl9uYW1lLCB0aGlzLl9tZXRob2QpLCAuLi5hcmdzKTtcbiAgICB9XG4gIH1cbiAgaW5mbyguLi5hcmdzKSB7XG4gICAgaWYgKGxldmVsID49IDMgLyogSU5GTyAqLykge1xuICAgICAgbG9nZ2VyLmluZm8oX0xvZ2dlci5fZm9ybWF0KHRoaXMuX25hbWUsIHRoaXMuX21ldGhvZCksIC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxuICB3YXJuKC4uLmFyZ3MpIHtcbiAgICBpZiAobGV2ZWwgPj0gMiAvKiBXQVJOICovKSB7XG4gICAgICBsb2dnZXIud2FybihfTG9nZ2VyLl9mb3JtYXQodGhpcy5fbmFtZSwgdGhpcy5fbWV0aG9kKSwgLi4uYXJncyk7XG4gICAgfVxuICB9XG4gIGVycm9yKC4uLmFyZ3MpIHtcbiAgICBpZiAobGV2ZWwgPj0gMSAvKiBFUlJPUiAqLykge1xuICAgICAgbG9nZ2VyLmVycm9yKF9Mb2dnZXIuX2Zvcm1hdCh0aGlzLl9uYW1lLCB0aGlzLl9tZXRob2QpLCAuLi5hcmdzKTtcbiAgICB9XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWVudW0tY29tcGFyaXNvbiAqL1xuICB0aHJvdyhlcnIpIHtcbiAgICB0aGlzLmVycm9yKGVycik7XG4gICAgdGhyb3cgZXJyO1xuICB9XG4gIGNyZWF0ZShtZXRob2QpIHtcbiAgICBjb25zdCBtZXRob2RMb2dnZXIgPSBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIG1ldGhvZExvZ2dlci5fbWV0aG9kID0gbWV0aG9kO1xuICAgIG1ldGhvZExvZ2dlci5kZWJ1ZyhcImJlZ2luXCIpO1xuICAgIHJldHVybiBtZXRob2RMb2dnZXI7XG4gIH1cbiAgc3RhdGljIGNyZWF0ZVN0YXRpYyhuYW1lLCBzdGF0aWNNZXRob2QpIHtcbiAgICBjb25zdCBzdGF0aWNMb2dnZXIgPSBuZXcgX0xvZ2dlcihgJHtuYW1lfS4ke3N0YXRpY01ldGhvZH1gKTtcbiAgICBzdGF0aWNMb2dnZXIuZGVidWcoXCJiZWdpblwiKTtcbiAgICByZXR1cm4gc3RhdGljTG9nZ2VyO1xuICB9XG4gIHN0YXRpYyBfZm9ybWF0KG5hbWUsIG1ldGhvZCkge1xuICAgIGNvbnN0IHByZWZpeCA9IGBbJHtuYW1lfV1gO1xuICAgIHJldHVybiBtZXRob2QgPyBgJHtwcmVmaXh9ICR7bWV0aG9kfTpgIDogcHJlZml4O1xuICB9XG4gIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtZW51bS1jb21wYXJpc29uICovXG4gIC8vIGhlbHBlcnMgZm9yIHN0YXRpYyBjbGFzcyBtZXRob2RzXG4gIHN0YXRpYyBkZWJ1ZyhuYW1lLCAuLi5hcmdzKSB7XG4gICAgaWYgKGxldmVsID49IDQgLyogREVCVUcgKi8pIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhfTG9nZ2VyLl9mb3JtYXQobmFtZSksIC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgaW5mbyhuYW1lLCAuLi5hcmdzKSB7XG4gICAgaWYgKGxldmVsID49IDMgLyogSU5GTyAqLykge1xuICAgICAgbG9nZ2VyLmluZm8oX0xvZ2dlci5fZm9ybWF0KG5hbWUpLCAuLi5hcmdzKTtcbiAgICB9XG4gIH1cbiAgc3RhdGljIHdhcm4obmFtZSwgLi4uYXJncykge1xuICAgIGlmIChsZXZlbCA+PSAyIC8qIFdBUk4gKi8pIHtcbiAgICAgIGxvZ2dlci53YXJuKF9Mb2dnZXIuX2Zvcm1hdChuYW1lKSwgLi4uYXJncyk7XG4gICAgfVxuICB9XG4gIHN0YXRpYyBlcnJvcihuYW1lLCAuLi5hcmdzKSB7XG4gICAgaWYgKGxldmVsID49IDEgLyogRVJST1IgKi8pIHtcbiAgICAgIGxvZ2dlci5lcnJvcihfTG9nZ2VyLl9mb3JtYXQobmFtZSksIC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtZW51bS1jb21wYXJpc29uICovXG59O1xuTG9nLnJlc2V0KCk7XG5cbi8vIHNyYy91dGlscy9Kd3RVdGlscy50c1xuaW1wb3J0IHsgand0RGVjb2RlIH0gZnJvbSBcImp3dC1kZWNvZGVcIjtcbnZhciBKd3RVdGlscyA9IGNsYXNzIHtcbiAgLy8gSU1QT1JUQU5UOiBkb2Vzbid0IHZhbGlkYXRlIHRoZSB0b2tlblxuICBzdGF0aWMgZGVjb2RlKHRva2VuKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBqd3REZWNvZGUodG9rZW4pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2VyLmVycm9yKFwiSnd0VXRpbHMuZGVjb2RlXCIsIGVycik7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG4gIHN0YXRpYyBhc3luYyBnZW5lcmF0ZVNpZ25lZEp3dChoZWFkZXIsIHBheWxvYWQsIHByaXZhdGVLZXkpIHtcbiAgICBjb25zdCBlbmNvZGVkSGVhZGVyID0gQ3J5cHRvVXRpbHMuZW5jb2RlQmFzZTY0VXJsKG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShKU09OLnN0cmluZ2lmeShoZWFkZXIpKSk7XG4gICAgY29uc3QgZW5jb2RlZFBheWxvYWQgPSBDcnlwdG9VdGlscy5lbmNvZGVCYXNlNjRVcmwobmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKSk7XG4gICAgY29uc3QgZW5jb2RlZFRva2VuID0gYCR7ZW5jb2RlZEhlYWRlcn0uJHtlbmNvZGVkUGF5bG9hZH1gO1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHdpbmRvdy5jcnlwdG8uc3VidGxlLnNpZ24oXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiRUNEU0FcIixcbiAgICAgICAgaGFzaDogeyBuYW1lOiBcIlNIQS0yNTZcIiB9XG4gICAgICB9LFxuICAgICAgcHJpdmF0ZUtleSxcbiAgICAgIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShlbmNvZGVkVG9rZW4pXG4gICAgKTtcbiAgICBjb25zdCBlbmNvZGVkU2lnbmF0dXJlID0gQ3J5cHRvVXRpbHMuZW5jb2RlQmFzZTY0VXJsKG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSkpO1xuICAgIHJldHVybiBgJHtlbmNvZGVkVG9rZW59LiR7ZW5jb2RlZFNpZ25hdHVyZX1gO1xuICB9XG59O1xuXG4vLyBzcmMvdXRpbHMvQ3J5cHRvVXRpbHMudHNcbnZhciBVVUlEX1Y0X1RFTVBMQVRFID0gXCIxMDAwMDAwMC0xMDAwLTQwMDAtODAwMC0xMDAwMDAwMDAwMDBcIjtcbnZhciB0b0Jhc2U2NCA9ICh2YWwpID0+IGJ0b2EoWy4uLm5ldyBVaW50OEFycmF5KHZhbCldLm1hcCgoY2hyKSA9PiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNocikpLmpvaW4oXCJcIikpO1xudmFyIF9DcnlwdG9VdGlscyA9IGNsYXNzIF9DcnlwdG9VdGlscyB7XG4gIHN0YXRpYyBfcmFuZG9tV29yZCgpIHtcbiAgICBjb25zdCBhcnIgPSBuZXcgVWludDMyQXJyYXkoMSk7XG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xuICAgIHJldHVybiBhcnJbMF07XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBSRkM0MTIyIHZlcnNpb24gNCBndWlkXG4gICAqL1xuICBzdGF0aWMgZ2VuZXJhdGVVVUlEdjQoKSB7XG4gICAgY29uc3QgdXVpZCA9IFVVSURfVjRfVEVNUExBVEUucmVwbGFjZShcbiAgICAgIC9bMDE4XS9nLFxuICAgICAgKGMpID0+ICgrYyBeIF9DcnlwdG9VdGlscy5fcmFuZG9tV29yZCgpICYgMTUgPj4gK2MgLyA0KS50b1N0cmluZygxNilcbiAgICApO1xuICAgIHJldHVybiB1dWlkLnJlcGxhY2UoLy0vZywgXCJcIik7XG4gIH1cbiAgLyoqXG4gICAqIFBLQ0U6IEdlbmVyYXRlIGEgY29kZSB2ZXJpZmllclxuICAgKi9cbiAgc3RhdGljIGdlbmVyYXRlQ29kZVZlcmlmaWVyKCkge1xuICAgIHJldHVybiBfQ3J5cHRvVXRpbHMuZ2VuZXJhdGVVVUlEdjQoKSArIF9DcnlwdG9VdGlscy5nZW5lcmF0ZVVVSUR2NCgpICsgX0NyeXB0b1V0aWxzLmdlbmVyYXRlVVVJRHY0KCk7XG4gIH1cbiAgLyoqXG4gICAqIFBLQ0U6IEdlbmVyYXRlIGEgY29kZSBjaGFsbGVuZ2VcbiAgICovXG4gIHN0YXRpYyBhc3luYyBnZW5lcmF0ZUNvZGVDaGFsbGVuZ2UoY29kZV92ZXJpZmllcikge1xuICAgIGlmICghY3J5cHRvLnN1YnRsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ3J5cHRvLnN1YnRsZSBpcyBhdmFpbGFibGUgb25seSBpbiBzZWN1cmUgY29udGV4dHMgKEhUVFBTKS5cIik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgICBjb25zdCBkYXRhID0gZW5jb2Rlci5lbmNvZGUoY29kZV92ZXJpZmllcik7XG4gICAgICBjb25zdCBoYXNoZWQgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdChcIlNIQS0yNTZcIiwgZGF0YSk7XG4gICAgICByZXR1cm4gdG9CYXNlNjQoaGFzaGVkKS5yZXBsYWNlKC9cXCsvZywgXCItXCIpLnJlcGxhY2UoL1xcLy9nLCBcIl9cIikucmVwbGFjZSgvPSskLywgXCJcIik7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBMb2dnZXIuZXJyb3IoXCJDcnlwdG9VdGlscy5nZW5lcmF0ZUNvZGVDaGFsbGVuZ2VcIiwgZXJyKTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIGJhc2U2NC1lbmNvZGVkIHN0cmluZyBmb3IgYSBiYXNpYyBhdXRoIGhlYWRlclxuICAgKi9cbiAgc3RhdGljIGdlbmVyYXRlQmFzaWNBdXRoKGNsaWVudF9pZCwgY2xpZW50X3NlY3JldCkge1xuICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbiAgICBjb25zdCBkYXRhID0gZW5jb2Rlci5lbmNvZGUoW2NsaWVudF9pZCwgY2xpZW50X3NlY3JldF0uam9pbihcIjpcIikpO1xuICAgIHJldHVybiB0b0Jhc2U2NChkYXRhKTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgaGFzaCBvZiBhIHN0cmluZyB1c2luZyBhIGdpdmVuIGFsZ29yaXRobVxuICAgKiBAcGFyYW0gYWxnXG4gICAqIEBwYXJhbSBtZXNzYWdlXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgaGFzaChhbGcsIG1lc3NhZ2UpIHtcbiAgICBjb25zdCBtc2dVaW50OCA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShtZXNzYWdlKTtcbiAgICBjb25zdCBoYXNoQnVmZmVyID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5kaWdlc3QoYWxnLCBtc2dVaW50OCk7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGhhc2hCdWZmZXIpO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSByZmM3NjM4IGNvbXBsaWFudCBqd2sgdGh1bWJwcmludFxuICAgKiBAcGFyYW0gandrXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgY3VzdG9tQ2FsY3VsYXRlSndrVGh1bWJwcmludChqd2spIHtcbiAgICBsZXQganNvbk9iamVjdDtcbiAgICBzd2l0Y2ggKGp3ay5rdHkpIHtcbiAgICAgIGNhc2UgXCJSU0FcIjpcbiAgICAgICAganNvbk9iamVjdCA9IHtcbiAgICAgICAgICBcImVcIjogandrLmUsXG4gICAgICAgICAgXCJrdHlcIjogandrLmt0eSxcbiAgICAgICAgICBcIm5cIjogandrLm5cbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiRUNcIjpcbiAgICAgICAganNvbk9iamVjdCA9IHtcbiAgICAgICAgICBcImNydlwiOiBqd2suY3J2LFxuICAgICAgICAgIFwia3R5XCI6IGp3ay5rdHksXG4gICAgICAgICAgXCJ4XCI6IGp3ay54LFxuICAgICAgICAgIFwieVwiOiBqd2sueVxuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJPS1BcIjpcbiAgICAgICAganNvbk9iamVjdCA9IHtcbiAgICAgICAgICBcImNydlwiOiBqd2suY3J2LFxuICAgICAgICAgIFwia3R5XCI6IGp3ay5rdHksXG4gICAgICAgICAgXCJ4XCI6IGp3ay54XG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm9jdFwiOlxuICAgICAgICBqc29uT2JqZWN0ID0ge1xuICAgICAgICAgIFwiY3J2XCI6IGp3ay5rLFxuICAgICAgICAgIFwia3R5XCI6IGp3ay5rdHlcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGp3ayB0eXBlXCIpO1xuICAgIH1cbiAgICBjb25zdCB1dGY4ZW5jb2RlZEFuZEhhc2hlZCA9IGF3YWl0IF9DcnlwdG9VdGlscy5oYXNoKFwiU0hBLTI1NlwiLCBKU09OLnN0cmluZ2lmeShqc29uT2JqZWN0KSk7XG4gICAgcmV0dXJuIF9DcnlwdG9VdGlscy5lbmNvZGVCYXNlNjRVcmwodXRmOGVuY29kZWRBbmRIYXNoZWQpO1xuICB9XG4gIHN0YXRpYyBhc3luYyBnZW5lcmF0ZURQb1BQcm9vZih7XG4gICAgdXJsLFxuICAgIGFjY2Vzc1Rva2VuLFxuICAgIGh0dHBNZXRob2QsXG4gICAga2V5UGFpcixcbiAgICBub25jZVxuICB9KSB7XG4gICAgbGV0IGhhc2hlZFRva2VuO1xuICAgIGxldCBlbmNvZGVkSGFzaDtcbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgXCJqdGlcIjogd2luZG93LmNyeXB0by5yYW5kb21VVUlEKCksXG4gICAgICBcImh0bVwiOiBodHRwTWV0aG9kICE9IG51bGwgPyBodHRwTWV0aG9kIDogXCJHRVRcIixcbiAgICAgIFwiaHR1XCI6IHVybCxcbiAgICAgIFwiaWF0XCI6IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDFlMylcbiAgICB9O1xuICAgIGlmIChhY2Nlc3NUb2tlbikge1xuICAgICAgaGFzaGVkVG9rZW4gPSBhd2FpdCBfQ3J5cHRvVXRpbHMuaGFzaChcIlNIQS0yNTZcIiwgYWNjZXNzVG9rZW4pO1xuICAgICAgZW5jb2RlZEhhc2ggPSBfQ3J5cHRvVXRpbHMuZW5jb2RlQmFzZTY0VXJsKGhhc2hlZFRva2VuKTtcbiAgICAgIHBheWxvYWQuYXRoID0gZW5jb2RlZEhhc2g7XG4gICAgfVxuICAgIGlmIChub25jZSkge1xuICAgICAgcGF5bG9hZC5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3QgcHVibGljSndrID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5leHBvcnRLZXkoXCJqd2tcIiwga2V5UGFpci5wdWJsaWNLZXkpO1xuICAgICAgY29uc3QgaGVhZGVyID0ge1xuICAgICAgICBcImFsZ1wiOiBcIkVTMjU2XCIsXG4gICAgICAgIFwidHlwXCI6IFwiZHBvcCtqd3RcIixcbiAgICAgICAgXCJqd2tcIjoge1xuICAgICAgICAgIFwiY3J2XCI6IHB1YmxpY0p3ay5jcnYsXG4gICAgICAgICAgXCJrdHlcIjogcHVibGljSndrLmt0eSxcbiAgICAgICAgICBcInhcIjogcHVibGljSndrLngsXG4gICAgICAgICAgXCJ5XCI6IHB1YmxpY0p3ay55XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXR1cm4gYXdhaXQgSnd0VXRpbHMuZ2VuZXJhdGVTaWduZWRKd3QoaGVhZGVyLCBwYXlsb2FkLCBrZXlQYWlyLnByaXZhdGVLZXkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFR5cGVFcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIGV4cG9ydGluZyBkcG9wIHB1YmxpYyBrZXk6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN0YXRpYyBhc3luYyBnZW5lcmF0ZURQb1BKa3Qoa2V5UGFpcikge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwdWJsaWNKd2sgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmV4cG9ydEtleShcImp3a1wiLCBrZXlQYWlyLnB1YmxpY0tleSk7XG4gICAgICByZXR1cm4gYXdhaXQgX0NyeXB0b1V0aWxzLmN1c3RvbUNhbGN1bGF0ZUp3a1RodW1icHJpbnQocHVibGljSndrKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBUeXBlRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgcmV0cmlldmUgZHBvcCBrZXlzIGZyb20gc3RvcmFnZTogJHtlcnIubWVzc2FnZX1gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc3RhdGljIGFzeW5jIGdlbmVyYXRlRFBvUEtleXMoKSB7XG4gICAgcmV0dXJuIGF3YWl0IHdpbmRvdy5jcnlwdG8uc3VidGxlLmdlbmVyYXRlS2V5KFxuICAgICAge1xuICAgICAgICBuYW1lOiBcIkVDRFNBXCIsXG4gICAgICAgIG5hbWVkQ3VydmU6IFwiUC0yNTZcIlxuICAgICAgfSxcbiAgICAgIGZhbHNlLFxuICAgICAgW1wic2lnblwiLCBcInZlcmlmeVwiXVxuICAgICk7XG4gIH1cbn07XG4vKipcbiAqIEdlbmVyYXRlcyBhIGJhc2U2NHVybCBlbmNvZGVkIHN0cmluZ1xuICovXG5fQ3J5cHRvVXRpbHMuZW5jb2RlQmFzZTY0VXJsID0gKGlucHV0KSA9PiB7XG4gIHJldHVybiB0b0Jhc2U2NChpbnB1dCkucmVwbGFjZSgvPS9nLCBcIlwiKS5yZXBsYWNlKC9cXCsvZywgXCItXCIpLnJlcGxhY2UoL1xcLy9nLCBcIl9cIik7XG59O1xudmFyIENyeXB0b1V0aWxzID0gX0NyeXB0b1V0aWxzO1xuXG4vLyBzcmMvdXRpbHMvRXZlbnQudHNcbnZhciBFdmVudCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX25hbWUpIHtcbiAgICB0aGlzLl9uYW1lID0gX25hbWU7XG4gICAgdGhpcy5fY2FsbGJhY2tzID0gW107XG4gICAgdGhpcy5fbG9nZ2VyID0gbmV3IExvZ2dlcihgRXZlbnQoJyR7dGhpcy5fbmFtZX0nKWApO1xuICB9XG4gIGFkZEhhbmRsZXIoY2IpIHtcbiAgICB0aGlzLl9jYWxsYmFja3MucHVzaChjYik7XG4gICAgcmV0dXJuICgpID0+IHRoaXMucmVtb3ZlSGFuZGxlcihjYik7XG4gIH1cbiAgcmVtb3ZlSGFuZGxlcihjYikge1xuICAgIGNvbnN0IGlkeCA9IHRoaXMuX2NhbGxiYWNrcy5sYXN0SW5kZXhPZihjYik7XG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICB0aGlzLl9jYWxsYmFja3Muc3BsaWNlKGlkeCwgMSk7XG4gICAgfVxuICB9XG4gIGFzeW5jIHJhaXNlKC4uLmV2KSB7XG4gICAgdGhpcy5fbG9nZ2VyLmRlYnVnKFwicmFpc2U6XCIsIC4uLmV2KTtcbiAgICBmb3IgKGNvbnN0IGNiIG9mIHRoaXMuX2NhbGxiYWNrcykge1xuICAgICAgYXdhaXQgY2IoLi4uZXYpO1xuICAgIH1cbiAgfVxufTtcblxuLy8gc3JjL3V0aWxzL1BvcHVwVXRpbHMudHNcbnZhciBQb3B1cFV0aWxzID0gY2xhc3Mge1xuICAvKipcbiAgICogUG9wdWxhdGVzIGEgbWFwIG9mIHdpbmRvdyBmZWF0dXJlcyB3aXRoIGEgcGxhY2VtZW50IGNlbnRlcmVkIGluIGZyb250IG9mXG4gICAqIHRoZSBjdXJyZW50IHdpbmRvdy4gSWYgbm8gZXhwbGljaXQgd2lkdGggaXMgZ2l2ZW4sIGEgZGVmYXVsdCB2YWx1ZSBpc1xuICAgKiBiaW5uZWQgaW50byBbODAwLCA3MjAsIDYwMCwgNDgwLCAzNjBdIGJhc2VkIG9uIHRoZSBjdXJyZW50IHdpbmRvdydzIHdpZHRoLlxuICAgKi9cbiAgc3RhdGljIGNlbnRlcih7IC4uLmZlYXR1cmVzIH0pIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICBpZiAoZmVhdHVyZXMud2lkdGggPT0gbnVsbClcbiAgICAgIGZlYXR1cmVzLndpZHRoID0gKF9hID0gWzgwMCwgNzIwLCA2MDAsIDQ4MF0uZmluZCgod2lkdGgpID0+IHdpZHRoIDw9IHdpbmRvdy5vdXRlcldpZHRoIC8gMS42MTgpKSAhPSBudWxsID8gX2EgOiAzNjA7XG4gICAgKF9iID0gZmVhdHVyZXMubGVmdCkgIT0gbnVsbCA/IF9iIDogZmVhdHVyZXMubGVmdCA9IE1hdGgubWF4KDAsIE1hdGgucm91bmQod2luZG93LnNjcmVlblggKyAod2luZG93Lm91dGVyV2lkdGggLSBmZWF0dXJlcy53aWR0aCkgLyAyKSk7XG4gICAgaWYgKGZlYXR1cmVzLmhlaWdodCAhPSBudWxsKVxuICAgICAgKF9jID0gZmVhdHVyZXMudG9wKSAhPSBudWxsID8gX2MgOiBmZWF0dXJlcy50b3AgPSBNYXRoLm1heCgwLCBNYXRoLnJvdW5kKHdpbmRvdy5zY3JlZW5ZICsgKHdpbmRvdy5vdXRlckhlaWdodCAtIGZlYXR1cmVzLmhlaWdodCkgLyAyKSk7XG4gICAgcmV0dXJuIGZlYXR1cmVzO1xuICB9XG4gIHN0YXRpYyBzZXJpYWxpemUoZmVhdHVyZXMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoZmVhdHVyZXMpLmZpbHRlcigoWywgdmFsdWVdKSA9PiB2YWx1ZSAhPSBudWxsKS5tYXAoKFtrZXksIHZhbHVlXSkgPT4gYCR7a2V5fT0ke3R5cGVvZiB2YWx1ZSAhPT0gXCJib29sZWFuXCIgPyB2YWx1ZSA6IHZhbHVlID8gXCJ5ZXNcIiA6IFwibm9cIn1gKS5qb2luKFwiLFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL3V0aWxzL1RpbWVyLnRzXG52YXIgVGltZXIgPSBjbGFzcyBfVGltZXIgZXh0ZW5kcyBFdmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5fbG9nZ2VyID0gbmV3IExvZ2dlcihgVGltZXIoJyR7dGhpcy5fbmFtZX0nKWApO1xuICAgIHRoaXMuX3RpbWVySGFuZGxlID0gbnVsbDtcbiAgICB0aGlzLl9leHBpcmF0aW9uID0gMDtcbiAgICB0aGlzLl9jYWxsYmFjayA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGRpZmYgPSB0aGlzLl9leHBpcmF0aW9uIC0gX1RpbWVyLmdldEVwb2NoVGltZSgpO1xuICAgICAgdGhpcy5fbG9nZ2VyLmRlYnVnKFwidGltZXIgY29tcGxldGVzIGluXCIsIGRpZmYpO1xuICAgICAgaWYgKHRoaXMuX2V4cGlyYXRpb24gPD0gX1RpbWVyLmdldEVwb2NoVGltZSgpKSB7XG4gICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICAgIHZvaWQgc3VwZXIucmFpc2UoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8vIGdldCB0aGUgdGltZVxuICBzdGF0aWMgZ2V0RXBvY2hUaW1lKCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxZTMpO1xuICB9XG4gIGluaXQoZHVyYXRpb25JblNlY29uZHMpIHtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcImluaXRcIik7XG4gICAgZHVyYXRpb25JblNlY29uZHMgPSBNYXRoLm1heChNYXRoLmZsb29yKGR1cmF0aW9uSW5TZWNvbmRzKSwgMSk7XG4gICAgY29uc3QgZXhwaXJhdGlvbiA9IF9UaW1lci5nZXRFcG9jaFRpbWUoKSArIGR1cmF0aW9uSW5TZWNvbmRzO1xuICAgIGlmICh0aGlzLmV4cGlyYXRpb24gPT09IGV4cGlyYXRpb24gJiYgdGhpcy5fdGltZXJIYW5kbGUpIHtcbiAgICAgIGxvZ2dlcjIuZGVidWcoXCJza2lwcGluZyBzaW5jZSBhbHJlYWR5IGluaXRpYWxpemVkIGZvciBleHBpcmF0aW9uIGF0XCIsIHRoaXMuZXhwaXJhdGlvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgbG9nZ2VyMi5kZWJ1ZyhcInVzaW5nIGR1cmF0aW9uXCIsIGR1cmF0aW9uSW5TZWNvbmRzKTtcbiAgICB0aGlzLl9leHBpcmF0aW9uID0gZXhwaXJhdGlvbjtcbiAgICBjb25zdCB0aW1lckR1cmF0aW9uSW5TZWNvbmRzID0gTWF0aC5taW4oZHVyYXRpb25JblNlY29uZHMsIDUpO1xuICAgIHRoaXMuX3RpbWVySGFuZGxlID0gc2V0SW50ZXJ2YWwodGhpcy5fY2FsbGJhY2ssIHRpbWVyRHVyYXRpb25JblNlY29uZHMgKiAxZTMpO1xuICB9XG4gIGdldCBleHBpcmF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9leHBpcmF0aW9uO1xuICB9XG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLl9sb2dnZXIuY3JlYXRlKFwiY2FuY2VsXCIpO1xuICAgIGlmICh0aGlzLl90aW1lckhhbmRsZSkge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl90aW1lckhhbmRsZSk7XG4gICAgICB0aGlzLl90aW1lckhhbmRsZSA9IG51bGw7XG4gICAgfVxuICB9XG59O1xuXG4vLyBzcmMvdXRpbHMvVXJsVXRpbHMudHNcbnZhciBVcmxVdGlscyA9IGNsYXNzIHtcbiAgc3RhdGljIHJlYWRQYXJhbXModXJsLCByZXNwb25zZU1vZGUgPSBcInF1ZXJ5XCIpIHtcbiAgICBpZiAoIXVybCkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgVVJMXCIpO1xuICAgIGNvbnN0IHBhcnNlZFVybCA9IG5ldyBVUkwodXJsLCBcImh0dHA6Ly8xMjcuMC4wLjFcIik7XG4gICAgY29uc3QgcGFyYW1zID0gcGFyc2VkVXJsW3Jlc3BvbnNlTW9kZSA9PT0gXCJmcmFnbWVudFwiID8gXCJoYXNoXCIgOiBcInNlYXJjaFwiXTtcbiAgICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyhwYXJhbXMuc2xpY2UoMSkpO1xuICB9XG59O1xudmFyIFVSTF9TVEFURV9ERUxJTUlURVIgPSBcIjtcIjtcblxuLy8gc3JjL2Vycm9ycy9FcnJvclJlc3BvbnNlLnRzXG52YXIgRXJyb3JSZXNwb25zZSA9IGNsYXNzIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihhcmdzLCBmb3JtKSB7XG4gICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgc3VwZXIoYXJncy5lcnJvcl9kZXNjcmlwdGlvbiB8fCBhcmdzLmVycm9yIHx8IFwiXCIpO1xuICAgIHRoaXMuZm9ybSA9IGZvcm07XG4gICAgLyoqIE1hcmtlciB0byBkZXRlY3QgY2xhc3M6IFwiRXJyb3JSZXNwb25zZVwiICovXG4gICAgdGhpcy5uYW1lID0gXCJFcnJvclJlc3BvbnNlXCI7XG4gICAgaWYgKCFhcmdzLmVycm9yKSB7XG4gICAgICBMb2dnZXIuZXJyb3IoXCJFcnJvclJlc3BvbnNlXCIsIFwiTm8gZXJyb3IgcGFzc2VkXCIpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gZXJyb3IgcGFzc2VkXCIpO1xuICAgIH1cbiAgICB0aGlzLmVycm9yID0gYXJncy5lcnJvcjtcbiAgICB0aGlzLmVycm9yX2Rlc2NyaXB0aW9uID0gKF9hID0gYXJncy5lcnJvcl9kZXNjcmlwdGlvbikgIT0gbnVsbCA/IF9hIDogbnVsbDtcbiAgICB0aGlzLmVycm9yX3VyaSA9IChfYiA9IGFyZ3MuZXJyb3JfdXJpKSAhPSBudWxsID8gX2IgOiBudWxsO1xuICAgIHRoaXMuc3RhdGUgPSBhcmdzLnVzZXJTdGF0ZTtcbiAgICB0aGlzLnNlc3Npb25fc3RhdGUgPSAoX2MgPSBhcmdzLnNlc3Npb25fc3RhdGUpICE9IG51bGwgPyBfYyA6IG51bGw7XG4gICAgdGhpcy51cmxfc3RhdGUgPSBhcmdzLnVybF9zdGF0ZTtcbiAgfVxufTtcblxuLy8gc3JjL2Vycm9ycy9FcnJvclRpbWVvdXQudHNcbnZhciBFcnJvclRpbWVvdXQgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIC8qKiBNYXJrZXIgdG8gZGV0ZWN0IGNsYXNzOiBcIkVycm9yVGltZW91dFwiICovXG4gICAgdGhpcy5uYW1lID0gXCJFcnJvclRpbWVvdXRcIjtcbiAgfVxufTtcblxuLy8gc3JjL0FjY2Vzc1Rva2VuRXZlbnRzLnRzXG52YXIgQWNjZXNzVG9rZW5FdmVudHMgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGFyZ3MpIHtcbiAgICB0aGlzLl9sb2dnZXIgPSBuZXcgTG9nZ2VyKFwiQWNjZXNzVG9rZW5FdmVudHNcIik7XG4gICAgdGhpcy5fZXhwaXJpbmdUaW1lciA9IG5ldyBUaW1lcihcIkFjY2VzcyB0b2tlbiBleHBpcmluZ1wiKTtcbiAgICB0aGlzLl9leHBpcmVkVGltZXIgPSBuZXcgVGltZXIoXCJBY2Nlc3MgdG9rZW4gZXhwaXJlZFwiKTtcbiAgICB0aGlzLl9leHBpcmluZ05vdGlmaWNhdGlvblRpbWVJblNlY29uZHMgPSBhcmdzLmV4cGlyaW5nTm90aWZpY2F0aW9uVGltZUluU2Vjb25kcztcbiAgfVxuICBhc3luYyBsb2FkKGNvbnRhaW5lcikge1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwibG9hZFwiKTtcbiAgICBpZiAoY29udGFpbmVyLmFjY2Vzc190b2tlbiAmJiBjb250YWluZXIuZXhwaXJlc19pbiAhPT0gdm9pZCAwKSB7XG4gICAgICBjb25zdCBkdXJhdGlvbiA9IGNvbnRhaW5lci5leHBpcmVzX2luO1xuICAgICAgbG9nZ2VyMi5kZWJ1ZyhcImFjY2VzcyB0b2tlbiBwcmVzZW50LCByZW1haW5pbmcgZHVyYXRpb246XCIsIGR1cmF0aW9uKTtcbiAgICAgIGlmIChkdXJhdGlvbiA+IDApIHtcbiAgICAgICAgbGV0IGV4cGlyaW5nID0gZHVyYXRpb24gLSB0aGlzLl9leHBpcmluZ05vdGlmaWNhdGlvblRpbWVJblNlY29uZHM7XG4gICAgICAgIGlmIChleHBpcmluZyA8PSAwKSB7XG4gICAgICAgICAgZXhwaXJpbmcgPSAxO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlcjIuZGVidWcoXCJyZWdpc3RlcmluZyBleHBpcmluZyB0aW1lciwgcmFpc2luZyBpblwiLCBleHBpcmluZywgXCJzZWNvbmRzXCIpO1xuICAgICAgICB0aGlzLl9leHBpcmluZ1RpbWVyLmluaXQoZXhwaXJpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nZ2VyMi5kZWJ1ZyhcImNhbmNlbGluZyBleGlzdGluZyBleHBpcmluZyB0aW1lciBiZWNhdXNlIHdlJ3JlIHBhc3QgZXhwaXJhdGlvbi5cIik7XG4gICAgICAgIHRoaXMuX2V4cGlyaW5nVGltZXIuY2FuY2VsKCk7XG4gICAgICB9XG4gICAgICBjb25zdCBleHBpcmVkID0gZHVyYXRpb24gKyAxO1xuICAgICAgbG9nZ2VyMi5kZWJ1ZyhcInJlZ2lzdGVyaW5nIGV4cGlyZWQgdGltZXIsIHJhaXNpbmcgaW5cIiwgZXhwaXJlZCwgXCJzZWNvbmRzXCIpO1xuICAgICAgdGhpcy5fZXhwaXJlZFRpbWVyLmluaXQoZXhwaXJlZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2V4cGlyaW5nVGltZXIuY2FuY2VsKCk7XG4gICAgICB0aGlzLl9leHBpcmVkVGltZXIuY2FuY2VsKCk7XG4gICAgfVxuICB9XG4gIGFzeW5jIHVubG9hZCgpIHtcbiAgICB0aGlzLl9sb2dnZXIuZGVidWcoXCJ1bmxvYWQ6IGNhbmNlbGluZyBleGlzdGluZyBhY2Nlc3MgdG9rZW4gdGltZXJzXCIpO1xuICAgIHRoaXMuX2V4cGlyaW5nVGltZXIuY2FuY2VsKCk7XG4gICAgdGhpcy5fZXhwaXJlZFRpbWVyLmNhbmNlbCgpO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgY2FsbGJhY2s6IFJhaXNlZCBwcmlvciB0byB0aGUgYWNjZXNzIHRva2VuIGV4cGlyaW5nLlxuICAgKi9cbiAgYWRkQWNjZXNzVG9rZW5FeHBpcmluZyhjYikge1xuICAgIHJldHVybiB0aGlzLl9leHBpcmluZ1RpbWVyLmFkZEhhbmRsZXIoY2IpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgY2FsbGJhY2s6IFJhaXNlZCBwcmlvciB0byB0aGUgYWNjZXNzIHRva2VuIGV4cGlyaW5nLlxuICAgKi9cbiAgcmVtb3ZlQWNjZXNzVG9rZW5FeHBpcmluZyhjYikge1xuICAgIHRoaXMuX2V4cGlyaW5nVGltZXIucmVtb3ZlSGFuZGxlcihjYik7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBjYWxsYmFjazogUmFpc2VkIGFmdGVyIHRoZSBhY2Nlc3MgdG9rZW4gaGFzIGV4cGlyZWQuXG4gICAqL1xuICBhZGRBY2Nlc3NUb2tlbkV4cGlyZWQoY2IpIHtcbiAgICByZXR1cm4gdGhpcy5fZXhwaXJlZFRpbWVyLmFkZEhhbmRsZXIoY2IpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgY2FsbGJhY2s6IFJhaXNlZCBhZnRlciB0aGUgYWNjZXNzIHRva2VuIGhhcyBleHBpcmVkLlxuICAgKi9cbiAgcmVtb3ZlQWNjZXNzVG9rZW5FeHBpcmVkKGNiKSB7XG4gICAgdGhpcy5fZXhwaXJlZFRpbWVyLnJlbW92ZUhhbmRsZXIoY2IpO1xuICB9XG59O1xuXG4vLyBzcmMvQ2hlY2tTZXNzaW9uSUZyYW1lLnRzXG52YXIgQ2hlY2tTZXNzaW9uSUZyYW1lID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihfY2FsbGJhY2ssIF9jbGllbnRfaWQsIHVybCwgX2ludGVydmFsSW5TZWNvbmRzLCBfc3RvcE9uRXJyb3IpIHtcbiAgICB0aGlzLl9jYWxsYmFjayA9IF9jYWxsYmFjaztcbiAgICB0aGlzLl9jbGllbnRfaWQgPSBfY2xpZW50X2lkO1xuICAgIHRoaXMuX2ludGVydmFsSW5TZWNvbmRzID0gX2ludGVydmFsSW5TZWNvbmRzO1xuICAgIHRoaXMuX3N0b3BPbkVycm9yID0gX3N0b3BPbkVycm9yO1xuICAgIHRoaXMuX2xvZ2dlciA9IG5ldyBMb2dnZXIoXCJDaGVja1Nlc3Npb25JRnJhbWVcIik7XG4gICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICAgIHRoaXMuX3Nlc3Npb25fc3RhdGUgPSBudWxsO1xuICAgIHRoaXMuX21lc3NhZ2UgPSAoZSkgPT4ge1xuICAgICAgaWYgKGUub3JpZ2luID09PSB0aGlzLl9mcmFtZV9vcmlnaW4gJiYgZS5zb3VyY2UgPT09IHRoaXMuX2ZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgICAgaWYgKGUuZGF0YSA9PT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgdGhpcy5fbG9nZ2VyLmVycm9yKFwiZXJyb3IgbWVzc2FnZSBmcm9tIGNoZWNrIHNlc3Npb24gb3AgaWZyYW1lXCIpO1xuICAgICAgICAgIGlmICh0aGlzLl9zdG9wT25FcnJvcikge1xuICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGUuZGF0YSA9PT0gXCJjaGFuZ2VkXCIpIHtcbiAgICAgICAgICB0aGlzLl9sb2dnZXIuZGVidWcoXCJjaGFuZ2VkIG1lc3NhZ2UgZnJvbSBjaGVjayBzZXNzaW9uIG9wIGlmcmFtZVwiKTtcbiAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICB2b2lkIHRoaXMuX2NhbGxiYWNrKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fbG9nZ2VyLmRlYnVnKGUuZGF0YSArIFwiIG1lc3NhZ2UgZnJvbSBjaGVjayBzZXNzaW9uIG9wIGlmcmFtZVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIHRoaXMuX2ZyYW1lX29yaWdpbiA9IHBhcnNlZFVybC5vcmlnaW47XG4gICAgdGhpcy5fZnJhbWUgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcbiAgICB0aGlzLl9mcmFtZS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICB0aGlzLl9mcmFtZS5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcbiAgICB0aGlzLl9mcmFtZS5zdHlsZS5sZWZ0ID0gXCItMTAwMHB4XCI7XG4gICAgdGhpcy5fZnJhbWUuc3R5bGUudG9wID0gXCIwXCI7XG4gICAgdGhpcy5fZnJhbWUud2lkdGggPSBcIjBcIjtcbiAgICB0aGlzLl9mcmFtZS5oZWlnaHQgPSBcIjBcIjtcbiAgICB0aGlzLl9mcmFtZS5zcmMgPSBwYXJzZWRVcmwuaHJlZjtcbiAgfVxuICBsb2FkKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgdGhpcy5fZnJhbWUub25sb2FkID0gKCkgPT4ge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9O1xuICAgICAgd2luZG93LmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fZnJhbWUpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuX21lc3NhZ2UsIGZhbHNlKTtcbiAgICB9KTtcbiAgfVxuICBzdGFydChzZXNzaW9uX3N0YXRlKSB7XG4gICAgaWYgKHRoaXMuX3Nlc3Npb25fc3RhdGUgPT09IHNlc3Npb25fc3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fbG9nZ2VyLmNyZWF0ZShcInN0YXJ0XCIpO1xuICAgIHRoaXMuc3RvcCgpO1xuICAgIHRoaXMuX3Nlc3Npb25fc3RhdGUgPSBzZXNzaW9uX3N0YXRlO1xuICAgIGNvbnN0IHNlbmQgPSAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuX2ZyYW1lLmNvbnRlbnRXaW5kb3cgfHwgIXRoaXMuX3Nlc3Npb25fc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fZnJhbWUuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZSh0aGlzLl9jbGllbnRfaWQgKyBcIiBcIiArIHRoaXMuX3Nlc3Npb25fc3RhdGUsIHRoaXMuX2ZyYW1lX29yaWdpbik7XG4gICAgfTtcbiAgICBzZW5kKCk7XG4gICAgdGhpcy5fdGltZXIgPSBzZXRJbnRlcnZhbChzZW5kLCB0aGlzLl9pbnRlcnZhbEluU2Vjb25kcyAqIDFlMyk7XG4gIH1cbiAgc3RvcCgpIHtcbiAgICB0aGlzLl9sb2dnZXIuY3JlYXRlKFwic3RvcFwiKTtcbiAgICB0aGlzLl9zZXNzaW9uX3N0YXRlID0gbnVsbDtcbiAgICBpZiAodGhpcy5fdGltZXIpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fdGltZXIpO1xuICAgICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICAgIH1cbiAgfVxufTtcblxuLy8gc3JjL0luTWVtb3J5V2ViU3RvcmFnZS50c1xudmFyIEluTWVtb3J5V2ViU3RvcmFnZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fbG9nZ2VyID0gbmV3IExvZ2dlcihcIkluTWVtb3J5V2ViU3RvcmFnZVwiKTtcbiAgICB0aGlzLl9kYXRhID0ge307XG4gIH1cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5fbG9nZ2VyLmNyZWF0ZShcImNsZWFyXCIpO1xuICAgIHRoaXMuX2RhdGEgPSB7fTtcbiAgfVxuICBnZXRJdGVtKGtleSkge1xuICAgIHRoaXMuX2xvZ2dlci5jcmVhdGUoYGdldEl0ZW0oJyR7a2V5fScpYCk7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGFba2V5XTtcbiAgfVxuICBzZXRJdGVtKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLl9sb2dnZXIuY3JlYXRlKGBzZXRJdGVtKCcke2tleX0nKWApO1xuICAgIHRoaXMuX2RhdGFba2V5XSA9IHZhbHVlO1xuICB9XG4gIHJlbW92ZUl0ZW0oa2V5KSB7XG4gICAgdGhpcy5fbG9nZ2VyLmNyZWF0ZShgcmVtb3ZlSXRlbSgnJHtrZXl9JylgKTtcbiAgICBkZWxldGUgdGhpcy5fZGF0YVtrZXldO1xuICB9XG4gIGdldCBsZW5ndGgoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMuX2RhdGEpLmxlbmd0aDtcbiAgfVxuICBrZXkoaW5kZXgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5fZGF0YSlbaW5kZXhdO1xuICB9XG59O1xuXG4vLyBzcmMvZXJyb3JzL0Vycm9yRFBvUE5vbmNlLnRzXG52YXIgRXJyb3JEUG9QTm9uY2UgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3Iobm9uY2UsIG1lc3NhZ2UpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAvKiogTWFya2VyIHRvIGRldGVjdCBjbGFzczogXCJFcnJvckRQb1BOb25jZVwiICovXG4gICAgdGhpcy5uYW1lID0gXCJFcnJvckRQb1BOb25jZVwiO1xuICAgIHRoaXMubm9uY2UgPSBub25jZTtcbiAgfVxufTtcblxuLy8gc3JjL0pzb25TZXJ2aWNlLnRzXG52YXIgSnNvblNlcnZpY2UgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGFkZGl0aW9uYWxDb250ZW50VHlwZXMgPSBbXSwgX2p3dEhhbmRsZXIgPSBudWxsLCBfZXh0cmFIZWFkZXJzID0ge30pIHtcbiAgICB0aGlzLl9qd3RIYW5kbGVyID0gX2p3dEhhbmRsZXI7XG4gICAgdGhpcy5fZXh0cmFIZWFkZXJzID0gX2V4dHJhSGVhZGVycztcbiAgICB0aGlzLl9sb2dnZXIgPSBuZXcgTG9nZ2VyKFwiSnNvblNlcnZpY2VcIik7XG4gICAgdGhpcy5fY29udGVudFR5cGVzID0gW107XG4gICAgdGhpcy5fY29udGVudFR5cGVzLnB1c2goLi4uYWRkaXRpb25hbENvbnRlbnRUeXBlcywgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgIGlmIChfand0SGFuZGxlcikge1xuICAgICAgdGhpcy5fY29udGVudFR5cGVzLnB1c2goXCJhcHBsaWNhdGlvbi9qd3RcIik7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZldGNoV2l0aFRpbWVvdXQoaW5wdXQsIGluaXQgPSB7fSkge1xuICAgIGNvbnN0IHsgdGltZW91dEluU2Vjb25kcywgLi4uaW5pdEZldGNoIH0gPSBpbml0O1xuICAgIGlmICghdGltZW91dEluU2Vjb25kcykge1xuICAgICAgcmV0dXJuIGF3YWl0IGZldGNoKGlucHV0LCBpbml0RmV0Y2gpO1xuICAgIH1cbiAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGNvbnN0IHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4gY29udHJvbGxlci5hYm9ydCgpLCB0aW1lb3V0SW5TZWNvbmRzICogMWUzKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChpbnB1dCwge1xuICAgICAgICAuLi5pbml0LFxuICAgICAgICBzaWduYWw6IGNvbnRyb2xsZXIuc2lnbmFsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBET01FeGNlcHRpb24gJiYgZXJyLm5hbWUgPT09IFwiQWJvcnRFcnJvclwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvclRpbWVvdXQoXCJOZXR3b3JrIHRpbWVkIG91dFwiKTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGdldEpzb24odXJsLCB7XG4gICAgdG9rZW4sXG4gICAgY3JlZGVudGlhbHMsXG4gICAgdGltZW91dEluU2Vjb25kc1xuICB9ID0ge30pIHtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcImdldEpzb25cIik7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgIFwiQWNjZXB0XCI6IHRoaXMuX2NvbnRlbnRUeXBlcy5qb2luKFwiLCBcIilcbiAgICB9O1xuICAgIGlmICh0b2tlbikge1xuICAgICAgbG9nZ2VyMi5kZWJ1ZyhcInRva2VuIHBhc3NlZCwgc2V0dGluZyBBdXRob3JpemF0aW9uIGhlYWRlclwiKTtcbiAgICAgIGhlYWRlcnNbXCJBdXRob3JpemF0aW9uXCJdID0gXCJCZWFyZXIgXCIgKyB0b2tlbjtcbiAgICB9XG4gICAgdGhpcy5fYXBwZW5kRXh0cmFIZWFkZXJzKGhlYWRlcnMpO1xuICAgIGxldCByZXNwb25zZTtcbiAgICB0cnkge1xuICAgICAgbG9nZ2VyMi5kZWJ1ZyhcInVybDpcIiwgdXJsKTtcbiAgICAgIHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaFdpdGhUaW1lb3V0KHVybCwgeyBtZXRob2Q6IFwiR0VUXCIsIGhlYWRlcnMsIHRpbWVvdXRJblNlY29uZHMsIGNyZWRlbnRpYWxzIH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nZ2VyMi5lcnJvcihcIk5ldHdvcmsgRXJyb3JcIik7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIGxvZ2dlcjIuZGVidWcoXCJIVFRQIHJlc3BvbnNlIHJlY2VpdmVkLCBzdGF0dXNcIiwgcmVzcG9uc2Uuc3RhdHVzKTtcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpO1xuICAgIGlmIChjb250ZW50VHlwZSAmJiAhdGhpcy5fY29udGVudFR5cGVzLmZpbmQoKGl0ZW0pID0+IGNvbnRlbnRUeXBlLnN0YXJ0c1dpdGgoaXRlbSkpKSB7XG4gICAgICBsb2dnZXIyLnRocm93KG5ldyBFcnJvcihgSW52YWxpZCByZXNwb25zZSBDb250ZW50LVR5cGU6ICR7Y29udGVudFR5cGUgIT0gbnVsbCA/IGNvbnRlbnRUeXBlIDogXCJ1bmRlZmluZWRcIn0sIGZyb20gVVJMOiAke3VybH1gKSk7XG4gICAgfVxuICAgIGlmIChyZXNwb25zZS5vayAmJiB0aGlzLl9qd3RIYW5kbGVyICYmIChjb250ZW50VHlwZSA9PSBudWxsID8gdm9pZCAwIDogY29udGVudFR5cGUuc3RhcnRzV2l0aChcImFwcGxpY2F0aW9uL2p3dFwiKSkpIHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9qd3RIYW5kbGVyKGF3YWl0IHJlc3BvbnNlLnRleHQoKSk7XG4gICAgfVxuICAgIGxldCBqc29uO1xuICAgIHRyeSB7XG4gICAgICBqc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nZ2VyMi5lcnJvcihcIkVycm9yIHBhcnNpbmcgSlNPTiByZXNwb25zZVwiLCBlcnIpO1xuICAgICAgaWYgKHJlc3BvbnNlLm9rKSB0aHJvdyBlcnI7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cmVzcG9uc2Uuc3RhdHVzVGV4dH0gKCR7cmVzcG9uc2Uuc3RhdHVzfSlgKTtcbiAgICB9XG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgbG9nZ2VyMi5lcnJvcihcIkVycm9yIGZyb20gc2VydmVyOlwiLCBqc29uKTtcbiAgICAgIGlmIChqc29uLmVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvclJlc3BvbnNlKGpzb24pO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3Jlc3BvbnNlLnN0YXR1c1RleHR9ICgke3Jlc3BvbnNlLnN0YXR1c30pOiAke0pTT04uc3RyaW5naWZ5KGpzb24pfWApO1xuICAgIH1cbiAgICByZXR1cm4ganNvbjtcbiAgfVxuICBhc3luYyBwb3N0Rm9ybSh1cmwsIHtcbiAgICBib2R5LFxuICAgIGJhc2ljQXV0aCxcbiAgICB0aW1lb3V0SW5TZWNvbmRzLFxuICAgIGluaXRDcmVkZW50aWFscyxcbiAgICBleHRyYUhlYWRlcnNcbiAgfSkge1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwicG9zdEZvcm1cIik7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgIFwiQWNjZXB0XCI6IHRoaXMuX2NvbnRlbnRUeXBlcy5qb2luKFwiLCBcIiksXG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLFxuICAgICAgLi4uZXh0cmFIZWFkZXJzXG4gICAgfTtcbiAgICBpZiAoYmFzaWNBdXRoICE9PSB2b2lkIDApIHtcbiAgICAgIGhlYWRlcnNbXCJBdXRob3JpemF0aW9uXCJdID0gXCJCYXNpYyBcIiArIGJhc2ljQXV0aDtcbiAgICB9XG4gICAgdGhpcy5fYXBwZW5kRXh0cmFIZWFkZXJzKGhlYWRlcnMpO1xuICAgIGxldCByZXNwb25zZTtcbiAgICB0cnkge1xuICAgICAgbG9nZ2VyMi5kZWJ1ZyhcInVybDpcIiwgdXJsKTtcbiAgICAgIHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaFdpdGhUaW1lb3V0KHVybCwgeyBtZXRob2Q6IFwiUE9TVFwiLCBoZWFkZXJzLCBib2R5LCB0aW1lb3V0SW5TZWNvbmRzLCBjcmVkZW50aWFsczogaW5pdENyZWRlbnRpYWxzIH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nZ2VyMi5lcnJvcihcIk5ldHdvcmsgZXJyb3JcIik7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIGxvZ2dlcjIuZGVidWcoXCJIVFRQIHJlc3BvbnNlIHJlY2VpdmVkLCBzdGF0dXNcIiwgcmVzcG9uc2Uuc3RhdHVzKTtcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpO1xuICAgIGlmIChjb250ZW50VHlwZSAmJiAhdGhpcy5fY29udGVudFR5cGVzLmZpbmQoKGl0ZW0pID0+IGNvbnRlbnRUeXBlLnN0YXJ0c1dpdGgoaXRlbSkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcmVzcG9uc2UgQ29udGVudC1UeXBlOiAke2NvbnRlbnRUeXBlICE9IG51bGwgPyBjb250ZW50VHlwZSA6IFwidW5kZWZpbmVkXCJ9LCBmcm9tIFVSTDogJHt1cmx9YCk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlVGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICBsZXQganNvbiA9IHt9O1xuICAgIGlmIChyZXNwb25zZVRleHQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGpzb24gPSBKU09OLnBhcnNlKHJlc3BvbnNlVGV4dCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgbG9nZ2VyMi5lcnJvcihcIkVycm9yIHBhcnNpbmcgSlNPTiByZXNwb25zZVwiLCBlcnIpO1xuICAgICAgICBpZiAocmVzcG9uc2Uub2spIHRocm93IGVycjtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3Jlc3BvbnNlLnN0YXR1c1RleHR9ICgke3Jlc3BvbnNlLnN0YXR1c30pYCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIGxvZ2dlcjIuZXJyb3IoXCJFcnJvciBmcm9tIHNlcnZlcjpcIiwganNvbik7XG4gICAgICBpZiAocmVzcG9uc2UuaGVhZGVycy5oYXMoXCJkcG9wLW5vbmNlXCIpKSB7XG4gICAgICAgIGNvbnN0IG5vbmNlID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJkcG9wLW5vbmNlXCIpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3JEUG9QTm9uY2Uobm9uY2UsIGAke0pTT04uc3RyaW5naWZ5KGpzb24pfWApO1xuICAgICAgfVxuICAgICAgaWYgKGpzb24uZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yUmVzcG9uc2UoanNvbiwgYm9keSk7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cmVzcG9uc2Uuc3RhdHVzVGV4dH0gKCR7cmVzcG9uc2Uuc3RhdHVzfSk6ICR7SlNPTi5zdHJpbmdpZnkoanNvbil9YCk7XG4gICAgfVxuICAgIHJldHVybiBqc29uO1xuICB9XG4gIF9hcHBlbmRFeHRyYUhlYWRlcnMoaGVhZGVycykge1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwiYXBwZW5kRXh0cmFIZWFkZXJzXCIpO1xuICAgIGNvbnN0IGN1c3RvbUtleXMgPSBPYmplY3Qua2V5cyh0aGlzLl9leHRyYUhlYWRlcnMpO1xuICAgIGNvbnN0IHByb3RlY3RlZEhlYWRlcnMgPSBbXG4gICAgICBcImFjY2VwdFwiLFxuICAgICAgXCJjb250ZW50LXR5cGVcIlxuICAgIF07XG4gICAgY29uc3QgcHJldmVudE92ZXJyaWRlID0gW1xuICAgICAgXCJhdXRob3JpemF0aW9uXCJcbiAgICBdO1xuICAgIGlmIChjdXN0b21LZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdXN0b21LZXlzLmZvckVhY2goKGhlYWRlck5hbWUpID0+IHtcbiAgICAgIGlmIChwcm90ZWN0ZWRIZWFkZXJzLmluY2x1ZGVzKGhlYWRlck5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKSkpIHtcbiAgICAgICAgbG9nZ2VyMi53YXJuKFwiUHJvdGVjdGVkIGhlYWRlciBjb3VsZCBub3QgYmUgc2V0XCIsIGhlYWRlck5hbWUsIHByb3RlY3RlZEhlYWRlcnMpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocHJldmVudE92ZXJyaWRlLmluY2x1ZGVzKGhlYWRlck5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKSkgJiYgT2JqZWN0LmtleXMoaGVhZGVycykuaW5jbHVkZXMoaGVhZGVyTmFtZSkpIHtcbiAgICAgICAgbG9nZ2VyMi53YXJuKFwiSGVhZGVyIGNvdWxkIG5vdCBiZSBvdmVycmlkZGVuXCIsIGhlYWRlck5hbWUsIHByZXZlbnRPdmVycmlkZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbnRlbnQgPSB0eXBlb2YgdGhpcy5fZXh0cmFIZWFkZXJzW2hlYWRlck5hbWVdID09PSBcImZ1bmN0aW9uXCIgPyB0aGlzLl9leHRyYUhlYWRlcnNbaGVhZGVyTmFtZV0oKSA6IHRoaXMuX2V4dHJhSGVhZGVyc1toZWFkZXJOYW1lXTtcbiAgICAgIGlmIChjb250ZW50ICYmIGNvbnRlbnQgIT09IFwiXCIpIHtcbiAgICAgICAgaGVhZGVyc1toZWFkZXJOYW1lXSA9IGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5cbi8vIHNyYy9NZXRhZGF0YVNlcnZpY2UudHNcbnZhciBNZXRhZGF0YVNlcnZpY2UgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKF9zZXR0aW5ncykge1xuICAgIHRoaXMuX3NldHRpbmdzID0gX3NldHRpbmdzO1xuICAgIHRoaXMuX2xvZ2dlciA9IG5ldyBMb2dnZXIoXCJNZXRhZGF0YVNlcnZpY2VcIik7XG4gICAgdGhpcy5fc2lnbmluZ0tleXMgPSBudWxsO1xuICAgIHRoaXMuX21ldGFkYXRhID0gbnVsbDtcbiAgICB0aGlzLl9tZXRhZGF0YVVybCA9IHRoaXMuX3NldHRpbmdzLm1ldGFkYXRhVXJsO1xuICAgIHRoaXMuX2pzb25TZXJ2aWNlID0gbmV3IEpzb25TZXJ2aWNlKFxuICAgICAgW1wiYXBwbGljYXRpb24vandrLXNldCtqc29uXCJdLFxuICAgICAgbnVsbCxcbiAgICAgIHRoaXMuX3NldHRpbmdzLmV4dHJhSGVhZGVyc1xuICAgICk7XG4gICAgaWYgKHRoaXMuX3NldHRpbmdzLnNpZ25pbmdLZXlzKSB7XG4gICAgICB0aGlzLl9sb2dnZXIuZGVidWcoXCJ1c2luZyBzaWduaW5nS2V5cyBmcm9tIHNldHRpbmdzXCIpO1xuICAgICAgdGhpcy5fc2lnbmluZ0tleXMgPSB0aGlzLl9zZXR0aW5ncy5zaWduaW5nS2V5cztcbiAgICB9XG4gICAgaWYgKHRoaXMuX3NldHRpbmdzLm1ldGFkYXRhKSB7XG4gICAgICB0aGlzLl9sb2dnZXIuZGVidWcoXCJ1c2luZyBtZXRhZGF0YSBmcm9tIHNldHRpbmdzXCIpO1xuICAgICAgdGhpcy5fbWV0YWRhdGEgPSB0aGlzLl9zZXR0aW5ncy5tZXRhZGF0YTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3NldHRpbmdzLmZldGNoUmVxdWVzdENyZWRlbnRpYWxzKSB7XG4gICAgICB0aGlzLl9sb2dnZXIuZGVidWcoXCJ1c2luZyBmZXRjaFJlcXVlc3RDcmVkZW50aWFscyBmcm9tIHNldHRpbmdzXCIpO1xuICAgICAgdGhpcy5fZmV0Y2hSZXF1ZXN0Q3JlZGVudGlhbHMgPSB0aGlzLl9zZXR0aW5ncy5mZXRjaFJlcXVlc3RDcmVkZW50aWFscztcbiAgICB9XG4gIH1cbiAgcmVzZXRTaWduaW5nS2V5cygpIHtcbiAgICB0aGlzLl9zaWduaW5nS2V5cyA9IG51bGw7XG4gIH1cbiAgYXN5bmMgZ2V0TWV0YWRhdGEoKSB7XG4gICAgY29uc3QgbG9nZ2VyMiA9IHRoaXMuX2xvZ2dlci5jcmVhdGUoXCJnZXRNZXRhZGF0YVwiKTtcbiAgICBpZiAodGhpcy5fbWV0YWRhdGEpIHtcbiAgICAgIGxvZ2dlcjIuZGVidWcoXCJ1c2luZyBjYWNoZWQgdmFsdWVzXCIpO1xuICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX21ldGFkYXRhVXJsKSB7XG4gICAgICBsb2dnZXIyLnRocm93KG5ldyBFcnJvcihcIk5vIGF1dGhvcml0eSBvciBtZXRhZGF0YVVybCBjb25maWd1cmVkIG9uIHNldHRpbmdzXCIpKTtcbiAgICAgIHRocm93IG51bGw7XG4gICAgfVxuICAgIGxvZ2dlcjIuZGVidWcoXCJnZXR0aW5nIG1ldGFkYXRhIGZyb21cIiwgdGhpcy5fbWV0YWRhdGFVcmwpO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gYXdhaXQgdGhpcy5fanNvblNlcnZpY2UuZ2V0SnNvbih0aGlzLl9tZXRhZGF0YVVybCwgeyBjcmVkZW50aWFsczogdGhpcy5fZmV0Y2hSZXF1ZXN0Q3JlZGVudGlhbHMsIHRpbWVvdXRJblNlY29uZHM6IHRoaXMuX3NldHRpbmdzLnJlcXVlc3RUaW1lb3V0SW5TZWNvbmRzIH0pO1xuICAgIGxvZ2dlcjIuZGVidWcoXCJtZXJnaW5nIHJlbW90ZSBKU09OIHdpdGggc2VlZCBtZXRhZGF0YVwiKTtcbiAgICB0aGlzLl9tZXRhZGF0YSA9IE9iamVjdC5hc3NpZ24oe30sIG1ldGFkYXRhLCB0aGlzLl9zZXR0aW5ncy5tZXRhZGF0YVNlZWQpO1xuICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YTtcbiAgfVxuICBnZXRJc3N1ZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJpc3N1ZXJcIik7XG4gIH1cbiAgZ2V0QXV0aG9yaXphdGlvbkVuZHBvaW50KCkge1xuICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwiYXV0aG9yaXphdGlvbl9lbmRwb2ludFwiKTtcbiAgfVxuICBnZXRVc2VySW5mb0VuZHBvaW50KCkge1xuICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwidXNlcmluZm9fZW5kcG9pbnRcIik7XG4gIH1cbiAgZ2V0VG9rZW5FbmRwb2ludChvcHRpb25hbCA9IHRydWUpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0TWV0YWRhdGFQcm9wZXJ0eShcInRva2VuX2VuZHBvaW50XCIsIG9wdGlvbmFsKTtcbiAgfVxuICBnZXRDaGVja1Nlc3Npb25JZnJhbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJjaGVja19zZXNzaW9uX2lmcmFtZVwiLCB0cnVlKTtcbiAgfVxuICBnZXRFbmRTZXNzaW9uRW5kcG9pbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJlbmRfc2Vzc2lvbl9lbmRwb2ludFwiLCB0cnVlKTtcbiAgfVxuICBnZXRSZXZvY2F0aW9uRW5kcG9pbnQob3B0aW9uYWwgPSB0cnVlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJyZXZvY2F0aW9uX2VuZHBvaW50XCIsIG9wdGlvbmFsKTtcbiAgfVxuICBnZXRLZXlzRW5kcG9pbnQob3B0aW9uYWwgPSB0cnVlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJqd2tzX3VyaVwiLCBvcHRpb25hbCk7XG4gIH1cbiAgYXN5bmMgX2dldE1ldGFkYXRhUHJvcGVydHkobmFtZSwgb3B0aW9uYWwgPSBmYWxzZSkge1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKGBfZ2V0TWV0YWRhdGFQcm9wZXJ0eSgnJHtuYW1lfScpYCk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSBhd2FpdCB0aGlzLmdldE1ldGFkYXRhKCk7XG4gICAgbG9nZ2VyMi5kZWJ1ZyhcInJlc29sdmVkXCIpO1xuICAgIGlmIChtZXRhZGF0YVtuYW1lXSA9PT0gdm9pZCAwKSB7XG4gICAgICBpZiAob3B0aW9uYWwgPT09IHRydWUpIHtcbiAgICAgICAgbG9nZ2VyMi53YXJuKFwiTWV0YWRhdGEgZG9lcyBub3QgY29udGFpbiBvcHRpb25hbCBwcm9wZXJ0eVwiKTtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGxvZ2dlcjIudGhyb3cobmV3IEVycm9yKFwiTWV0YWRhdGEgZG9lcyBub3QgY29udGFpbiBwcm9wZXJ0eSBcIiArIG5hbWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIG1ldGFkYXRhW25hbWVdO1xuICB9XG4gIGFzeW5jIGdldFNpZ25pbmdLZXlzKCkge1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwiZ2V0U2lnbmluZ0tleXNcIik7XG4gICAgaWYgKHRoaXMuX3NpZ25pbmdLZXlzKSB7XG4gICAgICBsb2dnZXIyLmRlYnVnKFwicmV0dXJuaW5nIHNpZ25pbmdLZXlzIGZyb20gY2FjaGVcIik7XG4gICAgICByZXR1cm4gdGhpcy5fc2lnbmluZ0tleXM7XG4gICAgfVxuICAgIGNvbnN0IGp3a3NfdXJpID0gYXdhaXQgdGhpcy5nZXRLZXlzRW5kcG9pbnQoZmFsc2UpO1xuICAgIGxvZ2dlcjIuZGVidWcoXCJnb3Qgandrc191cmlcIiwgandrc191cmkpO1xuICAgIGNvbnN0IGtleVNldCA9IGF3YWl0IHRoaXMuX2pzb25TZXJ2aWNlLmdldEpzb24oandrc191cmksIHsgdGltZW91dEluU2Vjb25kczogdGhpcy5fc2V0dGluZ3MucmVxdWVzdFRpbWVvdXRJblNlY29uZHMgfSk7XG4gICAgbG9nZ2VyMi5kZWJ1ZyhcImdvdCBrZXkgc2V0XCIsIGtleVNldCk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGtleVNldC5rZXlzKSkge1xuICAgICAgbG9nZ2VyMi50aHJvdyhuZXcgRXJyb3IoXCJNaXNzaW5nIGtleXMgb24ga2V5c2V0XCIpKTtcbiAgICAgIHRocm93IG51bGw7XG4gICAgfVxuICAgIHRoaXMuX3NpZ25pbmdLZXlzID0ga2V5U2V0LmtleXM7XG4gICAgcmV0dXJuIHRoaXMuX3NpZ25pbmdLZXlzO1xuICB9XG59O1xuXG4vLyBzcmMvV2ViU3RvcmFnZVN0YXRlU3RvcmUudHNcbnZhciBXZWJTdG9yYWdlU3RhdGVTdG9yZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIHByZWZpeCA9IFwib2lkYy5cIixcbiAgICBzdG9yZSA9IGxvY2FsU3RvcmFnZVxuICB9ID0ge30pIHtcbiAgICB0aGlzLl9sb2dnZXIgPSBuZXcgTG9nZ2VyKFwiV2ViU3RvcmFnZVN0YXRlU3RvcmVcIik7XG4gICAgdGhpcy5fc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLl9wcmVmaXggPSBwcmVmaXg7XG4gIH1cbiAgYXN5bmMgc2V0KGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLl9sb2dnZXIuY3JlYXRlKGBzZXQoJyR7a2V5fScpYCk7XG4gICAga2V5ID0gdGhpcy5fcHJlZml4ICsga2V5O1xuICAgIGF3YWl0IHRoaXMuX3N0b3JlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gIH1cbiAgYXN5bmMgZ2V0KGtleSkge1xuICAgIHRoaXMuX2xvZ2dlci5jcmVhdGUoYGdldCgnJHtrZXl9JylgKTtcbiAgICBrZXkgPSB0aGlzLl9wcmVmaXggKyBrZXk7XG4gICAgY29uc3QgaXRlbSA9IGF3YWl0IHRoaXMuX3N0b3JlLmdldEl0ZW0oa2V5KTtcbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuICBhc3luYyByZW1vdmUoa2V5KSB7XG4gICAgdGhpcy5fbG9nZ2VyLmNyZWF0ZShgcmVtb3ZlKCcke2tleX0nKWApO1xuICAgIGtleSA9IHRoaXMuX3ByZWZpeCArIGtleTtcbiAgICBjb25zdCBpdGVtID0gYXdhaXQgdGhpcy5fc3RvcmUuZ2V0SXRlbShrZXkpO1xuICAgIGF3YWl0IHRoaXMuX3N0b3JlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuICBhc3luYyBnZXRBbGxLZXlzKCkge1xuICAgIHRoaXMuX2xvZ2dlci5jcmVhdGUoXCJnZXRBbGxLZXlzXCIpO1xuICAgIGNvbnN0IGxlbiA9IGF3YWl0IHRoaXMuX3N0b3JlLmxlbmd0aDtcbiAgICBjb25zdCBrZXlzID0gW107XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxlbjsgaW5kZXgrKykge1xuICAgICAgY29uc3Qga2V5ID0gYXdhaXQgdGhpcy5fc3RvcmUua2V5KGluZGV4KTtcbiAgICAgIGlmIChrZXkgJiYga2V5LmluZGV4T2YodGhpcy5fcHJlZml4KSA9PT0gMCkge1xuICAgICAgICBrZXlzLnB1c2goa2V5LnN1YnN0cih0aGlzLl9wcmVmaXgubGVuZ3RoKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xuICB9XG59O1xuXG4vLyBzcmMvT2lkY0NsaWVudFNldHRpbmdzLnRzXG52YXIgRGVmYXVsdFJlc3BvbnNlVHlwZSA9IFwiY29kZVwiO1xudmFyIERlZmF1bHRTY29wZSA9IFwib3BlbmlkXCI7XG52YXIgRGVmYXVsdENsaWVudEF1dGhlbnRpY2F0aW9uID0gXCJjbGllbnRfc2VjcmV0X3Bvc3RcIjtcbnZhciBEZWZhdWx0U3RhbGVTdGF0ZUFnZUluU2Vjb25kcyA9IDYwICogMTU7XG52YXIgT2lkY0NsaWVudFNldHRpbmdzU3RvcmUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICAvLyBtZXRhZGF0YSByZWxhdGVkXG4gICAgYXV0aG9yaXR5LFxuICAgIG1ldGFkYXRhVXJsLFxuICAgIG1ldGFkYXRhLFxuICAgIHNpZ25pbmdLZXlzLFxuICAgIG1ldGFkYXRhU2VlZCxcbiAgICAvLyBjbGllbnQgcmVsYXRlZFxuICAgIGNsaWVudF9pZCxcbiAgICBjbGllbnRfc2VjcmV0LFxuICAgIHJlc3BvbnNlX3R5cGUgPSBEZWZhdWx0UmVzcG9uc2VUeXBlLFxuICAgIHNjb3BlID0gRGVmYXVsdFNjb3BlLFxuICAgIHJlZGlyZWN0X3VyaSxcbiAgICBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmksXG4gICAgY2xpZW50X2F1dGhlbnRpY2F0aW9uID0gRGVmYXVsdENsaWVudEF1dGhlbnRpY2F0aW9uLFxuICAgIC8vIG9wdGlvbmFsIHByb3RvY29sXG4gICAgcHJvbXB0LFxuICAgIGRpc3BsYXksXG4gICAgbWF4X2FnZSxcbiAgICB1aV9sb2NhbGVzLFxuICAgIGFjcl92YWx1ZXMsXG4gICAgcmVzb3VyY2UsXG4gICAgcmVzcG9uc2VfbW9kZSxcbiAgICAvLyBiZWhhdmlvciBmbGFnc1xuICAgIGZpbHRlclByb3RvY29sQ2xhaW1zID0gdHJ1ZSxcbiAgICBsb2FkVXNlckluZm8gPSBmYWxzZSxcbiAgICByZXF1ZXN0VGltZW91dEluU2Vjb25kcyxcbiAgICBzdGFsZVN0YXRlQWdlSW5TZWNvbmRzID0gRGVmYXVsdFN0YWxlU3RhdGVBZ2VJblNlY29uZHMsXG4gICAgbWVyZ2VDbGFpbXNTdHJhdGVneSA9IHsgYXJyYXk6IFwicmVwbGFjZVwiIH0sXG4gICAgZGlzYWJsZVBLQ0UgPSBmYWxzZSxcbiAgICAvLyBvdGhlciBiZWhhdmlvclxuICAgIHN0YXRlU3RvcmUsXG4gICAgcmV2b2tlVG9rZW5BZGRpdGlvbmFsQ29udGVudFR5cGVzLFxuICAgIGZldGNoUmVxdWVzdENyZWRlbnRpYWxzLFxuICAgIHJlZnJlc2hUb2tlbkFsbG93ZWRTY29wZSxcbiAgICAvLyBleHRyYVxuICAgIGV4dHJhUXVlcnlQYXJhbXMgPSB7fSxcbiAgICBleHRyYVRva2VuUGFyYW1zID0ge30sXG4gICAgZXh0cmFIZWFkZXJzID0ge30sXG4gICAgZHBvcCxcbiAgICBvbWl0U2NvcGVXaGVuUmVxdWVzdGluZyA9IGZhbHNlXG4gIH0pIHtcbiAgICB2YXIgX2E7XG4gICAgdGhpcy5hdXRob3JpdHkgPSBhdXRob3JpdHk7XG4gICAgaWYgKG1ldGFkYXRhVXJsKSB7XG4gICAgICB0aGlzLm1ldGFkYXRhVXJsID0gbWV0YWRhdGFVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWV0YWRhdGFVcmwgPSBhdXRob3JpdHk7XG4gICAgICBpZiAoYXV0aG9yaXR5KSB7XG4gICAgICAgIGlmICghdGhpcy5tZXRhZGF0YVVybC5lbmRzV2l0aChcIi9cIikpIHtcbiAgICAgICAgICB0aGlzLm1ldGFkYXRhVXJsICs9IFwiL1wiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWV0YWRhdGFVcmwgKz0gXCIud2VsbC1rbm93bi9vcGVuaWQtY29uZmlndXJhdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm1ldGFkYXRhID0gbWV0YWRhdGE7XG4gICAgdGhpcy5tZXRhZGF0YVNlZWQgPSBtZXRhZGF0YVNlZWQ7XG4gICAgdGhpcy5zaWduaW5nS2V5cyA9IHNpZ25pbmdLZXlzO1xuICAgIHRoaXMuY2xpZW50X2lkID0gY2xpZW50X2lkO1xuICAgIHRoaXMuY2xpZW50X3NlY3JldCA9IGNsaWVudF9zZWNyZXQ7XG4gICAgdGhpcy5yZXNwb25zZV90eXBlID0gcmVzcG9uc2VfdHlwZTtcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgdGhpcy5yZWRpcmVjdF91cmkgPSByZWRpcmVjdF91cmk7XG4gICAgdGhpcy5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkgPSBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmk7XG4gICAgdGhpcy5jbGllbnRfYXV0aGVudGljYXRpb24gPSBjbGllbnRfYXV0aGVudGljYXRpb247XG4gICAgdGhpcy5wcm9tcHQgPSBwcm9tcHQ7XG4gICAgdGhpcy5kaXNwbGF5ID0gZGlzcGxheTtcbiAgICB0aGlzLm1heF9hZ2UgPSBtYXhfYWdlO1xuICAgIHRoaXMudWlfbG9jYWxlcyA9IHVpX2xvY2FsZXM7XG4gICAgdGhpcy5hY3JfdmFsdWVzID0gYWNyX3ZhbHVlcztcbiAgICB0aGlzLnJlc291cmNlID0gcmVzb3VyY2U7XG4gICAgdGhpcy5yZXNwb25zZV9tb2RlID0gcmVzcG9uc2VfbW9kZTtcbiAgICB0aGlzLmZpbHRlclByb3RvY29sQ2xhaW1zID0gZmlsdGVyUHJvdG9jb2xDbGFpbXMgIT0gbnVsbCA/IGZpbHRlclByb3RvY29sQ2xhaW1zIDogdHJ1ZTtcbiAgICB0aGlzLmxvYWRVc2VySW5mbyA9ICEhbG9hZFVzZXJJbmZvO1xuICAgIHRoaXMuc3RhbGVTdGF0ZUFnZUluU2Vjb25kcyA9IHN0YWxlU3RhdGVBZ2VJblNlY29uZHM7XG4gICAgdGhpcy5tZXJnZUNsYWltc1N0cmF0ZWd5ID0gbWVyZ2VDbGFpbXNTdHJhdGVneTtcbiAgICB0aGlzLm9taXRTY29wZVdoZW5SZXF1ZXN0aW5nID0gb21pdFNjb3BlV2hlblJlcXVlc3Rpbmc7XG4gICAgdGhpcy5kaXNhYmxlUEtDRSA9ICEhZGlzYWJsZVBLQ0U7XG4gICAgdGhpcy5yZXZva2VUb2tlbkFkZGl0aW9uYWxDb250ZW50VHlwZXMgPSByZXZva2VUb2tlbkFkZGl0aW9uYWxDb250ZW50VHlwZXM7XG4gICAgdGhpcy5mZXRjaFJlcXVlc3RDcmVkZW50aWFscyA9IGZldGNoUmVxdWVzdENyZWRlbnRpYWxzID8gZmV0Y2hSZXF1ZXN0Q3JlZGVudGlhbHMgOiBcInNhbWUtb3JpZ2luXCI7XG4gICAgdGhpcy5yZXF1ZXN0VGltZW91dEluU2Vjb25kcyA9IHJlcXVlc3RUaW1lb3V0SW5TZWNvbmRzO1xuICAgIGlmIChzdGF0ZVN0b3JlKSB7XG4gICAgICB0aGlzLnN0YXRlU3RvcmUgPSBzdGF0ZVN0b3JlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzdG9yZSA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cubG9jYWxTdG9yYWdlIDogbmV3IEluTWVtb3J5V2ViU3RvcmFnZSgpO1xuICAgICAgdGhpcy5zdGF0ZVN0b3JlID0gbmV3IFdlYlN0b3JhZ2VTdGF0ZVN0b3JlKHsgc3RvcmUgfSk7XG4gICAgfVxuICAgIHRoaXMucmVmcmVzaFRva2VuQWxsb3dlZFNjb3BlID0gcmVmcmVzaFRva2VuQWxsb3dlZFNjb3BlO1xuICAgIHRoaXMuZXh0cmFRdWVyeVBhcmFtcyA9IGV4dHJhUXVlcnlQYXJhbXM7XG4gICAgdGhpcy5leHRyYVRva2VuUGFyYW1zID0gZXh0cmFUb2tlblBhcmFtcztcbiAgICB0aGlzLmV4dHJhSGVhZGVycyA9IGV4dHJhSGVhZGVycztcbiAgICB0aGlzLmRwb3AgPSBkcG9wO1xuICAgIGlmICh0aGlzLmRwb3AgJiYgISgoX2EgPSB0aGlzLmRwb3ApID09IG51bGwgPyB2b2lkIDAgOiBfYS5zdG9yZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkEgRFBvUFN0b3JlIGlzIHJlcXVpcmVkIHdoZW4gZHBvcCBpcyBlbmFibGVkXCIpO1xuICAgIH1cbiAgfVxufTtcblxuLy8gc3JjL1VzZXJJbmZvU2VydmljZS50c1xudmFyIFVzZXJJbmZvU2VydmljZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3NldHRpbmdzLCBfbWV0YWRhdGFTZXJ2aWNlKSB7XG4gICAgdGhpcy5fc2V0dGluZ3MgPSBfc2V0dGluZ3M7XG4gICAgdGhpcy5fbWV0YWRhdGFTZXJ2aWNlID0gX21ldGFkYXRhU2VydmljZTtcbiAgICB0aGlzLl9sb2dnZXIgPSBuZXcgTG9nZ2VyKFwiVXNlckluZm9TZXJ2aWNlXCIpO1xuICAgIHRoaXMuX2dldENsYWltc0Zyb21Kd3QgPSBhc3luYyAocmVzcG9uc2VUZXh0KSA9PiB7XG4gICAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcIl9nZXRDbGFpbXNGcm9tSnd0XCIpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IEp3dFV0aWxzLmRlY29kZShyZXNwb25zZVRleHQpO1xuICAgICAgICBsb2dnZXIyLmRlYnVnKFwiSldUIGRlY29kaW5nIHN1Y2Nlc3NmdWxcIik7XG4gICAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxvZ2dlcjIuZXJyb3IoXCJFcnJvciBwYXJzaW5nIEpXVCByZXNwb25zZVwiKTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5fanNvblNlcnZpY2UgPSBuZXcgSnNvblNlcnZpY2UoXG4gICAgICB2b2lkIDAsXG4gICAgICB0aGlzLl9nZXRDbGFpbXNGcm9tSnd0LFxuICAgICAgdGhpcy5fc2V0dGluZ3MuZXh0cmFIZWFkZXJzXG4gICAgKTtcbiAgfVxuICBhc3luYyBnZXRDbGFpbXModG9rZW4pIHtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcImdldENsYWltc1wiKTtcbiAgICBpZiAoIXRva2VuKSB7XG4gICAgICB0aGlzLl9sb2dnZXIudGhyb3cobmV3IEVycm9yKFwiTm8gdG9rZW4gcGFzc2VkXCIpKTtcbiAgICB9XG4gICAgY29uc3QgdXJsID0gYXdhaXQgdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldFVzZXJJbmZvRW5kcG9pbnQoKTtcbiAgICBsb2dnZXIyLmRlYnVnKFwiZ290IHVzZXJpbmZvIHVybFwiLCB1cmwpO1xuICAgIGNvbnN0IGNsYWltcyA9IGF3YWl0IHRoaXMuX2pzb25TZXJ2aWNlLmdldEpzb24odXJsLCB7XG4gICAgICB0b2tlbixcbiAgICAgIGNyZWRlbnRpYWxzOiB0aGlzLl9zZXR0aW5ncy5mZXRjaFJlcXVlc3RDcmVkZW50aWFscyxcbiAgICAgIHRpbWVvdXRJblNlY29uZHM6IHRoaXMuX3NldHRpbmdzLnJlcXVlc3RUaW1lb3V0SW5TZWNvbmRzXG4gICAgfSk7XG4gICAgbG9nZ2VyMi5kZWJ1ZyhcImdvdCBjbGFpbXNcIiwgY2xhaW1zKTtcbiAgICByZXR1cm4gY2xhaW1zO1xuICB9XG59O1xuXG4vLyBzcmMvVG9rZW5DbGllbnQudHNcbnZhciBUb2tlbkNsaWVudCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3NldHRpbmdzLCBfbWV0YWRhdGFTZXJ2aWNlKSB7XG4gICAgdGhpcy5fc2V0dGluZ3MgPSBfc2V0dGluZ3M7XG4gICAgdGhpcy5fbWV0YWRhdGFTZXJ2aWNlID0gX21ldGFkYXRhU2VydmljZTtcbiAgICB0aGlzLl9sb2dnZXIgPSBuZXcgTG9nZ2VyKFwiVG9rZW5DbGllbnRcIik7XG4gICAgdGhpcy5fanNvblNlcnZpY2UgPSBuZXcgSnNvblNlcnZpY2UoXG4gICAgICB0aGlzLl9zZXR0aW5ncy5yZXZva2VUb2tlbkFkZGl0aW9uYWxDb250ZW50VHlwZXMsXG4gICAgICBudWxsLFxuICAgICAgdGhpcy5fc2V0dGluZ3MuZXh0cmFIZWFkZXJzXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogRXhjaGFuZ2UgY29kZS5cbiAgICpcbiAgICogQHNlZSBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjNjc0OSNzZWN0aW9uLTQuMS4zXG4gICAqL1xuICBhc3luYyBleGNoYW5nZUNvZGUoe1xuICAgIGdyYW50X3R5cGUgPSBcImF1dGhvcml6YXRpb25fY29kZVwiLFxuICAgIHJlZGlyZWN0X3VyaSA9IHRoaXMuX3NldHRpbmdzLnJlZGlyZWN0X3VyaSxcbiAgICBjbGllbnRfaWQgPSB0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQsXG4gICAgY2xpZW50X3NlY3JldCA9IHRoaXMuX3NldHRpbmdzLmNsaWVudF9zZWNyZXQsXG4gICAgZXh0cmFIZWFkZXJzLFxuICAgIC4uLmFyZ3NcbiAgfSkge1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwiZXhjaGFuZ2VDb2RlXCIpO1xuICAgIGlmICghY2xpZW50X2lkKSB7XG4gICAgICBsb2dnZXIyLnRocm93KG5ldyBFcnJvcihcIkEgY2xpZW50X2lkIGlzIHJlcXVpcmVkXCIpKTtcbiAgICB9XG4gICAgaWYgKCFyZWRpcmVjdF91cmkpIHtcbiAgICAgIGxvZ2dlcjIudGhyb3cobmV3IEVycm9yKFwiQSByZWRpcmVjdF91cmkgaXMgcmVxdWlyZWRcIikpO1xuICAgIH1cbiAgICBpZiAoIWFyZ3MuY29kZSkge1xuICAgICAgbG9nZ2VyMi50aHJvdyhuZXcgRXJyb3IoXCJBIGNvZGUgaXMgcmVxdWlyZWRcIikpO1xuICAgIH1cbiAgICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHsgZ3JhbnRfdHlwZSwgcmVkaXJlY3RfdXJpIH0pO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGFyZ3MpKSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBwYXJhbXMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgYmFzaWNBdXRoO1xuICAgIHN3aXRjaCAodGhpcy5fc2V0dGluZ3MuY2xpZW50X2F1dGhlbnRpY2F0aW9uKSB7XG4gICAgICBjYXNlIFwiY2xpZW50X3NlY3JldF9iYXNpY1wiOlxuICAgICAgICBpZiAoY2xpZW50X3NlY3JldCA9PT0gdm9pZCAwIHx8IGNsaWVudF9zZWNyZXQgPT09IG51bGwpIHtcbiAgICAgICAgICBsb2dnZXIyLnRocm93KG5ldyBFcnJvcihcIkEgY2xpZW50X3NlY3JldCBpcyByZXF1aXJlZFwiKSk7XG4gICAgICAgICAgdGhyb3cgbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBiYXNpY0F1dGggPSBDcnlwdG9VdGlscy5nZW5lcmF0ZUJhc2ljQXV0aChjbGllbnRfaWQsIGNsaWVudF9zZWNyZXQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJjbGllbnRfc2VjcmV0X3Bvc3RcIjpcbiAgICAgICAgcGFyYW1zLmFwcGVuZChcImNsaWVudF9pZFwiLCBjbGllbnRfaWQpO1xuICAgICAgICBpZiAoY2xpZW50X3NlY3JldCkge1xuICAgICAgICAgIHBhcmFtcy5hcHBlbmQoXCJjbGllbnRfc2VjcmV0XCIsIGNsaWVudF9zZWNyZXQpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjb25zdCB1cmwgPSBhd2FpdCB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0VG9rZW5FbmRwb2ludChmYWxzZSk7XG4gICAgbG9nZ2VyMi5kZWJ1ZyhcImdvdCB0b2tlbiBlbmRwb2ludFwiKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuX2pzb25TZXJ2aWNlLnBvc3RGb3JtKHVybCwge1xuICAgICAgYm9keTogcGFyYW1zLFxuICAgICAgYmFzaWNBdXRoLFxuICAgICAgdGltZW91dEluU2Vjb25kczogdGhpcy5fc2V0dGluZ3MucmVxdWVzdFRpbWVvdXRJblNlY29uZHMsXG4gICAgICBpbml0Q3JlZGVudGlhbHM6IHRoaXMuX3NldHRpbmdzLmZldGNoUmVxdWVzdENyZWRlbnRpYWxzLFxuICAgICAgZXh0cmFIZWFkZXJzXG4gICAgfSk7XG4gICAgbG9nZ2VyMi5kZWJ1ZyhcImdvdCByZXNwb25zZVwiKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cbiAgLyoqXG4gICAqIEV4Y2hhbmdlIGNyZWRlbnRpYWxzLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM2NzQ5I3NlY3Rpb24tNC4zLjJcbiAgICovXG4gIGFzeW5jIGV4Y2hhbmdlQ3JlZGVudGlhbHMoe1xuICAgIGdyYW50X3R5cGUgPSBcInBhc3N3b3JkXCIsXG4gICAgY2xpZW50X2lkID0gdGhpcy5fc2V0dGluZ3MuY2xpZW50X2lkLFxuICAgIGNsaWVudF9zZWNyZXQgPSB0aGlzLl9zZXR0aW5ncy5jbGllbnRfc2VjcmV0LFxuICAgIHNjb3BlID0gdGhpcy5fc2V0dGluZ3Muc2NvcGUsXG4gICAgLi4uYXJnc1xuICB9KSB7XG4gICAgY29uc3QgbG9nZ2VyMiA9IHRoaXMuX2xvZ2dlci5jcmVhdGUoXCJleGNoYW5nZUNyZWRlbnRpYWxzXCIpO1xuICAgIGlmICghY2xpZW50X2lkKSB7XG4gICAgICBsb2dnZXIyLnRocm93KG5ldyBFcnJvcihcIkEgY2xpZW50X2lkIGlzIHJlcXVpcmVkXCIpKTtcbiAgICB9XG4gICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh7IGdyYW50X3R5cGUgfSk7XG4gICAgaWYgKCF0aGlzLl9zZXR0aW5ncy5vbWl0U2NvcGVXaGVuUmVxdWVzdGluZykge1xuICAgICAgcGFyYW1zLnNldChcInNjb3BlXCIsIHNjb3BlKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoYXJncykpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHBhcmFtcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBiYXNpY0F1dGg7XG4gICAgc3dpdGNoICh0aGlzLl9zZXR0aW5ncy5jbGllbnRfYXV0aGVudGljYXRpb24pIHtcbiAgICAgIGNhc2UgXCJjbGllbnRfc2VjcmV0X2Jhc2ljXCI6XG4gICAgICAgIGlmIChjbGllbnRfc2VjcmV0ID09PSB2b2lkIDAgfHwgY2xpZW50X3NlY3JldCA9PT0gbnVsbCkge1xuICAgICAgICAgIGxvZ2dlcjIudGhyb3cobmV3IEVycm9yKFwiQSBjbGllbnRfc2VjcmV0IGlzIHJlcXVpcmVkXCIpKTtcbiAgICAgICAgICB0aHJvdyBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGJhc2ljQXV0aCA9IENyeXB0b1V0aWxzLmdlbmVyYXRlQmFzaWNBdXRoKGNsaWVudF9pZCwgY2xpZW50X3NlY3JldCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImNsaWVudF9zZWNyZXRfcG9zdFwiOlxuICAgICAgICBwYXJhbXMuYXBwZW5kKFwiY2xpZW50X2lkXCIsIGNsaWVudF9pZCk7XG4gICAgICAgIGlmIChjbGllbnRfc2VjcmV0KSB7XG4gICAgICAgICAgcGFyYW1zLmFwcGVuZChcImNsaWVudF9zZWNyZXRcIiwgY2xpZW50X3NlY3JldCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNvbnN0IHVybCA9IGF3YWl0IHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRUb2tlbkVuZHBvaW50KGZhbHNlKTtcbiAgICBsb2dnZXIyLmRlYnVnKFwiZ290IHRva2VuIGVuZHBvaW50XCIpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5fanNvblNlcnZpY2UucG9zdEZvcm0odXJsLCB7IGJvZHk6IHBhcmFtcywgYmFzaWNBdXRoLCB0aW1lb3V0SW5TZWNvbmRzOiB0aGlzLl9zZXR0aW5ncy5yZXF1ZXN0VGltZW91dEluU2Vjb25kcywgaW5pdENyZWRlbnRpYWxzOiB0aGlzLl9zZXR0aW5ncy5mZXRjaFJlcXVlc3RDcmVkZW50aWFscyB9KTtcbiAgICBsb2dnZXIyLmRlYnVnKFwiZ290IHJlc3BvbnNlXCIpO1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuICAvKipcbiAgICogRXhjaGFuZ2UgYSByZWZyZXNoIHRva2VuLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM2NzQ5I3NlY3Rpb24tNlxuICAgKi9cbiAgYXN5bmMgZXhjaGFuZ2VSZWZyZXNoVG9rZW4oe1xuICAgIGdyYW50X3R5cGUgPSBcInJlZnJlc2hfdG9rZW5cIixcbiAgICBjbGllbnRfaWQgPSB0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQsXG4gICAgY2xpZW50X3NlY3JldCA9IHRoaXMuX3NldHRpbmdzLmNsaWVudF9zZWNyZXQsXG4gICAgdGltZW91dEluU2Vjb25kcyxcbiAgICBleHRyYUhlYWRlcnMsXG4gICAgLi4uYXJnc1xuICB9KSB7XG4gICAgY29uc3QgbG9nZ2VyMiA9IHRoaXMuX2xvZ2dlci5jcmVhdGUoXCJleGNoYW5nZVJlZnJlc2hUb2tlblwiKTtcbiAgICBpZiAoIWNsaWVudF9pZCkge1xuICAgICAgbG9nZ2VyMi50aHJvdyhuZXcgRXJyb3IoXCJBIGNsaWVudF9pZCBpcyByZXF1aXJlZFwiKSk7XG4gICAgfVxuICAgIGlmICghYXJncy5yZWZyZXNoX3Rva2VuKSB7XG4gICAgICBsb2dnZXIyLnRocm93KG5ldyBFcnJvcihcIkEgcmVmcmVzaF90b2tlbiBpcyByZXF1aXJlZFwiKSk7XG4gICAgfVxuICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoeyBncmFudF90eXBlIH0pO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGFyZ3MpKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaCgocGFyYW0pID0+IHBhcmFtcy5hcHBlbmQoa2V5LCBwYXJhbSkpO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHBhcmFtcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBiYXNpY0F1dGg7XG4gICAgc3dpdGNoICh0aGlzLl9zZXR0aW5ncy5jbGllbnRfYXV0aGVudGljYXRpb24pIHtcbiAgICAgIGNhc2UgXCJjbGllbnRfc2VjcmV0X2Jhc2ljXCI6XG4gICAgICAgIGlmIChjbGllbnRfc2VjcmV0ID09PSB2b2lkIDAgfHwgY2xpZW50X3NlY3JldCA9PT0gbnVsbCkge1xuICAgICAgICAgIGxvZ2dlcjIudGhyb3cobmV3IEVycm9yKFwiQSBjbGllbnRfc2VjcmV0IGlzIHJlcXVpcmVkXCIpKTtcbiAgICAgICAgICB0aHJvdyBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGJhc2ljQXV0aCA9IENyeXB0b1V0aWxzLmdlbmVyYXRlQmFzaWNBdXRoKGNsaWVudF9pZCwgY2xpZW50X3NlY3JldCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImNsaWVudF9zZWNyZXRfcG9zdFwiOlxuICAgICAgICBwYXJhbXMuYXBwZW5kKFwiY2xpZW50X2lkXCIsIGNsaWVudF9pZCk7XG4gICAgICAgIGlmIChjbGllbnRfc2VjcmV0KSB7XG4gICAgICAgICAgcGFyYW1zLmFwcGVuZChcImNsaWVudF9zZWNyZXRcIiwgY2xpZW50X3NlY3JldCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNvbnN0IHVybCA9IGF3YWl0IHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRUb2tlbkVuZHBvaW50KGZhbHNlKTtcbiAgICBsb2dnZXIyLmRlYnVnKFwiZ290IHRva2VuIGVuZHBvaW50XCIpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5fanNvblNlcnZpY2UucG9zdEZvcm0odXJsLCB7IGJvZHk6IHBhcmFtcywgYmFzaWNBdXRoLCB0aW1lb3V0SW5TZWNvbmRzLCBpbml0Q3JlZGVudGlhbHM6IHRoaXMuX3NldHRpbmdzLmZldGNoUmVxdWVzdENyZWRlbnRpYWxzLCBleHRyYUhlYWRlcnMgfSk7XG4gICAgbG9nZ2VyMi5kZWJ1ZyhcImdvdCByZXNwb25zZVwiKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cbiAgLyoqXG4gICAqIFJldm9rZSBhbiBhY2Nlc3Mgb3IgcmVmcmVzaCB0b2tlbi5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2RhdGF0cmFja2VyLmlldGYub3JnL2RvYy9odG1sL3JmYzcwMDkjc2VjdGlvbi0yLjFcbiAgICovXG4gIGFzeW5jIHJldm9rZShhcmdzKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwicmV2b2tlXCIpO1xuICAgIGlmICghYXJncy50b2tlbikge1xuICAgICAgbG9nZ2VyMi50aHJvdyhuZXcgRXJyb3IoXCJBIHRva2VuIGlzIHJlcXVpcmVkXCIpKTtcbiAgICB9XG4gICAgY29uc3QgdXJsID0gYXdhaXQgdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldFJldm9jYXRpb25FbmRwb2ludChmYWxzZSk7XG4gICAgbG9nZ2VyMi5kZWJ1ZyhgZ290IHJldm9jYXRpb24gZW5kcG9pbnQsIHJldm9raW5nICR7KF9hID0gYXJncy50b2tlbl90eXBlX2hpbnQpICE9IG51bGwgPyBfYSA6IFwiZGVmYXVsdCB0b2tlbiB0eXBlXCJ9YCk7XG4gICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGFyZ3MpKSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBwYXJhbXMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBwYXJhbXMuc2V0KFwiY2xpZW50X2lkXCIsIHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZCk7XG4gICAgaWYgKHRoaXMuX3NldHRpbmdzLmNsaWVudF9zZWNyZXQpIHtcbiAgICAgIHBhcmFtcy5zZXQoXCJjbGllbnRfc2VjcmV0XCIsIHRoaXMuX3NldHRpbmdzLmNsaWVudF9zZWNyZXQpO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLl9qc29uU2VydmljZS5wb3N0Rm9ybSh1cmwsIHsgYm9keTogcGFyYW1zLCB0aW1lb3V0SW5TZWNvbmRzOiB0aGlzLl9zZXR0aW5ncy5yZXF1ZXN0VGltZW91dEluU2Vjb25kcyB9KTtcbiAgICBsb2dnZXIyLmRlYnVnKFwiZ290IHJlc3BvbnNlXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvUmVzcG9uc2VWYWxpZGF0b3IudHNcbnZhciBSZXNwb25zZVZhbGlkYXRvciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3NldHRpbmdzLCBfbWV0YWRhdGFTZXJ2aWNlLCBfY2xhaW1zU2VydmljZSkge1xuICAgIHRoaXMuX3NldHRpbmdzID0gX3NldHRpbmdzO1xuICAgIHRoaXMuX21ldGFkYXRhU2VydmljZSA9IF9tZXRhZGF0YVNlcnZpY2U7XG4gICAgdGhpcy5fY2xhaW1zU2VydmljZSA9IF9jbGFpbXNTZXJ2aWNlO1xuICAgIHRoaXMuX2xvZ2dlciA9IG5ldyBMb2dnZXIoXCJSZXNwb25zZVZhbGlkYXRvclwiKTtcbiAgICB0aGlzLl91c2VySW5mb1NlcnZpY2UgPSBuZXcgVXNlckluZm9TZXJ2aWNlKHRoaXMuX3NldHRpbmdzLCB0aGlzLl9tZXRhZGF0YVNlcnZpY2UpO1xuICAgIHRoaXMuX3Rva2VuQ2xpZW50ID0gbmV3IFRva2VuQ2xpZW50KHRoaXMuX3NldHRpbmdzLCB0aGlzLl9tZXRhZGF0YVNlcnZpY2UpO1xuICB9XG4gIGFzeW5jIHZhbGlkYXRlU2lnbmluUmVzcG9uc2UocmVzcG9uc2UsIHN0YXRlLCBleHRyYUhlYWRlcnMpIHtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcInZhbGlkYXRlU2lnbmluUmVzcG9uc2VcIik7XG4gICAgdGhpcy5fcHJvY2Vzc1NpZ25pblN0YXRlKHJlc3BvbnNlLCBzdGF0ZSk7XG4gICAgbG9nZ2VyMi5kZWJ1ZyhcInN0YXRlIHByb2Nlc3NlZFwiKTtcbiAgICBhd2FpdCB0aGlzLl9wcm9jZXNzQ29kZShyZXNwb25zZSwgc3RhdGUsIGV4dHJhSGVhZGVycyk7XG4gICAgbG9nZ2VyMi5kZWJ1ZyhcImNvZGUgcHJvY2Vzc2VkXCIpO1xuICAgIGlmIChyZXNwb25zZS5pc09wZW5JZCkge1xuICAgICAgdGhpcy5fdmFsaWRhdGVJZFRva2VuQXR0cmlidXRlcyhyZXNwb25zZSk7XG4gICAgfVxuICAgIGxvZ2dlcjIuZGVidWcoXCJ0b2tlbnMgdmFsaWRhdGVkXCIpO1xuICAgIGF3YWl0IHRoaXMuX3Byb2Nlc3NDbGFpbXMocmVzcG9uc2UsIHN0YXRlID09IG51bGwgPyB2b2lkIDAgOiBzdGF0ZS5za2lwVXNlckluZm8sIHJlc3BvbnNlLmlzT3BlbklkKTtcbiAgICBsb2dnZXIyLmRlYnVnKFwiY2xhaW1zIHByb2Nlc3NlZFwiKTtcbiAgfVxuICBhc3luYyB2YWxpZGF0ZUNyZWRlbnRpYWxzUmVzcG9uc2UocmVzcG9uc2UsIHNraXBVc2VySW5mbykge1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwidmFsaWRhdGVDcmVkZW50aWFsc1Jlc3BvbnNlXCIpO1xuICAgIGlmIChyZXNwb25zZS5pc09wZW5JZCAmJiAhIXJlc3BvbnNlLmlkX3Rva2VuKSB7XG4gICAgICB0aGlzLl92YWxpZGF0ZUlkVG9rZW5BdHRyaWJ1dGVzKHJlc3BvbnNlKTtcbiAgICB9XG4gICAgbG9nZ2VyMi5kZWJ1ZyhcInRva2VucyB2YWxpZGF0ZWRcIik7XG4gICAgYXdhaXQgdGhpcy5fcHJvY2Vzc0NsYWltcyhyZXNwb25zZSwgc2tpcFVzZXJJbmZvLCByZXNwb25zZS5pc09wZW5JZCk7XG4gICAgbG9nZ2VyMi5kZWJ1ZyhcImNsYWltcyBwcm9jZXNzZWRcIik7XG4gIH1cbiAgYXN5bmMgdmFsaWRhdGVSZWZyZXNoUmVzcG9uc2UocmVzcG9uc2UsIHN0YXRlKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcInZhbGlkYXRlUmVmcmVzaFJlc3BvbnNlXCIpO1xuICAgIHJlc3BvbnNlLnVzZXJTdGF0ZSA9IHN0YXRlLmRhdGE7XG4gICAgKF9hID0gcmVzcG9uc2Uuc2Vzc2lvbl9zdGF0ZSkgIT0gbnVsbCA/IF9hIDogcmVzcG9uc2Uuc2Vzc2lvbl9zdGF0ZSA9IHN0YXRlLnNlc3Npb25fc3RhdGU7XG4gICAgKF9iID0gcmVzcG9uc2Uuc2NvcGUpICE9IG51bGwgPyBfYiA6IHJlc3BvbnNlLnNjb3BlID0gc3RhdGUuc2NvcGU7XG4gICAgaWYgKHJlc3BvbnNlLmlzT3BlbklkICYmICEhcmVzcG9uc2UuaWRfdG9rZW4pIHtcbiAgICAgIHRoaXMuX3ZhbGlkYXRlSWRUb2tlbkF0dHJpYnV0ZXMocmVzcG9uc2UsIHN0YXRlLmlkX3Rva2VuKTtcbiAgICAgIGxvZ2dlcjIuZGVidWcoXCJJRCBUb2tlbiB2YWxpZGF0ZWRcIik7XG4gICAgfVxuICAgIGlmICghcmVzcG9uc2UuaWRfdG9rZW4pIHtcbiAgICAgIHJlc3BvbnNlLmlkX3Rva2VuID0gc3RhdGUuaWRfdG9rZW47XG4gICAgICByZXNwb25zZS5wcm9maWxlID0gc3RhdGUucHJvZmlsZTtcbiAgICB9XG4gICAgY29uc3QgaGFzSWRUb2tlbiA9IHJlc3BvbnNlLmlzT3BlbklkICYmICEhcmVzcG9uc2UuaWRfdG9rZW47XG4gICAgYXdhaXQgdGhpcy5fcHJvY2Vzc0NsYWltcyhyZXNwb25zZSwgZmFsc2UsIGhhc0lkVG9rZW4pO1xuICAgIGxvZ2dlcjIuZGVidWcoXCJjbGFpbXMgcHJvY2Vzc2VkXCIpO1xuICB9XG4gIHZhbGlkYXRlU2lnbm91dFJlc3BvbnNlKHJlc3BvbnNlLCBzdGF0ZSkge1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwidmFsaWRhdGVTaWdub3V0UmVzcG9uc2VcIik7XG4gICAgaWYgKHN0YXRlLmlkICE9PSByZXNwb25zZS5zdGF0ZSkge1xuICAgICAgbG9nZ2VyMi50aHJvdyhuZXcgRXJyb3IoXCJTdGF0ZSBkb2VzIG5vdCBtYXRjaFwiKSk7XG4gICAgfVxuICAgIGxvZ2dlcjIuZGVidWcoXCJzdGF0ZSB2YWxpZGF0ZWRcIik7XG4gICAgcmVzcG9uc2UudXNlclN0YXRlID0gc3RhdGUuZGF0YTtcbiAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgIGxvZ2dlcjIud2FybihcIlJlc3BvbnNlIHdhcyBlcnJvclwiLCByZXNwb25zZS5lcnJvcik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JSZXNwb25zZShyZXNwb25zZSk7XG4gICAgfVxuICB9XG4gIF9wcm9jZXNzU2lnbmluU3RhdGUocmVzcG9uc2UsIHN0YXRlKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwiX3Byb2Nlc3NTaWduaW5TdGF0ZVwiKTtcbiAgICBpZiAoc3RhdGUuaWQgIT09IHJlc3BvbnNlLnN0YXRlKSB7XG4gICAgICBsb2dnZXIyLnRocm93KG5ldyBFcnJvcihcIlN0YXRlIGRvZXMgbm90IG1hdGNoXCIpKTtcbiAgICB9XG4gICAgaWYgKCFzdGF0ZS5jbGllbnRfaWQpIHtcbiAgICAgIGxvZ2dlcjIudGhyb3cobmV3IEVycm9yKFwiTm8gY2xpZW50X2lkIG9uIHN0YXRlXCIpKTtcbiAgICB9XG4gICAgaWYgKCFzdGF0ZS5hdXRob3JpdHkpIHtcbiAgICAgIGxvZ2dlcjIudGhyb3cobmV3IEVycm9yKFwiTm8gYXV0aG9yaXR5IG9uIHN0YXRlXCIpKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3NldHRpbmdzLmF1dGhvcml0eSAhPT0gc3RhdGUuYXV0aG9yaXR5KSB7XG4gICAgICBsb2dnZXIyLnRocm93KG5ldyBFcnJvcihcImF1dGhvcml0eSBtaXNtYXRjaCBvbiBzZXR0aW5ncyB2cy4gc2lnbmluIHN0YXRlXCIpKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZCAmJiB0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQgIT09IHN0YXRlLmNsaWVudF9pZCkge1xuICAgICAgbG9nZ2VyMi50aHJvdyhuZXcgRXJyb3IoXCJjbGllbnRfaWQgbWlzbWF0Y2ggb24gc2V0dGluZ3MgdnMuIHNpZ25pbiBzdGF0ZVwiKSk7XG4gICAgfVxuICAgIGxvZ2dlcjIuZGVidWcoXCJzdGF0ZSB2YWxpZGF0ZWRcIik7XG4gICAgcmVzcG9uc2UudXNlclN0YXRlID0gc3RhdGUuZGF0YTtcbiAgICByZXNwb25zZS51cmxfc3RhdGUgPSBzdGF0ZS51cmxfc3RhdGU7XG4gICAgKF9hID0gcmVzcG9uc2Uuc2NvcGUpICE9IG51bGwgPyBfYSA6IHJlc3BvbnNlLnNjb3BlID0gc3RhdGUuc2NvcGU7XG4gICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICBsb2dnZXIyLndhcm4oXCJSZXNwb25zZSB3YXMgZXJyb3JcIiwgcmVzcG9uc2UuZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgIH1cbiAgICBpZiAoc3RhdGUuY29kZV92ZXJpZmllciAmJiAhcmVzcG9uc2UuY29kZSkge1xuICAgICAgbG9nZ2VyMi50aHJvdyhuZXcgRXJyb3IoXCJFeHBlY3RlZCBjb2RlIGluIHJlc3BvbnNlXCIpKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgX3Byb2Nlc3NDbGFpbXMocmVzcG9uc2UsIHNraXBVc2VySW5mbyA9IGZhbHNlLCB2YWxpZGF0ZVN1YiA9IHRydWUpIHtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcIl9wcm9jZXNzQ2xhaW1zXCIpO1xuICAgIHJlc3BvbnNlLnByb2ZpbGUgPSB0aGlzLl9jbGFpbXNTZXJ2aWNlLmZpbHRlclByb3RvY29sQ2xhaW1zKHJlc3BvbnNlLnByb2ZpbGUpO1xuICAgIGlmIChza2lwVXNlckluZm8gfHwgIXRoaXMuX3NldHRpbmdzLmxvYWRVc2VySW5mbyB8fCAhcmVzcG9uc2UuYWNjZXNzX3Rva2VuKSB7XG4gICAgICBsb2dnZXIyLmRlYnVnKFwibm90IGxvYWRpbmcgdXNlciBpbmZvXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsb2dnZXIyLmRlYnVnKFwibG9hZGluZyB1c2VyIGluZm9cIik7XG4gICAgY29uc3QgY2xhaW1zID0gYXdhaXQgdGhpcy5fdXNlckluZm9TZXJ2aWNlLmdldENsYWltcyhyZXNwb25zZS5hY2Nlc3NfdG9rZW4pO1xuICAgIGxvZ2dlcjIuZGVidWcoXCJ1c2VyIGluZm8gY2xhaW1zIHJlY2VpdmVkIGZyb20gdXNlciBpbmZvIGVuZHBvaW50XCIpO1xuICAgIGlmICh2YWxpZGF0ZVN1YiAmJiBjbGFpbXMuc3ViICE9PSByZXNwb25zZS5wcm9maWxlLnN1Yikge1xuICAgICAgbG9nZ2VyMi50aHJvdyhuZXcgRXJyb3IoXCJzdWJqZWN0IGZyb20gVXNlckluZm8gcmVzcG9uc2UgZG9lcyBub3QgbWF0Y2ggc3ViamVjdCBpbiBJRCBUb2tlblwiKSk7XG4gICAgfVxuICAgIHJlc3BvbnNlLnByb2ZpbGUgPSB0aGlzLl9jbGFpbXNTZXJ2aWNlLm1lcmdlQ2xhaW1zKHJlc3BvbnNlLnByb2ZpbGUsIHRoaXMuX2NsYWltc1NlcnZpY2UuZmlsdGVyUHJvdG9jb2xDbGFpbXMoY2xhaW1zKSk7XG4gICAgbG9nZ2VyMi5kZWJ1ZyhcInVzZXIgaW5mbyBjbGFpbXMgcmVjZWl2ZWQsIHVwZGF0ZWQgcHJvZmlsZTpcIiwgcmVzcG9uc2UucHJvZmlsZSk7XG4gIH1cbiAgYXN5bmMgX3Byb2Nlc3NDb2RlKHJlc3BvbnNlLCBzdGF0ZSwgZXh0cmFIZWFkZXJzKSB7XG4gICAgY29uc3QgbG9nZ2VyMiA9IHRoaXMuX2xvZ2dlci5jcmVhdGUoXCJfcHJvY2Vzc0NvZGVcIik7XG4gICAgaWYgKHJlc3BvbnNlLmNvZGUpIHtcbiAgICAgIGxvZ2dlcjIuZGVidWcoXCJWYWxpZGF0aW5nIGNvZGVcIik7XG4gICAgICBjb25zdCB0b2tlblJlc3BvbnNlID0gYXdhaXQgdGhpcy5fdG9rZW5DbGllbnQuZXhjaGFuZ2VDb2RlKHtcbiAgICAgICAgY2xpZW50X2lkOiBzdGF0ZS5jbGllbnRfaWQsXG4gICAgICAgIGNsaWVudF9zZWNyZXQ6IHN0YXRlLmNsaWVudF9zZWNyZXQsXG4gICAgICAgIGNvZGU6IHJlc3BvbnNlLmNvZGUsXG4gICAgICAgIHJlZGlyZWN0X3VyaTogc3RhdGUucmVkaXJlY3RfdXJpLFxuICAgICAgICBjb2RlX3ZlcmlmaWVyOiBzdGF0ZS5jb2RlX3ZlcmlmaWVyLFxuICAgICAgICBleHRyYUhlYWRlcnMsXG4gICAgICAgIC4uLnN0YXRlLmV4dHJhVG9rZW5QYXJhbXNcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmFzc2lnbihyZXNwb25zZSwgdG9rZW5SZXNwb25zZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ2dlcjIuZGVidWcoXCJObyBjb2RlIHRvIHByb2Nlc3NcIik7XG4gICAgfVxuICB9XG4gIF92YWxpZGF0ZUlkVG9rZW5BdHRyaWJ1dGVzKHJlc3BvbnNlLCBleGlzdGluZ1Rva2VuKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwiX3ZhbGlkYXRlSWRUb2tlbkF0dHJpYnV0ZXNcIik7XG4gICAgbG9nZ2VyMi5kZWJ1ZyhcImRlY29kaW5nIElEIFRva2VuIEpXVFwiKTtcbiAgICBjb25zdCBpbmNvbWluZyA9IEp3dFV0aWxzLmRlY29kZSgoX2EgPSByZXNwb25zZS5pZF90b2tlbikgIT0gbnVsbCA/IF9hIDogXCJcIik7XG4gICAgaWYgKCFpbmNvbWluZy5zdWIpIHtcbiAgICAgIGxvZ2dlcjIudGhyb3cobmV3IEVycm9yKFwiSUQgVG9rZW4gaXMgbWlzc2luZyBhIHN1YmplY3QgY2xhaW1cIikpO1xuICAgIH1cbiAgICBpZiAoZXhpc3RpbmdUb2tlbikge1xuICAgICAgY29uc3QgZXhpc3RpbmcgPSBKd3RVdGlscy5kZWNvZGUoZXhpc3RpbmdUb2tlbik7XG4gICAgICBpZiAoaW5jb21pbmcuc3ViICE9PSBleGlzdGluZy5zdWIpIHtcbiAgICAgICAgbG9nZ2VyMi50aHJvdyhuZXcgRXJyb3IoXCJzdWIgaW4gaWRfdG9rZW4gZG9lcyBub3QgbWF0Y2ggY3VycmVudCBzdWJcIikpO1xuICAgICAgfVxuICAgICAgaWYgKGluY29taW5nLmF1dGhfdGltZSAmJiBpbmNvbWluZy5hdXRoX3RpbWUgIT09IGV4aXN0aW5nLmF1dGhfdGltZSkge1xuICAgICAgICBsb2dnZXIyLnRocm93KG5ldyBFcnJvcihcImF1dGhfdGltZSBpbiBpZF90b2tlbiBkb2VzIG5vdCBtYXRjaCBvcmlnaW5hbCBhdXRoX3RpbWVcIikpO1xuICAgICAgfVxuICAgICAgaWYgKGluY29taW5nLmF6cCAmJiBpbmNvbWluZy5henAgIT09IGV4aXN0aW5nLmF6cCkge1xuICAgICAgICBsb2dnZXIyLnRocm93KG5ldyBFcnJvcihcImF6cCBpbiBpZF90b2tlbiBkb2VzIG5vdCBtYXRjaCBvcmlnaW5hbCBhenBcIikpO1xuICAgICAgfVxuICAgICAgaWYgKCFpbmNvbWluZy5henAgJiYgZXhpc3RpbmcuYXpwKSB7XG4gICAgICAgIGxvZ2dlcjIudGhyb3cobmV3IEVycm9yKFwiYXpwIG5vdCBpbiBpZF90b2tlbiwgYnV0IHByZXNlbnQgaW4gb3JpZ2luYWwgaWRfdG9rZW5cIikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXNwb25zZS5wcm9maWxlID0gaW5jb21pbmc7XG4gIH1cbn07XG5cbi8vIHNyYy9TdGF0ZS50c1xudmFyIFN0YXRlID0gY2xhc3MgX1N0YXRlIHtcbiAgY29uc3RydWN0b3IoYXJncykge1xuICAgIHRoaXMuaWQgPSBhcmdzLmlkIHx8IENyeXB0b1V0aWxzLmdlbmVyYXRlVVVJRHY0KCk7XG4gICAgdGhpcy5kYXRhID0gYXJncy5kYXRhO1xuICAgIGlmIChhcmdzLmNyZWF0ZWQgJiYgYXJncy5jcmVhdGVkID4gMCkge1xuICAgICAgdGhpcy5jcmVhdGVkID0gYXJncy5jcmVhdGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNyZWF0ZWQgPSBUaW1lci5nZXRFcG9jaFRpbWUoKTtcbiAgICB9XG4gICAgdGhpcy5yZXF1ZXN0X3R5cGUgPSBhcmdzLnJlcXVlc3RfdHlwZTtcbiAgICB0aGlzLnVybF9zdGF0ZSA9IGFyZ3MudXJsX3N0YXRlO1xuICB9XG4gIHRvU3RvcmFnZVN0cmluZygpIHtcbiAgICBuZXcgTG9nZ2VyKFwiU3RhdGVcIikuY3JlYXRlKFwidG9TdG9yYWdlU3RyaW5nXCIpO1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBpZDogdGhpcy5pZCxcbiAgICAgIGRhdGE6IHRoaXMuZGF0YSxcbiAgICAgIGNyZWF0ZWQ6IHRoaXMuY3JlYXRlZCxcbiAgICAgIHJlcXVlc3RfdHlwZTogdGhpcy5yZXF1ZXN0X3R5cGUsXG4gICAgICB1cmxfc3RhdGU6IHRoaXMudXJsX3N0YXRlXG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIGZyb21TdG9yYWdlU3RyaW5nKHN0b3JhZ2VTdHJpbmcpIHtcbiAgICBMb2dnZXIuY3JlYXRlU3RhdGljKFwiU3RhdGVcIiwgXCJmcm9tU3RvcmFnZVN0cmluZ1wiKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBfU3RhdGUoSlNPTi5wYXJzZShzdG9yYWdlU3RyaW5nKSkpO1xuICB9XG4gIHN0YXRpYyBhc3luYyBjbGVhclN0YWxlU3RhdGUoc3RvcmFnZSwgYWdlKSB7XG4gICAgY29uc3QgbG9nZ2VyMiA9IExvZ2dlci5jcmVhdGVTdGF0aWMoXCJTdGF0ZVwiLCBcImNsZWFyU3RhbGVTdGF0ZVwiKTtcbiAgICBjb25zdCBjdXRvZmYgPSBUaW1lci5nZXRFcG9jaFRpbWUoKSAtIGFnZTtcbiAgICBjb25zdCBrZXlzID0gYXdhaXQgc3RvcmFnZS5nZXRBbGxLZXlzKCk7XG4gICAgbG9nZ2VyMi5kZWJ1ZyhcImdvdCBrZXlzXCIsIGtleXMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGNvbnN0IGl0ZW0gPSBhd2FpdCBzdG9yYWdlLmdldChrZXkpO1xuICAgICAgbGV0IHJlbW92ZSA9IGZhbHNlO1xuICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBzdGF0ZSA9IGF3YWl0IF9TdGF0ZS5mcm9tU3RvcmFnZVN0cmluZyhpdGVtKTtcbiAgICAgICAgICBsb2dnZXIyLmRlYnVnKFwiZ290IGl0ZW0gZnJvbSBrZXk6XCIsIGtleSwgc3RhdGUuY3JlYXRlZCk7XG4gICAgICAgICAgaWYgKHN0YXRlLmNyZWF0ZWQgPD0gY3V0b2ZmKSB7XG4gICAgICAgICAgICByZW1vdmUgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgbG9nZ2VyMi5lcnJvcihcIkVycm9yIHBhcnNpbmcgc3RhdGUgZm9yIGtleTpcIiwga2V5LCBlcnIpO1xuICAgICAgICAgIHJlbW92ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ2dlcjIuZGVidWcoXCJubyBpdGVtIGluIHN0b3JhZ2UgZm9yIGtleTpcIiwga2V5KTtcbiAgICAgICAgcmVtb3ZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChyZW1vdmUpIHtcbiAgICAgICAgbG9nZ2VyMi5kZWJ1ZyhcInJlbW92ZWQgaXRlbSBmb3Iga2V5OlwiLCBrZXkpO1xuICAgICAgICB2b2lkIHN0b3JhZ2UucmVtb3ZlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vLyBzcmMvU2lnbmluU3RhdGUudHNcbnZhciBTaWduaW5TdGF0ZSA9IGNsYXNzIF9TaWduaW5TdGF0ZSBleHRlbmRzIFN0YXRlIHtcbiAgY29uc3RydWN0b3IoYXJncykge1xuICAgIHN1cGVyKGFyZ3MpO1xuICAgIHRoaXMuY29kZV92ZXJpZmllciA9IGFyZ3MuY29kZV92ZXJpZmllcjtcbiAgICB0aGlzLmNvZGVfY2hhbGxlbmdlID0gYXJncy5jb2RlX2NoYWxsZW5nZTtcbiAgICB0aGlzLmF1dGhvcml0eSA9IGFyZ3MuYXV0aG9yaXR5O1xuICAgIHRoaXMuY2xpZW50X2lkID0gYXJncy5jbGllbnRfaWQ7XG4gICAgdGhpcy5yZWRpcmVjdF91cmkgPSBhcmdzLnJlZGlyZWN0X3VyaTtcbiAgICB0aGlzLnNjb3BlID0gYXJncy5zY29wZTtcbiAgICB0aGlzLmNsaWVudF9zZWNyZXQgPSBhcmdzLmNsaWVudF9zZWNyZXQ7XG4gICAgdGhpcy5leHRyYVRva2VuUGFyYW1zID0gYXJncy5leHRyYVRva2VuUGFyYW1zO1xuICAgIHRoaXMucmVzcG9uc2VfbW9kZSA9IGFyZ3MucmVzcG9uc2VfbW9kZTtcbiAgICB0aGlzLnNraXBVc2VySW5mbyA9IGFyZ3Muc2tpcFVzZXJJbmZvO1xuICB9XG4gIHN0YXRpYyBhc3luYyBjcmVhdGUoYXJncykge1xuICAgIGNvbnN0IGNvZGVfdmVyaWZpZXIgPSBhcmdzLmNvZGVfdmVyaWZpZXIgPT09IHRydWUgPyBDcnlwdG9VdGlscy5nZW5lcmF0ZUNvZGVWZXJpZmllcigpIDogYXJncy5jb2RlX3ZlcmlmaWVyIHx8IHZvaWQgMDtcbiAgICBjb25zdCBjb2RlX2NoYWxsZW5nZSA9IGNvZGVfdmVyaWZpZXIgPyBhd2FpdCBDcnlwdG9VdGlscy5nZW5lcmF0ZUNvZGVDaGFsbGVuZ2UoY29kZV92ZXJpZmllcikgOiB2b2lkIDA7XG4gICAgcmV0dXJuIG5ldyBfU2lnbmluU3RhdGUoe1xuICAgICAgLi4uYXJncyxcbiAgICAgIGNvZGVfdmVyaWZpZXIsXG4gICAgICBjb2RlX2NoYWxsZW5nZVxuICAgIH0pO1xuICB9XG4gIHRvU3RvcmFnZVN0cmluZygpIHtcbiAgICBuZXcgTG9nZ2VyKFwiU2lnbmluU3RhdGVcIikuY3JlYXRlKFwidG9TdG9yYWdlU3RyaW5nXCIpO1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBpZDogdGhpcy5pZCxcbiAgICAgIGRhdGE6IHRoaXMuZGF0YSxcbiAgICAgIGNyZWF0ZWQ6IHRoaXMuY3JlYXRlZCxcbiAgICAgIHJlcXVlc3RfdHlwZTogdGhpcy5yZXF1ZXN0X3R5cGUsXG4gICAgICB1cmxfc3RhdGU6IHRoaXMudXJsX3N0YXRlLFxuICAgICAgY29kZV92ZXJpZmllcjogdGhpcy5jb2RlX3ZlcmlmaWVyLFxuICAgICAgYXV0aG9yaXR5OiB0aGlzLmF1dGhvcml0eSxcbiAgICAgIGNsaWVudF9pZDogdGhpcy5jbGllbnRfaWQsXG4gICAgICByZWRpcmVjdF91cmk6IHRoaXMucmVkaXJlY3RfdXJpLFxuICAgICAgc2NvcGU6IHRoaXMuc2NvcGUsXG4gICAgICBjbGllbnRfc2VjcmV0OiB0aGlzLmNsaWVudF9zZWNyZXQsXG4gICAgICBleHRyYVRva2VuUGFyYW1zOiB0aGlzLmV4dHJhVG9rZW5QYXJhbXMsXG4gICAgICByZXNwb25zZV9tb2RlOiB0aGlzLnJlc3BvbnNlX21vZGUsXG4gICAgICBza2lwVXNlckluZm86IHRoaXMuc2tpcFVzZXJJbmZvXG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIGZyb21TdG9yYWdlU3RyaW5nKHN0b3JhZ2VTdHJpbmcpIHtcbiAgICBMb2dnZXIuY3JlYXRlU3RhdGljKFwiU2lnbmluU3RhdGVcIiwgXCJmcm9tU3RvcmFnZVN0cmluZ1wiKTtcbiAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShzdG9yYWdlU3RyaW5nKTtcbiAgICByZXR1cm4gX1NpZ25pblN0YXRlLmNyZWF0ZShkYXRhKTtcbiAgfVxufTtcblxuLy8gc3JjL1NpZ25pblJlcXVlc3QudHNcbnZhciBfU2lnbmluUmVxdWVzdCA9IGNsYXNzIF9TaWduaW5SZXF1ZXN0IHtcbiAgY29uc3RydWN0b3IoYXJncykge1xuICAgIHRoaXMudXJsID0gYXJncy51cmw7XG4gICAgdGhpcy5zdGF0ZSA9IGFyZ3Muc3RhdGU7XG4gIH1cbiAgc3RhdGljIGFzeW5jIGNyZWF0ZSh7XG4gICAgLy8gbWFuZGF0b3J5XG4gICAgdXJsLFxuICAgIGF1dGhvcml0eSxcbiAgICBjbGllbnRfaWQsXG4gICAgcmVkaXJlY3RfdXJpLFxuICAgIHJlc3BvbnNlX3R5cGUsXG4gICAgc2NvcGUsXG4gICAgLy8gb3B0aW9uYWxcbiAgICBzdGF0ZV9kYXRhLFxuICAgIHJlc3BvbnNlX21vZGUsXG4gICAgcmVxdWVzdF90eXBlLFxuICAgIGNsaWVudF9zZWNyZXQsXG4gICAgbm9uY2UsXG4gICAgdXJsX3N0YXRlLFxuICAgIHJlc291cmNlLFxuICAgIHNraXBVc2VySW5mbyxcbiAgICBleHRyYVF1ZXJ5UGFyYW1zLFxuICAgIGV4dHJhVG9rZW5QYXJhbXMsXG4gICAgZGlzYWJsZVBLQ0UsXG4gICAgZHBvcEprdCxcbiAgICBvbWl0U2NvcGVXaGVuUmVxdWVzdGluZyxcbiAgICAuLi5vcHRpb25hbFBhcmFtc1xuICB9KSB7XG4gICAgaWYgKCF1cmwpIHtcbiAgICAgIHRoaXMuX2xvZ2dlci5lcnJvcihcImNyZWF0ZTogTm8gdXJsIHBhc3NlZFwiKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInVybFwiKTtcbiAgICB9XG4gICAgaWYgKCFjbGllbnRfaWQpIHtcbiAgICAgIHRoaXMuX2xvZ2dlci5lcnJvcihcImNyZWF0ZTogTm8gY2xpZW50X2lkIHBhc3NlZFwiKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImNsaWVudF9pZFwiKTtcbiAgICB9XG4gICAgaWYgKCFyZWRpcmVjdF91cmkpIHtcbiAgICAgIHRoaXMuX2xvZ2dlci5lcnJvcihcImNyZWF0ZTogTm8gcmVkaXJlY3RfdXJpIHBhc3NlZFwiKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInJlZGlyZWN0X3VyaVwiKTtcbiAgICB9XG4gICAgaWYgKCFyZXNwb25zZV90eXBlKSB7XG4gICAgICB0aGlzLl9sb2dnZXIuZXJyb3IoXCJjcmVhdGU6IE5vIHJlc3BvbnNlX3R5cGUgcGFzc2VkXCIpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVzcG9uc2VfdHlwZVwiKTtcbiAgICB9XG4gICAgaWYgKCFzY29wZSkge1xuICAgICAgdGhpcy5fbG9nZ2VyLmVycm9yKFwiY3JlYXRlOiBObyBzY29wZSBwYXNzZWRcIik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzY29wZVwiKTtcbiAgICB9XG4gICAgaWYgKCFhdXRob3JpdHkpIHtcbiAgICAgIHRoaXMuX2xvZ2dlci5lcnJvcihcImNyZWF0ZTogTm8gYXV0aG9yaXR5IHBhc3NlZFwiKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImF1dGhvcml0eVwiKTtcbiAgICB9XG4gICAgY29uc3Qgc3RhdGUgPSBhd2FpdCBTaWduaW5TdGF0ZS5jcmVhdGUoe1xuICAgICAgZGF0YTogc3RhdGVfZGF0YSxcbiAgICAgIHJlcXVlc3RfdHlwZSxcbiAgICAgIHVybF9zdGF0ZSxcbiAgICAgIGNvZGVfdmVyaWZpZXI6ICFkaXNhYmxlUEtDRSxcbiAgICAgIGNsaWVudF9pZCxcbiAgICAgIGF1dGhvcml0eSxcbiAgICAgIHJlZGlyZWN0X3VyaSxcbiAgICAgIHJlc3BvbnNlX21vZGUsXG4gICAgICBjbGllbnRfc2VjcmV0LFxuICAgICAgc2NvcGUsXG4gICAgICBleHRyYVRva2VuUGFyYW1zLFxuICAgICAgc2tpcFVzZXJJbmZvXG4gICAgfSk7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIHBhcnNlZFVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwiY2xpZW50X2lkXCIsIGNsaWVudF9pZCk7XG4gICAgcGFyc2VkVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJyZWRpcmVjdF91cmlcIiwgcmVkaXJlY3RfdXJpKTtcbiAgICBwYXJzZWRVcmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcInJlc3BvbnNlX3R5cGVcIiwgcmVzcG9uc2VfdHlwZSk7XG4gICAgaWYgKCFvbWl0U2NvcGVXaGVuUmVxdWVzdGluZykge1xuICAgICAgcGFyc2VkVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJzY29wZVwiLCBzY29wZSk7XG4gICAgfVxuICAgIGlmIChub25jZSkge1xuICAgICAgcGFyc2VkVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJub25jZVwiLCBub25jZSk7XG4gICAgfVxuICAgIGlmIChkcG9wSmt0KSB7XG4gICAgICBwYXJzZWRVcmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcImRwb3Bfamt0XCIsIGRwb3BKa3QpO1xuICAgIH1cbiAgICBsZXQgc3RhdGVQYXJhbSA9IHN0YXRlLmlkO1xuICAgIGlmICh1cmxfc3RhdGUpIHtcbiAgICAgIHN0YXRlUGFyYW0gPSBgJHtzdGF0ZVBhcmFtfSR7VVJMX1NUQVRFX0RFTElNSVRFUn0ke3VybF9zdGF0ZX1gO1xuICAgIH1cbiAgICBwYXJzZWRVcmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcInN0YXRlXCIsIHN0YXRlUGFyYW0pO1xuICAgIGlmIChzdGF0ZS5jb2RlX2NoYWxsZW5nZSkge1xuICAgICAgcGFyc2VkVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJjb2RlX2NoYWxsZW5nZVwiLCBzdGF0ZS5jb2RlX2NoYWxsZW5nZSk7XG4gICAgICBwYXJzZWRVcmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcImNvZGVfY2hhbGxlbmdlX21ldGhvZFwiLCBcIlMyNTZcIik7XG4gICAgfVxuICAgIGlmIChyZXNvdXJjZSkge1xuICAgICAgY29uc3QgcmVzb3VyY2VzID0gQXJyYXkuaXNBcnJheShyZXNvdXJjZSkgPyByZXNvdXJjZSA6IFtyZXNvdXJjZV07XG4gICAgICByZXNvdXJjZXMuZm9yRWFjaCgocikgPT4gcGFyc2VkVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJyZXNvdXJjZVwiLCByKSk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHsgcmVzcG9uc2VfbW9kZSwgLi4ub3B0aW9uYWxQYXJhbXMsIC4uLmV4dHJhUXVlcnlQYXJhbXMgfSkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHBhcnNlZFVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgX1NpZ25pblJlcXVlc3Qoe1xuICAgICAgdXJsOiBwYXJzZWRVcmwuaHJlZixcbiAgICAgIHN0YXRlXG4gICAgfSk7XG4gIH1cbn07XG5fU2lnbmluUmVxdWVzdC5fbG9nZ2VyID0gbmV3IExvZ2dlcihcIlNpZ25pblJlcXVlc3RcIik7XG52YXIgU2lnbmluUmVxdWVzdCA9IF9TaWduaW5SZXF1ZXN0O1xuXG4vLyBzcmMvU2lnbmluUmVzcG9uc2UudHNcbnZhciBPaWRjU2NvcGUgPSBcIm9wZW5pZFwiO1xudmFyIFNpZ25pblJlc3BvbnNlID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAvKiogQHNlZSB7QGxpbmsgVXNlci5hY2Nlc3NfdG9rZW59ICovXG4gICAgdGhpcy5hY2Nlc3NfdG9rZW4gPSBcIlwiO1xuICAgIC8qKiBAc2VlIHtAbGluayBVc2VyLnRva2VuX3R5cGV9ICovXG4gICAgdGhpcy50b2tlbl90eXBlID0gXCJcIjtcbiAgICAvKiogQHNlZSB7QGxpbmsgVXNlci5wcm9maWxlfSAqL1xuICAgIHRoaXMucHJvZmlsZSA9IHt9O1xuICAgIHRoaXMuc3RhdGUgPSBwYXJhbXMuZ2V0KFwic3RhdGVcIik7XG4gICAgdGhpcy5zZXNzaW9uX3N0YXRlID0gcGFyYW1zLmdldChcInNlc3Npb25fc3RhdGVcIik7XG4gICAgaWYgKHRoaXMuc3RhdGUpIHtcbiAgICAgIGNvbnN0IHNwbGl0U3RhdGUgPSBkZWNvZGVVUklDb21wb25lbnQodGhpcy5zdGF0ZSkuc3BsaXQoVVJMX1NUQVRFX0RFTElNSVRFUik7XG4gICAgICB0aGlzLnN0YXRlID0gc3BsaXRTdGF0ZVswXTtcbiAgICAgIGlmIChzcGxpdFN0YXRlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhpcy51cmxfc3RhdGUgPSBzcGxpdFN0YXRlLnNsaWNlKDEpLmpvaW4oVVJMX1NUQVRFX0RFTElNSVRFUik7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZXJyb3IgPSBwYXJhbXMuZ2V0KFwiZXJyb3JcIik7XG4gICAgdGhpcy5lcnJvcl9kZXNjcmlwdGlvbiA9IHBhcmFtcy5nZXQoXCJlcnJvcl9kZXNjcmlwdGlvblwiKTtcbiAgICB0aGlzLmVycm9yX3VyaSA9IHBhcmFtcy5nZXQoXCJlcnJvcl91cmlcIik7XG4gICAgdGhpcy5jb2RlID0gcGFyYW1zLmdldChcImNvZGVcIik7XG4gIH1cbiAgZ2V0IGV4cGlyZXNfaW4oKSB7XG4gICAgaWYgKHRoaXMuZXhwaXJlc19hdCA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5leHBpcmVzX2F0IC0gVGltZXIuZ2V0RXBvY2hUaW1lKCk7XG4gIH1cbiAgc2V0IGV4cGlyZXNfaW4odmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG4gICAgaWYgKHZhbHVlICE9PSB2b2lkIDAgJiYgdmFsdWUgPj0gMCkge1xuICAgICAgdGhpcy5leHBpcmVzX2F0ID0gTWF0aC5mbG9vcih2YWx1ZSkgKyBUaW1lci5nZXRFcG9jaFRpbWUoKTtcbiAgICB9XG4gIH1cbiAgZ2V0IGlzT3BlbklkKCkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKChfYSA9IHRoaXMuc2NvcGUpID09IG51bGwgPyB2b2lkIDAgOiBfYS5zcGxpdChcIiBcIikuaW5jbHVkZXMoT2lkY1Njb3BlKSkgfHwgISF0aGlzLmlkX3Rva2VuO1xuICB9XG59O1xuXG4vLyBzcmMvU2lnbm91dFJlcXVlc3QudHNcbnZhciBTaWdub3V0UmVxdWVzdCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIHVybCxcbiAgICBzdGF0ZV9kYXRhLFxuICAgIGlkX3Rva2VuX2hpbnQsXG4gICAgcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpLFxuICAgIGV4dHJhUXVlcnlQYXJhbXMsXG4gICAgcmVxdWVzdF90eXBlLFxuICAgIGNsaWVudF9pZCxcbiAgICB1cmxfc3RhdGVcbiAgfSkge1xuICAgIHRoaXMuX2xvZ2dlciA9IG5ldyBMb2dnZXIoXCJTaWdub3V0UmVxdWVzdFwiKTtcbiAgICBpZiAoIXVybCkge1xuICAgICAgdGhpcy5fbG9nZ2VyLmVycm9yKFwiY3RvcjogTm8gdXJsIHBhc3NlZFwiKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInVybFwiKTtcbiAgICB9XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIGlmIChpZF90b2tlbl9oaW50KSB7XG4gICAgICBwYXJzZWRVcmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcImlkX3Rva2VuX2hpbnRcIiwgaWRfdG9rZW5faGludCk7XG4gICAgfVxuICAgIGlmIChjbGllbnRfaWQpIHtcbiAgICAgIHBhcnNlZFVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwiY2xpZW50X2lkXCIsIGNsaWVudF9pZCk7XG4gICAgfVxuICAgIGlmIChwb3N0X2xvZ291dF9yZWRpcmVjdF91cmkpIHtcbiAgICAgIHBhcnNlZFVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFwicG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpXCIsIHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSk7XG4gICAgICBpZiAoc3RhdGVfZGF0YSB8fCB1cmxfc3RhdGUpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IG5ldyBTdGF0ZSh7IGRhdGE6IHN0YXRlX2RhdGEsIHJlcXVlc3RfdHlwZSwgdXJsX3N0YXRlIH0pO1xuICAgICAgICBsZXQgc3RhdGVQYXJhbSA9IHRoaXMuc3RhdGUuaWQ7XG4gICAgICAgIGlmICh1cmxfc3RhdGUpIHtcbiAgICAgICAgICBzdGF0ZVBhcmFtID0gYCR7c3RhdGVQYXJhbX0ke1VSTF9TVEFURV9ERUxJTUlURVJ9JHt1cmxfc3RhdGV9YDtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWRVcmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcInN0YXRlXCIsIHN0YXRlUGFyYW0pO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh7IC4uLmV4dHJhUXVlcnlQYXJhbXMgfSkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHBhcnNlZFVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMudXJsID0gcGFyc2VkVXJsLmhyZWY7XG4gIH1cbn07XG5cbi8vIHNyYy9TaWdub3V0UmVzcG9uc2UudHNcbnZhciBTaWdub3V0UmVzcG9uc2UgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgIHRoaXMuc3RhdGUgPSBwYXJhbXMuZ2V0KFwic3RhdGVcIik7XG4gICAgaWYgKHRoaXMuc3RhdGUpIHtcbiAgICAgIGNvbnN0IHNwbGl0U3RhdGUgPSBkZWNvZGVVUklDb21wb25lbnQodGhpcy5zdGF0ZSkuc3BsaXQoVVJMX1NUQVRFX0RFTElNSVRFUik7XG4gICAgICB0aGlzLnN0YXRlID0gc3BsaXRTdGF0ZVswXTtcbiAgICAgIGlmIChzcGxpdFN0YXRlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhpcy51cmxfc3RhdGUgPSBzcGxpdFN0YXRlLnNsaWNlKDEpLmpvaW4oVVJMX1NUQVRFX0RFTElNSVRFUik7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZXJyb3IgPSBwYXJhbXMuZ2V0KFwiZXJyb3JcIik7XG4gICAgdGhpcy5lcnJvcl9kZXNjcmlwdGlvbiA9IHBhcmFtcy5nZXQoXCJlcnJvcl9kZXNjcmlwdGlvblwiKTtcbiAgICB0aGlzLmVycm9yX3VyaSA9IHBhcmFtcy5nZXQoXCJlcnJvcl91cmlcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9DbGFpbXNTZXJ2aWNlLnRzXG52YXIgRGVmYXVsdFByb3RvY29sQ2xhaW1zID0gW1xuICBcIm5iZlwiLFxuICBcImp0aVwiLFxuICBcImF1dGhfdGltZVwiLFxuICBcIm5vbmNlXCIsXG4gIFwiYWNyXCIsXG4gIFwiYW1yXCIsXG4gIFwiYXpwXCIsXG4gIFwiYXRfaGFzaFwiXG4gIC8vIGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI0NvZGVJRFRva2VuXG5dO1xudmFyIEludGVybmFsUmVxdWlyZWRQcm90b2NvbENsYWltcyA9IFtcInN1YlwiLCBcImlzc1wiLCBcImF1ZFwiLCBcImV4cFwiLCBcImlhdFwiXTtcbnZhciBDbGFpbXNTZXJ2aWNlID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihfc2V0dGluZ3MpIHtcbiAgICB0aGlzLl9zZXR0aW5ncyA9IF9zZXR0aW5ncztcbiAgICB0aGlzLl9sb2dnZXIgPSBuZXcgTG9nZ2VyKFwiQ2xhaW1zU2VydmljZVwiKTtcbiAgfVxuICBmaWx0ZXJQcm90b2NvbENsYWltcyhjbGFpbXMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7IC4uLmNsYWltcyB9O1xuICAgIGlmICh0aGlzLl9zZXR0aW5ncy5maWx0ZXJQcm90b2NvbENsYWltcykge1xuICAgICAgbGV0IHByb3RvY29sQ2xhaW1zO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fc2V0dGluZ3MuZmlsdGVyUHJvdG9jb2xDbGFpbXMpKSB7XG4gICAgICAgIHByb3RvY29sQ2xhaW1zID0gdGhpcy5fc2V0dGluZ3MuZmlsdGVyUHJvdG9jb2xDbGFpbXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm90b2NvbENsYWltcyA9IERlZmF1bHRQcm90b2NvbENsYWltcztcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgY2xhaW0gb2YgcHJvdG9jb2xDbGFpbXMpIHtcbiAgICAgICAgaWYgKCFJbnRlcm5hbFJlcXVpcmVkUHJvdG9jb2xDbGFpbXMuaW5jbHVkZXMoY2xhaW0pKSB7XG4gICAgICAgICAgZGVsZXRlIHJlc3VsdFtjbGFpbV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBtZXJnZUNsYWltcyhjbGFpbXMxLCBjbGFpbXMyKSB7XG4gICAgY29uc3QgcmVzdWx0ID0geyAuLi5jbGFpbXMxIH07XG4gICAgZm9yIChjb25zdCBbY2xhaW0sIHZhbHVlc10gb2YgT2JqZWN0LmVudHJpZXMoY2xhaW1zMikpIHtcbiAgICAgIGlmIChyZXN1bHRbY2xhaW1dICE9PSB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0W2NsYWltXSkgfHwgQXJyYXkuaXNBcnJheSh2YWx1ZXMpKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLm1lcmdlQ2xhaW1zU3RyYXRlZ3kuYXJyYXkgPT0gXCJyZXBsYWNlXCIpIHtcbiAgICAgICAgICAgIHJlc3VsdFtjbGFpbV0gPSB2YWx1ZXM7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlZFZhbHVlcyA9IEFycmF5LmlzQXJyYXkocmVzdWx0W2NsYWltXSkgPyByZXN1bHRbY2xhaW1dIDogW3Jlc3VsdFtjbGFpbV1dO1xuICAgICAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBBcnJheS5pc0FycmF5KHZhbHVlcykgPyB2YWx1ZXMgOiBbdmFsdWVzXSkge1xuICAgICAgICAgICAgICBpZiAoIW1lcmdlZFZhbHVlcy5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBtZXJnZWRWYWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdFtjbGFpbV0gPSBtZXJnZWRWYWx1ZXM7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiByZXN1bHRbY2xhaW1dID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICByZXN1bHRbY2xhaW1dID0gdGhpcy5tZXJnZUNsYWltcyhyZXN1bHRbY2xhaW1dLCB2YWx1ZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdFtjbGFpbV0gPSB2YWx1ZXM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcblxuLy8gc3JjL0RQb1BTdG9yZS50c1xudmFyIERQb1BTdGF0ZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3Ioa2V5cywgbm9uY2UpIHtcbiAgICB0aGlzLmtleXMgPSBrZXlzO1xuICAgIHRoaXMubm9uY2UgPSBub25jZTtcbiAgfVxufTtcblxuLy8gc3JjL09pZGNDbGllbnQudHNcbnZhciBPaWRjQ2xpZW50ID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihzZXR0aW5ncywgbWV0YWRhdGFTZXJ2aWNlKSB7XG4gICAgdGhpcy5fbG9nZ2VyID0gbmV3IExvZ2dlcihcIk9pZGNDbGllbnRcIik7XG4gICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzIGluc3RhbmNlb2YgT2lkY0NsaWVudFNldHRpbmdzU3RvcmUgPyBzZXR0aW5ncyA6IG5ldyBPaWRjQ2xpZW50U2V0dGluZ3NTdG9yZShzZXR0aW5ncyk7XG4gICAgdGhpcy5tZXRhZGF0YVNlcnZpY2UgPSBtZXRhZGF0YVNlcnZpY2UgIT0gbnVsbCA/IG1ldGFkYXRhU2VydmljZSA6IG5ldyBNZXRhZGF0YVNlcnZpY2UodGhpcy5zZXR0aW5ncyk7XG4gICAgdGhpcy5fY2xhaW1zU2VydmljZSA9IG5ldyBDbGFpbXNTZXJ2aWNlKHRoaXMuc2V0dGluZ3MpO1xuICAgIHRoaXMuX3ZhbGlkYXRvciA9IG5ldyBSZXNwb25zZVZhbGlkYXRvcih0aGlzLnNldHRpbmdzLCB0aGlzLm1ldGFkYXRhU2VydmljZSwgdGhpcy5fY2xhaW1zU2VydmljZSk7XG4gICAgdGhpcy5fdG9rZW5DbGllbnQgPSBuZXcgVG9rZW5DbGllbnQodGhpcy5zZXR0aW5ncywgdGhpcy5tZXRhZGF0YVNlcnZpY2UpO1xuICB9XG4gIGFzeW5jIGNyZWF0ZVNpZ25pblJlcXVlc3Qoe1xuICAgIHN0YXRlLFxuICAgIHJlcXVlc3QsXG4gICAgcmVxdWVzdF91cmksXG4gICAgcmVxdWVzdF90eXBlLFxuICAgIGlkX3Rva2VuX2hpbnQsXG4gICAgbG9naW5faGludCxcbiAgICBza2lwVXNlckluZm8sXG4gICAgbm9uY2UsXG4gICAgdXJsX3N0YXRlLFxuICAgIHJlc3BvbnNlX3R5cGUgPSB0aGlzLnNldHRpbmdzLnJlc3BvbnNlX3R5cGUsXG4gICAgc2NvcGUgPSB0aGlzLnNldHRpbmdzLnNjb3BlLFxuICAgIHJlZGlyZWN0X3VyaSA9IHRoaXMuc2V0dGluZ3MucmVkaXJlY3RfdXJpLFxuICAgIHByb21wdCA9IHRoaXMuc2V0dGluZ3MucHJvbXB0LFxuICAgIGRpc3BsYXkgPSB0aGlzLnNldHRpbmdzLmRpc3BsYXksXG4gICAgbWF4X2FnZSA9IHRoaXMuc2V0dGluZ3MubWF4X2FnZSxcbiAgICB1aV9sb2NhbGVzID0gdGhpcy5zZXR0aW5ncy51aV9sb2NhbGVzLFxuICAgIGFjcl92YWx1ZXMgPSB0aGlzLnNldHRpbmdzLmFjcl92YWx1ZXMsXG4gICAgcmVzb3VyY2UgPSB0aGlzLnNldHRpbmdzLnJlc291cmNlLFxuICAgIHJlc3BvbnNlX21vZGUgPSB0aGlzLnNldHRpbmdzLnJlc3BvbnNlX21vZGUsXG4gICAgZXh0cmFRdWVyeVBhcmFtcyA9IHRoaXMuc2V0dGluZ3MuZXh0cmFRdWVyeVBhcmFtcyxcbiAgICBleHRyYVRva2VuUGFyYW1zID0gdGhpcy5zZXR0aW5ncy5leHRyYVRva2VuUGFyYW1zLFxuICAgIGRwb3BKa3QsXG4gICAgb21pdFNjb3BlV2hlblJlcXVlc3RpbmcgPSB0aGlzLnNldHRpbmdzLm9taXRTY29wZVdoZW5SZXF1ZXN0aW5nXG4gIH0pIHtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcImNyZWF0ZVNpZ25pblJlcXVlc3RcIik7XG4gICAgaWYgKHJlc3BvbnNlX3R5cGUgIT09IFwiY29kZVwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPbmx5IHRoZSBBdXRob3JpemF0aW9uIENvZGUgZmxvdyAod2l0aCBQS0NFKSBpcyBzdXBwb3J0ZWRcIik7XG4gICAgfVxuICAgIGNvbnN0IHVybCA9IGF3YWl0IHRoaXMubWV0YWRhdGFTZXJ2aWNlLmdldEF1dGhvcml6YXRpb25FbmRwb2ludCgpO1xuICAgIGxvZ2dlcjIuZGVidWcoXCJSZWNlaXZlZCBhdXRob3JpemF0aW9uIGVuZHBvaW50XCIsIHVybCk7XG4gICAgY29uc3Qgc2lnbmluUmVxdWVzdCA9IGF3YWl0IFNpZ25pblJlcXVlc3QuY3JlYXRlKHtcbiAgICAgIHVybCxcbiAgICAgIGF1dGhvcml0eTogdGhpcy5zZXR0aW5ncy5hdXRob3JpdHksXG4gICAgICBjbGllbnRfaWQ6IHRoaXMuc2V0dGluZ3MuY2xpZW50X2lkLFxuICAgICAgcmVkaXJlY3RfdXJpLFxuICAgICAgcmVzcG9uc2VfdHlwZSxcbiAgICAgIHNjb3BlLFxuICAgICAgc3RhdGVfZGF0YTogc3RhdGUsXG4gICAgICB1cmxfc3RhdGUsXG4gICAgICBwcm9tcHQsXG4gICAgICBkaXNwbGF5LFxuICAgICAgbWF4X2FnZSxcbiAgICAgIHVpX2xvY2FsZXMsXG4gICAgICBpZF90b2tlbl9oaW50LFxuICAgICAgbG9naW5faGludCxcbiAgICAgIGFjcl92YWx1ZXMsXG4gICAgICBkcG9wSmt0LFxuICAgICAgcmVzb3VyY2UsXG4gICAgICByZXF1ZXN0LFxuICAgICAgcmVxdWVzdF91cmksXG4gICAgICBleHRyYVF1ZXJ5UGFyYW1zLFxuICAgICAgZXh0cmFUb2tlblBhcmFtcyxcbiAgICAgIHJlcXVlc3RfdHlwZSxcbiAgICAgIHJlc3BvbnNlX21vZGUsXG4gICAgICBjbGllbnRfc2VjcmV0OiB0aGlzLnNldHRpbmdzLmNsaWVudF9zZWNyZXQsXG4gICAgICBza2lwVXNlckluZm8sXG4gICAgICBub25jZSxcbiAgICAgIGRpc2FibGVQS0NFOiB0aGlzLnNldHRpbmdzLmRpc2FibGVQS0NFLFxuICAgICAgb21pdFNjb3BlV2hlblJlcXVlc3RpbmdcbiAgICB9KTtcbiAgICBhd2FpdCB0aGlzLmNsZWFyU3RhbGVTdGF0ZSgpO1xuICAgIGNvbnN0IHNpZ25pblN0YXRlID0gc2lnbmluUmVxdWVzdC5zdGF0ZTtcbiAgICBhd2FpdCB0aGlzLnNldHRpbmdzLnN0YXRlU3RvcmUuc2V0KHNpZ25pblN0YXRlLmlkLCBzaWduaW5TdGF0ZS50b1N0b3JhZ2VTdHJpbmcoKSk7XG4gICAgcmV0dXJuIHNpZ25pblJlcXVlc3Q7XG4gIH1cbiAgYXN5bmMgcmVhZFNpZ25pblJlc3BvbnNlU3RhdGUodXJsLCByZW1vdmVTdGF0ZSA9IGZhbHNlKSB7XG4gICAgY29uc3QgbG9nZ2VyMiA9IHRoaXMuX2xvZ2dlci5jcmVhdGUoXCJyZWFkU2lnbmluUmVzcG9uc2VTdGF0ZVwiKTtcbiAgICBjb25zdCByZXNwb25zZSA9IG5ldyBTaWduaW5SZXNwb25zZShVcmxVdGlscy5yZWFkUGFyYW1zKHVybCwgdGhpcy5zZXR0aW5ncy5yZXNwb25zZV9tb2RlKSk7XG4gICAgaWYgKCFyZXNwb25zZS5zdGF0ZSkge1xuICAgICAgbG9nZ2VyMi50aHJvdyhuZXcgRXJyb3IoXCJObyBzdGF0ZSBpbiByZXNwb25zZVwiKSk7XG4gICAgICB0aHJvdyBudWxsO1xuICAgIH1cbiAgICBjb25zdCBzdG9yZWRTdGF0ZVN0cmluZyA9IGF3YWl0IHRoaXMuc2V0dGluZ3Muc3RhdGVTdG9yZVtyZW1vdmVTdGF0ZSA/IFwicmVtb3ZlXCIgOiBcImdldFwiXShyZXNwb25zZS5zdGF0ZSk7XG4gICAgaWYgKCFzdG9yZWRTdGF0ZVN0cmluZykge1xuICAgICAgbG9nZ2VyMi50aHJvdyhuZXcgRXJyb3IoXCJObyBtYXRjaGluZyBzdGF0ZSBmb3VuZCBpbiBzdG9yYWdlXCIpKTtcbiAgICAgIHRocm93IG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHN0YXRlID0gYXdhaXQgU2lnbmluU3RhdGUuZnJvbVN0b3JhZ2VTdHJpbmcoc3RvcmVkU3RhdGVTdHJpbmcpO1xuICAgIHJldHVybiB7IHN0YXRlLCByZXNwb25zZSB9O1xuICB9XG4gIGFzeW5jIHByb2Nlc3NTaWduaW5SZXNwb25zZSh1cmwsIGV4dHJhSGVhZGVycywgcmVtb3ZlU3RhdGUgPSB0cnVlKSB7XG4gICAgY29uc3QgbG9nZ2VyMiA9IHRoaXMuX2xvZ2dlci5jcmVhdGUoXCJwcm9jZXNzU2lnbmluUmVzcG9uc2VcIik7XG4gICAgY29uc3QgeyBzdGF0ZSwgcmVzcG9uc2UgfSA9IGF3YWl0IHRoaXMucmVhZFNpZ25pblJlc3BvbnNlU3RhdGUodXJsLCByZW1vdmVTdGF0ZSk7XG4gICAgbG9nZ2VyMi5kZWJ1ZyhcInJlY2VpdmVkIHN0YXRlIGZyb20gc3RvcmFnZTsgdmFsaWRhdGluZyByZXNwb25zZVwiKTtcbiAgICBpZiAodGhpcy5zZXR0aW5ncy5kcG9wICYmIHRoaXMuc2V0dGluZ3MuZHBvcC5zdG9yZSkge1xuICAgICAgY29uc3QgZHBvcFByb29mID0gYXdhaXQgdGhpcy5nZXREcG9wUHJvb2YodGhpcy5zZXR0aW5ncy5kcG9wLnN0b3JlKTtcbiAgICAgIGV4dHJhSGVhZGVycyA9IHsgLi4uZXh0cmFIZWFkZXJzLCBcIkRQb1BcIjogZHBvcFByb29mIH07XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLl92YWxpZGF0b3IudmFsaWRhdGVTaWduaW5SZXNwb25zZShyZXNwb25zZSwgc3RhdGUsIGV4dHJhSGVhZGVycyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3JEUG9QTm9uY2UgJiYgdGhpcy5zZXR0aW5ncy5kcG9wKSB7XG4gICAgICAgIGNvbnN0IGRwb3BQcm9vZiA9IGF3YWl0IHRoaXMuZ2V0RHBvcFByb29mKHRoaXMuc2V0dGluZ3MuZHBvcC5zdG9yZSwgZXJyLm5vbmNlKTtcbiAgICAgICAgZXh0cmFIZWFkZXJzW1wiRFBvUFwiXSA9IGRwb3BQcm9vZjtcbiAgICAgICAgYXdhaXQgdGhpcy5fdmFsaWRhdG9yLnZhbGlkYXRlU2lnbmluUmVzcG9uc2UocmVzcG9uc2UsIHN0YXRlLCBleHRyYUhlYWRlcnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cbiAgYXN5bmMgZ2V0RHBvcFByb29mKGRwb3BTdG9yZSwgbm9uY2UpIHtcbiAgICBsZXQga2V5UGFpcjtcbiAgICBsZXQgZHBvcFN0YXRlO1xuICAgIGlmICghKGF3YWl0IGRwb3BTdG9yZS5nZXRBbGxLZXlzKCkpLmluY2x1ZGVzKHRoaXMuc2V0dGluZ3MuY2xpZW50X2lkKSkge1xuICAgICAga2V5UGFpciA9IGF3YWl0IENyeXB0b1V0aWxzLmdlbmVyYXRlRFBvUEtleXMoKTtcbiAgICAgIGRwb3BTdGF0ZSA9IG5ldyBEUG9QU3RhdGUoa2V5UGFpciwgbm9uY2UpO1xuICAgICAgYXdhaXQgZHBvcFN0b3JlLnNldCh0aGlzLnNldHRpbmdzLmNsaWVudF9pZCwgZHBvcFN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZHBvcFN0YXRlID0gYXdhaXQgZHBvcFN0b3JlLmdldCh0aGlzLnNldHRpbmdzLmNsaWVudF9pZCk7XG4gICAgICBpZiAoZHBvcFN0YXRlLm5vbmNlICE9PSBub25jZSAmJiBub25jZSkge1xuICAgICAgICBkcG9wU3RhdGUubm9uY2UgPSBub25jZTtcbiAgICAgICAgYXdhaXQgZHBvcFN0b3JlLnNldCh0aGlzLnNldHRpbmdzLmNsaWVudF9pZCwgZHBvcFN0YXRlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IENyeXB0b1V0aWxzLmdlbmVyYXRlRFBvUFByb29mKHtcbiAgICAgIHVybDogYXdhaXQgdGhpcy5tZXRhZGF0YVNlcnZpY2UuZ2V0VG9rZW5FbmRwb2ludChmYWxzZSksXG4gICAgICBodHRwTWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGtleVBhaXI6IGRwb3BTdGF0ZS5rZXlzLFxuICAgICAgbm9uY2U6IGRwb3BTdGF0ZS5ub25jZVxuICAgIH0pO1xuICB9XG4gIGFzeW5jIHByb2Nlc3NSZXNvdXJjZU93bmVyUGFzc3dvcmRDcmVkZW50aWFscyh7XG4gICAgdXNlcm5hbWUsXG4gICAgcGFzc3dvcmQsXG4gICAgc2tpcFVzZXJJbmZvID0gZmFsc2UsXG4gICAgZXh0cmFUb2tlblBhcmFtcyA9IHt9XG4gIH0pIHtcbiAgICBjb25zdCB0b2tlblJlc3BvbnNlID0gYXdhaXQgdGhpcy5fdG9rZW5DbGllbnQuZXhjaGFuZ2VDcmVkZW50aWFscyh7IHVzZXJuYW1lLCBwYXNzd29yZCwgLi4uZXh0cmFUb2tlblBhcmFtcyB9KTtcbiAgICBjb25zdCBzaWduaW5SZXNwb25zZSA9IG5ldyBTaWduaW5SZXNwb25zZShuZXcgVVJMU2VhcmNoUGFyYW1zKCkpO1xuICAgIE9iamVjdC5hc3NpZ24oc2lnbmluUmVzcG9uc2UsIHRva2VuUmVzcG9uc2UpO1xuICAgIGF3YWl0IHRoaXMuX3ZhbGlkYXRvci52YWxpZGF0ZUNyZWRlbnRpYWxzUmVzcG9uc2Uoc2lnbmluUmVzcG9uc2UsIHNraXBVc2VySW5mbyk7XG4gICAgcmV0dXJuIHNpZ25pblJlc3BvbnNlO1xuICB9XG4gIGFzeW5jIHVzZVJlZnJlc2hUb2tlbih7XG4gICAgc3RhdGUsXG4gICAgcmVkaXJlY3RfdXJpLFxuICAgIHJlc291cmNlLFxuICAgIHRpbWVvdXRJblNlY29uZHMsXG4gICAgZXh0cmFIZWFkZXJzLFxuICAgIGV4dHJhVG9rZW5QYXJhbXNcbiAgfSkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcInVzZVJlZnJlc2hUb2tlblwiKTtcbiAgICBsZXQgc2NvcGU7XG4gICAgaWYgKHRoaXMuc2V0dGluZ3MucmVmcmVzaFRva2VuQWxsb3dlZFNjb3BlID09PSB2b2lkIDApIHtcbiAgICAgIHNjb3BlID0gc3RhdGUuc2NvcGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGFsbG93YWJsZVNjb3BlcyA9IHRoaXMuc2V0dGluZ3MucmVmcmVzaFRva2VuQWxsb3dlZFNjb3BlLnNwbGl0KFwiIFwiKTtcbiAgICAgIGNvbnN0IHByb3ZpZGVkU2NvcGVzID0gKChfYSA9IHN0YXRlLnNjb3BlKSA9PSBudWxsID8gdm9pZCAwIDogX2Euc3BsaXQoXCIgXCIpKSB8fCBbXTtcbiAgICAgIHNjb3BlID0gcHJvdmlkZWRTY29wZXMuZmlsdGVyKChzKSA9PiBhbGxvd2FibGVTY29wZXMuaW5jbHVkZXMocykpLmpvaW4oXCIgXCIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zZXR0aW5ncy5kcG9wICYmIHRoaXMuc2V0dGluZ3MuZHBvcC5zdG9yZSkge1xuICAgICAgY29uc3QgZHBvcFByb29mID0gYXdhaXQgdGhpcy5nZXREcG9wUHJvb2YodGhpcy5zZXR0aW5ncy5kcG9wLnN0b3JlKTtcbiAgICAgIGV4dHJhSGVhZGVycyA9IHsgLi4uZXh0cmFIZWFkZXJzLCBcIkRQb1BcIjogZHBvcFByb29mIH07XG4gICAgfVxuICAgIGxldCByZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IHRoaXMuX3Rva2VuQ2xpZW50LmV4Y2hhbmdlUmVmcmVzaFRva2VuKHtcbiAgICAgICAgcmVmcmVzaF90b2tlbjogc3RhdGUucmVmcmVzaF90b2tlbixcbiAgICAgICAgLy8gcHJvdmlkZSB0aGUgKHBvc3NpYmxlIGZpbHRlcmVkKSBzY29wZSBsaXN0XG4gICAgICAgIHNjb3BlLFxuICAgICAgICByZWRpcmVjdF91cmksXG4gICAgICAgIHJlc291cmNlLFxuICAgICAgICB0aW1lb3V0SW5TZWNvbmRzLFxuICAgICAgICBleHRyYUhlYWRlcnMsXG4gICAgICAgIC4uLmV4dHJhVG9rZW5QYXJhbXNcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yRFBvUE5vbmNlICYmIHRoaXMuc2V0dGluZ3MuZHBvcCkge1xuICAgICAgICBleHRyYUhlYWRlcnNbXCJEUG9QXCJdID0gYXdhaXQgdGhpcy5nZXREcG9wUHJvb2YodGhpcy5zZXR0aW5ncy5kcG9wLnN0b3JlLCBlcnIubm9uY2UpO1xuICAgICAgICByZXN1bHQgPSBhd2FpdCB0aGlzLl90b2tlbkNsaWVudC5leGNoYW5nZVJlZnJlc2hUb2tlbih7XG4gICAgICAgICAgcmVmcmVzaF90b2tlbjogc3RhdGUucmVmcmVzaF90b2tlbixcbiAgICAgICAgICAvLyBwcm92aWRlIHRoZSAocG9zc2libGUgZmlsdGVyZWQpIHNjb3BlIGxpc3RcbiAgICAgICAgICBzY29wZSxcbiAgICAgICAgICByZWRpcmVjdF91cmksXG4gICAgICAgICAgcmVzb3VyY2UsXG4gICAgICAgICAgdGltZW91dEluU2Vjb25kcyxcbiAgICAgICAgICBleHRyYUhlYWRlcnMsXG4gICAgICAgICAgLi4uZXh0cmFUb2tlblBhcmFtc1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzcG9uc2UgPSBuZXcgU2lnbmluUmVzcG9uc2UobmV3IFVSTFNlYXJjaFBhcmFtcygpKTtcbiAgICBPYmplY3QuYXNzaWduKHJlc3BvbnNlLCByZXN1bHQpO1xuICAgIGxvZ2dlcjIuZGVidWcoXCJ2YWxpZGF0aW5nIHJlc3BvbnNlXCIsIHJlc3BvbnNlKTtcbiAgICBhd2FpdCB0aGlzLl92YWxpZGF0b3IudmFsaWRhdGVSZWZyZXNoUmVzcG9uc2UocmVzcG9uc2UsIHtcbiAgICAgIC4uLnN0YXRlLFxuICAgICAgLy8gb3ZlcnJpZGUgdGhlIHNjb3BlIGluIHRoZSBzdGF0ZSBoYW5kZWQgb3ZlciB0byB0aGUgdmFsaWRhdG9yXG4gICAgICAvLyBzbyBpdCBjYW4gc2V0IHRoZSBncmFudGVkIHNjb3BlIHRvIHRoZSByZXF1ZXN0ZWQgc2NvcGUgaW4gY2FzZSBub25lIGlzIGluY2x1ZGVkIGluIHRoZSByZXNwb25zZVxuICAgICAgc2NvcGVcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cbiAgYXN5bmMgY3JlYXRlU2lnbm91dFJlcXVlc3Qoe1xuICAgIHN0YXRlLFxuICAgIGlkX3Rva2VuX2hpbnQsXG4gICAgY2xpZW50X2lkLFxuICAgIHJlcXVlc3RfdHlwZSxcbiAgICB1cmxfc3RhdGUsXG4gICAgcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpID0gdGhpcy5zZXR0aW5ncy5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmksXG4gICAgZXh0cmFRdWVyeVBhcmFtcyA9IHRoaXMuc2V0dGluZ3MuZXh0cmFRdWVyeVBhcmFtc1xuICB9ID0ge30pIHtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcImNyZWF0ZVNpZ25vdXRSZXF1ZXN0XCIpO1xuICAgIGNvbnN0IHVybCA9IGF3YWl0IHRoaXMubWV0YWRhdGFTZXJ2aWNlLmdldEVuZFNlc3Npb25FbmRwb2ludCgpO1xuICAgIGlmICghdXJsKSB7XG4gICAgICBsb2dnZXIyLnRocm93KG5ldyBFcnJvcihcIk5vIGVuZCBzZXNzaW9uIGVuZHBvaW50XCIpKTtcbiAgICAgIHRocm93IG51bGw7XG4gICAgfVxuICAgIGxvZ2dlcjIuZGVidWcoXCJSZWNlaXZlZCBlbmQgc2Vzc2lvbiBlbmRwb2ludFwiLCB1cmwpO1xuICAgIGlmICghY2xpZW50X2lkICYmIHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSAmJiAhaWRfdG9rZW5faGludCkge1xuICAgICAgY2xpZW50X2lkID0gdGhpcy5zZXR0aW5ncy5jbGllbnRfaWQ7XG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgU2lnbm91dFJlcXVlc3Qoe1xuICAgICAgdXJsLFxuICAgICAgaWRfdG9rZW5faGludCxcbiAgICAgIGNsaWVudF9pZCxcbiAgICAgIHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSxcbiAgICAgIHN0YXRlX2RhdGE6IHN0YXRlLFxuICAgICAgZXh0cmFRdWVyeVBhcmFtcyxcbiAgICAgIHJlcXVlc3RfdHlwZSxcbiAgICAgIHVybF9zdGF0ZVxuICAgIH0pO1xuICAgIGF3YWl0IHRoaXMuY2xlYXJTdGFsZVN0YXRlKCk7XG4gICAgY29uc3Qgc2lnbm91dFN0YXRlID0gcmVxdWVzdC5zdGF0ZTtcbiAgICBpZiAoc2lnbm91dFN0YXRlKSB7XG4gICAgICBsb2dnZXIyLmRlYnVnKFwiU2lnbm91dCByZXF1ZXN0IGhhcyBzdGF0ZSB0byBwZXJzaXN0XCIpO1xuICAgICAgYXdhaXQgdGhpcy5zZXR0aW5ncy5zdGF0ZVN0b3JlLnNldChzaWdub3V0U3RhdGUuaWQsIHNpZ25vdXRTdGF0ZS50b1N0b3JhZ2VTdHJpbmcoKSk7XG4gICAgfVxuICAgIHJldHVybiByZXF1ZXN0O1xuICB9XG4gIGFzeW5jIHJlYWRTaWdub3V0UmVzcG9uc2VTdGF0ZSh1cmwsIHJlbW92ZVN0YXRlID0gZmFsc2UpIHtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcInJlYWRTaWdub3V0UmVzcG9uc2VTdGF0ZVwiKTtcbiAgICBjb25zdCByZXNwb25zZSA9IG5ldyBTaWdub3V0UmVzcG9uc2UoVXJsVXRpbHMucmVhZFBhcmFtcyh1cmwsIHRoaXMuc2V0dGluZ3MucmVzcG9uc2VfbW9kZSkpO1xuICAgIGlmICghcmVzcG9uc2Uuc3RhdGUpIHtcbiAgICAgIGxvZ2dlcjIuZGVidWcoXCJObyBzdGF0ZSBpbiByZXNwb25zZVwiKTtcbiAgICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xuICAgICAgICBsb2dnZXIyLndhcm4oXCJSZXNwb25zZSB3YXMgZXJyb3I6XCIsIHJlc3BvbnNlLmVycm9yKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgc3RhdGU6IHZvaWQgMCwgcmVzcG9uc2UgfTtcbiAgICB9XG4gICAgY29uc3Qgc3RvcmVkU3RhdGVTdHJpbmcgPSBhd2FpdCB0aGlzLnNldHRpbmdzLnN0YXRlU3RvcmVbcmVtb3ZlU3RhdGUgPyBcInJlbW92ZVwiIDogXCJnZXRcIl0ocmVzcG9uc2Uuc3RhdGUpO1xuICAgIGlmICghc3RvcmVkU3RhdGVTdHJpbmcpIHtcbiAgICAgIGxvZ2dlcjIudGhyb3cobmV3IEVycm9yKFwiTm8gbWF0Y2hpbmcgc3RhdGUgZm91bmQgaW4gc3RvcmFnZVwiKSk7XG4gICAgICB0aHJvdyBudWxsO1xuICAgIH1cbiAgICBjb25zdCBzdGF0ZSA9IGF3YWl0IFN0YXRlLmZyb21TdG9yYWdlU3RyaW5nKHN0b3JlZFN0YXRlU3RyaW5nKTtcbiAgICByZXR1cm4geyBzdGF0ZSwgcmVzcG9uc2UgfTtcbiAgfVxuICBhc3luYyBwcm9jZXNzU2lnbm91dFJlc3BvbnNlKHVybCkge1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwicHJvY2Vzc1NpZ25vdXRSZXNwb25zZVwiKTtcbiAgICBjb25zdCB7IHN0YXRlLCByZXNwb25zZSB9ID0gYXdhaXQgdGhpcy5yZWFkU2lnbm91dFJlc3BvbnNlU3RhdGUodXJsLCB0cnVlKTtcbiAgICBpZiAoc3RhdGUpIHtcbiAgICAgIGxvZ2dlcjIuZGVidWcoXCJSZWNlaXZlZCBzdGF0ZSBmcm9tIHN0b3JhZ2U7IHZhbGlkYXRpbmcgcmVzcG9uc2VcIik7XG4gICAgICB0aGlzLl92YWxpZGF0b3IudmFsaWRhdGVTaWdub3V0UmVzcG9uc2UocmVzcG9uc2UsIHN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nZ2VyMi5kZWJ1ZyhcIk5vIHN0YXRlIGZyb20gc3RvcmFnZTsgc2tpcHBpbmcgcmVzcG9uc2UgdmFsaWRhdGlvblwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG4gIGNsZWFyU3RhbGVTdGF0ZSgpIHtcbiAgICB0aGlzLl9sb2dnZXIuY3JlYXRlKFwiY2xlYXJTdGFsZVN0YXRlXCIpO1xuICAgIHJldHVybiBTdGF0ZS5jbGVhclN0YWxlU3RhdGUodGhpcy5zZXR0aW5ncy5zdGF0ZVN0b3JlLCB0aGlzLnNldHRpbmdzLnN0YWxlU3RhdGVBZ2VJblNlY29uZHMpO1xuICB9XG4gIGFzeW5jIHJldm9rZVRva2VuKHRva2VuLCB0eXBlKSB7XG4gICAgdGhpcy5fbG9nZ2VyLmNyZWF0ZShcInJldm9rZVRva2VuXCIpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLl90b2tlbkNsaWVudC5yZXZva2Uoe1xuICAgICAgdG9rZW4sXG4gICAgICB0b2tlbl90eXBlX2hpbnQ6IHR5cGVcbiAgICB9KTtcbiAgfVxufTtcblxuLy8gc3JjL1Nlc3Npb25Nb25pdG9yLnRzXG52YXIgU2Vzc2lvbk1vbml0b3IgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKF91c2VyTWFuYWdlcikge1xuICAgIHRoaXMuX3VzZXJNYW5hZ2VyID0gX3VzZXJNYW5hZ2VyO1xuICAgIHRoaXMuX2xvZ2dlciA9IG5ldyBMb2dnZXIoXCJTZXNzaW9uTW9uaXRvclwiKTtcbiAgICB0aGlzLl9zdGFydCA9IGFzeW5jICh1c2VyKSA9PiB7XG4gICAgICBjb25zdCBzZXNzaW9uX3N0YXRlID0gdXNlci5zZXNzaW9uX3N0YXRlO1xuICAgICAgaWYgKCFzZXNzaW9uX3N0YXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwiX3N0YXJ0XCIpO1xuICAgICAgaWYgKHVzZXIucHJvZmlsZSkge1xuICAgICAgICB0aGlzLl9zdWIgPSB1c2VyLnByb2ZpbGUuc3ViO1xuICAgICAgICBsb2dnZXIyLmRlYnVnKFwic2Vzc2lvbl9zdGF0ZVwiLCBzZXNzaW9uX3N0YXRlLCBcIiwgc3ViXCIsIHRoaXMuX3N1Yik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdWIgPSB2b2lkIDA7XG4gICAgICAgIGxvZ2dlcjIuZGVidWcoXCJzZXNzaW9uX3N0YXRlXCIsIHNlc3Npb25fc3RhdGUsIFwiLCBhbm9ueW1vdXMgdXNlclwiKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9jaGVja1Nlc3Npb25JRnJhbWUpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lLnN0YXJ0KHNlc3Npb25fc3RhdGUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB1cmwgPSBhd2FpdCB0aGlzLl91c2VyTWFuYWdlci5tZXRhZGF0YVNlcnZpY2UuZ2V0Q2hlY2tTZXNzaW9uSWZyYW1lKCk7XG4gICAgICAgIGlmICh1cmwpIHtcbiAgICAgICAgICBsb2dnZXIyLmRlYnVnKFwiaW5pdGlhbGl6aW5nIGNoZWNrIHNlc3Npb24gaWZyYW1lXCIpO1xuICAgICAgICAgIGNvbnN0IGNsaWVudF9pZCA9IHRoaXMuX3VzZXJNYW5hZ2VyLnNldHRpbmdzLmNsaWVudF9pZDtcbiAgICAgICAgICBjb25zdCBpbnRlcnZhbEluU2Vjb25kcyA9IHRoaXMuX3VzZXJNYW5hZ2VyLnNldHRpbmdzLmNoZWNrU2Vzc2lvbkludGVydmFsSW5TZWNvbmRzO1xuICAgICAgICAgIGNvbnN0IHN0b3BPbkVycm9yID0gdGhpcy5fdXNlck1hbmFnZXIuc2V0dGluZ3Muc3RvcENoZWNrU2Vzc2lvbk9uRXJyb3I7XG4gICAgICAgICAgY29uc3QgY2hlY2tTZXNzaW9uSUZyYW1lID0gbmV3IENoZWNrU2Vzc2lvbklGcmFtZSh0aGlzLl9jYWxsYmFjaywgY2xpZW50X2lkLCB1cmwsIGludGVydmFsSW5TZWNvbmRzLCBzdG9wT25FcnJvcik7XG4gICAgICAgICAgYXdhaXQgY2hlY2tTZXNzaW9uSUZyYW1lLmxvYWQoKTtcbiAgICAgICAgICB0aGlzLl9jaGVja1Nlc3Npb25JRnJhbWUgPSBjaGVja1Nlc3Npb25JRnJhbWU7XG4gICAgICAgICAgY2hlY2tTZXNzaW9uSUZyYW1lLnN0YXJ0KHNlc3Npb25fc3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZ2dlcjIud2FybihcIm5vIGNoZWNrIHNlc3Npb24gaWZyYW1lIGZvdW5kIGluIHRoZSBtZXRhZGF0YVwiKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxvZ2dlcjIuZXJyb3IoXCJFcnJvciBmcm9tIGdldENoZWNrU2Vzc2lvbklmcmFtZTpcIiwgZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6IGVycik7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLl9zdG9wID0gKCkgPT4ge1xuICAgICAgY29uc3QgbG9nZ2VyMiA9IHRoaXMuX2xvZ2dlci5jcmVhdGUoXCJfc3RvcFwiKTtcbiAgICAgIHRoaXMuX3N1YiA9IHZvaWQgMDtcbiAgICAgIGlmICh0aGlzLl9jaGVja1Nlc3Npb25JRnJhbWUpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lLnN0b3AoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl91c2VyTWFuYWdlci5zZXR0aW5ncy5tb25pdG9yQW5vbnltb3VzU2Vzc2lvbikge1xuICAgICAgICBjb25zdCB0aW1lckhhbmRsZSA9IHNldEludGVydmFsKGFzeW5jICgpID0+IHtcbiAgICAgICAgICBjbGVhckludGVydmFsKHRpbWVySGFuZGxlKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IHRoaXMuX3VzZXJNYW5hZ2VyLnF1ZXJ5U2Vzc2lvblN0YXR1cygpO1xuICAgICAgICAgICAgaWYgKHNlc3Npb24pIHtcbiAgICAgICAgICAgICAgY29uc3QgdG1wVXNlciA9IHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uX3N0YXRlOiBzZXNzaW9uLnNlc3Npb25fc3RhdGUsXG4gICAgICAgICAgICAgICAgcHJvZmlsZTogc2Vzc2lvbi5zdWIgPyB7XG4gICAgICAgICAgICAgICAgICBzdWI6IHNlc3Npb24uc3ViXG4gICAgICAgICAgICAgICAgfSA6IG51bGxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgdm9pZCB0aGlzLl9zdGFydCh0bXBVc2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGxvZ2dlcjIuZXJyb3IoXCJlcnJvciBmcm9tIHF1ZXJ5U2Vzc2lvblN0YXR1c1wiLCBlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIDFlMyk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLl9jYWxsYmFjayA9IGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwiX2NhbGxiYWNrXCIpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IHRoaXMuX3VzZXJNYW5hZ2VyLnF1ZXJ5U2Vzc2lvblN0YXR1cygpO1xuICAgICAgICBsZXQgcmFpc2VFdmVudCA9IHRydWU7XG4gICAgICAgIGlmIChzZXNzaW9uICYmIHRoaXMuX2NoZWNrU2Vzc2lvbklGcmFtZSkge1xuICAgICAgICAgIGlmIChzZXNzaW9uLnN1YiA9PT0gdGhpcy5fc3ViKSB7XG4gICAgICAgICAgICByYWlzZUV2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9jaGVja1Nlc3Npb25JRnJhbWUuc3RhcnQoc2Vzc2lvbi5zZXNzaW9uX3N0YXRlKTtcbiAgICAgICAgICAgIGxvZ2dlcjIuZGVidWcoXCJzYW1lIHN1YiBzdGlsbCBsb2dnZWQgaW4gYXQgT1AsIHNlc3Npb24gc3RhdGUgaGFzIGNoYW5nZWQsIHJlc3RhcnRpbmcgY2hlY2sgc2Vzc2lvbiBpZnJhbWU7IHNlc3Npb25fc3RhdGVcIiwgc2Vzc2lvbi5zZXNzaW9uX3N0YXRlKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3VzZXJNYW5hZ2VyLmV2ZW50cy5fcmFpc2VVc2VyU2Vzc2lvbkNoYW5nZWQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9nZ2VyMi5kZWJ1ZyhcImRpZmZlcmVudCBzdWJqZWN0IHNpZ25lZCBpbnRvIE9QXCIsIHNlc3Npb24uc3ViKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9nZ2VyMi5kZWJ1ZyhcInN1YmplY3Qgbm8gbG9uZ2VyIHNpZ25lZCBpbnRvIE9QXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyYWlzZUV2ZW50KSB7XG4gICAgICAgICAgaWYgKHRoaXMuX3N1Yikge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLl9yYWlzZVVzZXJTaWduZWRPdXQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLl9yYWlzZVVzZXJTaWduZWRJbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2dnZXIyLmRlYnVnKFwibm8gY2hhbmdlIGluIHNlc3Npb24gZGV0ZWN0ZWQsIG5vIGV2ZW50IHRvIHJhaXNlXCIpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N1Yikge1xuICAgICAgICAgIGxvZ2dlcjIuZGVidWcoXCJFcnJvciBjYWxsaW5nIHF1ZXJ5Q3VycmVudFNpZ25pblNlc3Npb247IHJhaXNpbmcgc2lnbmVkIG91dCBldmVudFwiLCBlcnIpO1xuICAgICAgICAgIGF3YWl0IHRoaXMuX3VzZXJNYW5hZ2VyLmV2ZW50cy5fcmFpc2VVc2VyU2lnbmVkT3V0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIGlmICghX3VzZXJNYW5hZ2VyKSB7XG4gICAgICB0aGlzLl9sb2dnZXIudGhyb3cobmV3IEVycm9yKFwiTm8gdXNlciBtYW5hZ2VyIHBhc3NlZFwiKSk7XG4gICAgfVxuICAgIHRoaXMuX3VzZXJNYW5hZ2VyLmV2ZW50cy5hZGRVc2VyTG9hZGVkKHRoaXMuX3N0YXJ0KTtcbiAgICB0aGlzLl91c2VyTWFuYWdlci5ldmVudHMuYWRkVXNlclVubG9hZGVkKHRoaXMuX3N0b3ApO1xuICAgIHRoaXMuX2luaXQoKS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICB0aGlzLl9sb2dnZXIuZXJyb3IoZXJyKTtcbiAgICB9KTtcbiAgfVxuICBhc3luYyBfaW5pdCgpIHtcbiAgICB0aGlzLl9sb2dnZXIuY3JlYXRlKFwiX2luaXRcIik7XG4gICAgY29uc3QgdXNlciA9IGF3YWl0IHRoaXMuX3VzZXJNYW5hZ2VyLmdldFVzZXIoKTtcbiAgICBpZiAodXNlcikge1xuICAgICAgdm9pZCB0aGlzLl9zdGFydCh1c2VyKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3VzZXJNYW5hZ2VyLnNldHRpbmdzLm1vbml0b3JBbm9ueW1vdXNTZXNzaW9uKSB7XG4gICAgICBjb25zdCBzZXNzaW9uID0gYXdhaXQgdGhpcy5fdXNlck1hbmFnZXIucXVlcnlTZXNzaW9uU3RhdHVzKCk7XG4gICAgICBpZiAoc2Vzc2lvbikge1xuICAgICAgICBjb25zdCB0bXBVc2VyID0ge1xuICAgICAgICAgIHNlc3Npb25fc3RhdGU6IHNlc3Npb24uc2Vzc2lvbl9zdGF0ZSxcbiAgICAgICAgICBwcm9maWxlOiBzZXNzaW9uLnN1YiA/IHtcbiAgICAgICAgICAgIHN1Yjogc2Vzc2lvbi5zdWJcbiAgICAgICAgICB9IDogbnVsbFxuICAgICAgICB9O1xuICAgICAgICB2b2lkIHRoaXMuX3N0YXJ0KHRtcFVzZXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLy8gc3JjL1VzZXIudHNcbnZhciBVc2VyID0gY2xhc3MgX1VzZXIge1xuICBjb25zdHJ1Y3RvcihhcmdzKSB7XG4gICAgdmFyIF9hO1xuICAgIHRoaXMuaWRfdG9rZW4gPSBhcmdzLmlkX3Rva2VuO1xuICAgIHRoaXMuc2Vzc2lvbl9zdGF0ZSA9IChfYSA9IGFyZ3Muc2Vzc2lvbl9zdGF0ZSkgIT0gbnVsbCA/IF9hIDogbnVsbDtcbiAgICB0aGlzLmFjY2Vzc190b2tlbiA9IGFyZ3MuYWNjZXNzX3Rva2VuO1xuICAgIHRoaXMucmVmcmVzaF90b2tlbiA9IGFyZ3MucmVmcmVzaF90b2tlbjtcbiAgICB0aGlzLnRva2VuX3R5cGUgPSBhcmdzLnRva2VuX3R5cGU7XG4gICAgdGhpcy5zY29wZSA9IGFyZ3Muc2NvcGU7XG4gICAgdGhpcy5wcm9maWxlID0gYXJncy5wcm9maWxlO1xuICAgIHRoaXMuZXhwaXJlc19hdCA9IGFyZ3MuZXhwaXJlc19hdDtcbiAgICB0aGlzLnN0YXRlID0gYXJncy51c2VyU3RhdGU7XG4gICAgdGhpcy51cmxfc3RhdGUgPSBhcmdzLnVybF9zdGF0ZTtcbiAgfVxuICAvKiogQ29tcHV0ZWQgbnVtYmVyIG9mIHNlY29uZHMgdGhlIGFjY2VzcyB0b2tlbiBoYXMgcmVtYWluaW5nLiAqL1xuICBnZXQgZXhwaXJlc19pbigpIHtcbiAgICBpZiAodGhpcy5leHBpcmVzX2F0ID09PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmV4cGlyZXNfYXQgLSBUaW1lci5nZXRFcG9jaFRpbWUoKTtcbiAgfVxuICBzZXQgZXhwaXJlc19pbih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLmV4cGlyZXNfYXQgPSBNYXRoLmZsb29yKHZhbHVlKSArIFRpbWVyLmdldEVwb2NoVGltZSgpO1xuICAgIH1cbiAgfVxuICAvKiogQ29tcHV0ZWQgdmFsdWUgaW5kaWNhdGluZyBpZiB0aGUgYWNjZXNzIHRva2VuIGlzIGV4cGlyZWQuICovXG4gIGdldCBleHBpcmVkKCkge1xuICAgIGNvbnN0IGV4cGlyZXNfaW4gPSB0aGlzLmV4cGlyZXNfaW47XG4gICAgaWYgKGV4cGlyZXNfaW4gPT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIGV4cGlyZXNfaW4gPD0gMDtcbiAgfVxuICAvKiogQXJyYXkgcmVwcmVzZW50aW5nIHRoZSBwYXJzZWQgdmFsdWVzIGZyb20gdGhlIGBzY29wZWAuICovXG4gIGdldCBzY29wZXMoKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICByZXR1cm4gKF9iID0gKF9hID0gdGhpcy5zY29wZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnNwbGl0KFwiIFwiKSkgIT0gbnVsbCA/IF9iIDogW107XG4gIH1cbiAgdG9TdG9yYWdlU3RyaW5nKCkge1xuICAgIG5ldyBMb2dnZXIoXCJVc2VyXCIpLmNyZWF0ZShcInRvU3RvcmFnZVN0cmluZ1wiKTtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgaWRfdG9rZW46IHRoaXMuaWRfdG9rZW4sXG4gICAgICBzZXNzaW9uX3N0YXRlOiB0aGlzLnNlc3Npb25fc3RhdGUsXG4gICAgICBhY2Nlc3NfdG9rZW46IHRoaXMuYWNjZXNzX3Rva2VuLFxuICAgICAgcmVmcmVzaF90b2tlbjogdGhpcy5yZWZyZXNoX3Rva2VuLFxuICAgICAgdG9rZW5fdHlwZTogdGhpcy50b2tlbl90eXBlLFxuICAgICAgc2NvcGU6IHRoaXMuc2NvcGUsXG4gICAgICBwcm9maWxlOiB0aGlzLnByb2ZpbGUsXG4gICAgICBleHBpcmVzX2F0OiB0aGlzLmV4cGlyZXNfYXRcbiAgICB9KTtcbiAgfVxuICBzdGF0aWMgZnJvbVN0b3JhZ2VTdHJpbmcoc3RvcmFnZVN0cmluZykge1xuICAgIExvZ2dlci5jcmVhdGVTdGF0aWMoXCJVc2VyXCIsIFwiZnJvbVN0b3JhZ2VTdHJpbmdcIik7XG4gICAgcmV0dXJuIG5ldyBfVXNlcihKU09OLnBhcnNlKHN0b3JhZ2VTdHJpbmcpKTtcbiAgfVxufTtcblxuLy8gc3JjL25hdmlnYXRvcnMvQWJzdHJhY3RDaGlsZFdpbmRvdy50c1xudmFyIG1lc3NhZ2VTb3VyY2UgPSBcIm9pZGMtY2xpZW50XCI7XG52YXIgQWJzdHJhY3RDaGlsZFdpbmRvdyA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fYWJvcnQgPSBuZXcgRXZlbnQoXCJXaW5kb3cgbmF2aWdhdGlvbiBhYm9ydGVkXCIpO1xuICAgIHRoaXMuX2Rpc3Bvc2VIYW5kbGVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgdGhpcy5fd2luZG93ID0gbnVsbDtcbiAgfVxuICBhc3luYyBuYXZpZ2F0ZShwYXJhbXMpIHtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcIm5hdmlnYXRlXCIpO1xuICAgIGlmICghdGhpcy5fd2luZG93KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0ZWQgdG8gbmF2aWdhdGUgb24gYSBkaXNwb3NlZCB3aW5kb3dcIik7XG4gICAgfVxuICAgIGxvZ2dlcjIuZGVidWcoXCJzZXR0aW5nIFVSTCBpbiB3aW5kb3dcIik7XG4gICAgdGhpcy5fd2luZG93LmxvY2F0aW9uLnJlcGxhY2UocGFyYW1zLnVybCk7XG4gICAgY29uc3QgeyB1cmwsIGtlZXBPcGVuIH0gPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBsaXN0ZW5lciA9IChlKSA9PiB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgZGF0YSA9IGUuZGF0YTtcbiAgICAgICAgY29uc3Qgb3JpZ2luID0gKF9hID0gcGFyYW1zLnNjcmlwdE9yaWdpbikgIT0gbnVsbCA/IF9hIDogd2luZG93LmxvY2F0aW9uLm9yaWdpbjtcbiAgICAgICAgaWYgKGUub3JpZ2luICE9PSBvcmlnaW4gfHwgKGRhdGEgPT0gbnVsbCA/IHZvaWQgMCA6IGRhdGEuc291cmNlKSAhPT0gbWVzc2FnZVNvdXJjZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHN0YXRlID0gVXJsVXRpbHMucmVhZFBhcmFtcyhkYXRhLnVybCwgcGFyYW1zLnJlc3BvbnNlX21vZGUpLmdldChcInN0YXRlXCIpO1xuICAgICAgICAgIGlmICghc3RhdGUpIHtcbiAgICAgICAgICAgIGxvZ2dlcjIud2FybihcIm5vIHN0YXRlIGZvdW5kIGluIHJlc3BvbnNlIHVybFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGUuc291cmNlICE9PSB0aGlzLl93aW5kb3cgJiYgc3RhdGUgIT09IHBhcmFtcy5zdGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgdGhpcy5fZGlzcG9zZSgpO1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJJbnZhbGlkIHJlc3BvbnNlIGZyb20gd2luZG93XCIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgfTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgdGhpcy5fZGlzcG9zZUhhbmRsZXJzLmFkZCgoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgbGlzdGVuZXIsIGZhbHNlKSk7XG4gICAgICB0aGlzLl9kaXNwb3NlSGFuZGxlcnMuYWRkKHRoaXMuX2Fib3J0LmFkZEhhbmRsZXIoKHJlYXNvbikgPT4ge1xuICAgICAgICB0aGlzLl9kaXNwb3NlKCk7XG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIGxvZ2dlcjIuZGVidWcoXCJnb3QgcmVzcG9uc2UgZnJvbSB3aW5kb3dcIik7XG4gICAgdGhpcy5fZGlzcG9zZSgpO1xuICAgIGlmICgha2VlcE9wZW4pIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdXJsIH07XG4gIH1cbiAgX2Rpc3Bvc2UoKSB7XG4gICAgdGhpcy5fbG9nZ2VyLmNyZWF0ZShcIl9kaXNwb3NlXCIpO1xuICAgIGZvciAoY29uc3QgZGlzcG9zZSBvZiB0aGlzLl9kaXNwb3NlSGFuZGxlcnMpIHtcbiAgICAgIGRpc3Bvc2UoKTtcbiAgICB9XG4gICAgdGhpcy5fZGlzcG9zZUhhbmRsZXJzLmNsZWFyKCk7XG4gIH1cbiAgc3RhdGljIF9ub3RpZnlQYXJlbnQocGFyZW50LCB1cmwsIGtlZXBPcGVuID0gZmFsc2UsIHRhcmdldE9yaWdpbiA9IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pIHtcbiAgICBwYXJlbnQucG9zdE1lc3NhZ2Uoe1xuICAgICAgc291cmNlOiBtZXNzYWdlU291cmNlLFxuICAgICAgdXJsLFxuICAgICAga2VlcE9wZW5cbiAgICB9LCB0YXJnZXRPcmlnaW4pO1xuICB9XG59O1xuXG4vLyBzcmMvVXNlck1hbmFnZXJTZXR0aW5ncy50c1xudmFyIERlZmF1bHRQb3B1cFdpbmRvd0ZlYXR1cmVzID0ge1xuICBsb2NhdGlvbjogZmFsc2UsXG4gIHRvb2xiYXI6IGZhbHNlLFxuICBoZWlnaHQ6IDY0MCxcbiAgY2xvc2VQb3B1cFdpbmRvd0FmdGVySW5TZWNvbmRzOiAtMVxufTtcbnZhciBEZWZhdWx0UG9wdXBUYXJnZXQgPSBcIl9ibGFua1wiO1xudmFyIERlZmF1bHRBY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZUluU2Vjb25kcyA9IDYwO1xudmFyIERlZmF1bHRDaGVja1Nlc3Npb25JbnRlcnZhbEluU2Vjb25kcyA9IDI7XG52YXIgRGVmYXVsdFNpbGVudFJlcXVlc3RUaW1lb3V0SW5TZWNvbmRzID0gMTA7XG52YXIgVXNlck1hbmFnZXJTZXR0aW5nc1N0b3JlID0gY2xhc3MgZXh0ZW5kcyBPaWRjQ2xpZW50U2V0dGluZ3NTdG9yZSB7XG4gIGNvbnN0cnVjdG9yKGFyZ3MpIHtcbiAgICBjb25zdCB7XG4gICAgICBwb3B1cF9yZWRpcmVjdF91cmkgPSBhcmdzLnJlZGlyZWN0X3VyaSxcbiAgICAgIHBvcHVwX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSA9IGFyZ3MucG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpLFxuICAgICAgcG9wdXBXaW5kb3dGZWF0dXJlcyA9IERlZmF1bHRQb3B1cFdpbmRvd0ZlYXR1cmVzLFxuICAgICAgcG9wdXBXaW5kb3dUYXJnZXQgPSBEZWZhdWx0UG9wdXBUYXJnZXQsXG4gICAgICByZWRpcmVjdE1ldGhvZCA9IFwiYXNzaWduXCIsXG4gICAgICByZWRpcmVjdFRhcmdldCA9IFwic2VsZlwiLFxuICAgICAgaWZyYW1lTm90aWZ5UGFyZW50T3JpZ2luID0gYXJncy5pZnJhbWVOb3RpZnlQYXJlbnRPcmlnaW4sXG4gICAgICBpZnJhbWVTY3JpcHRPcmlnaW4gPSBhcmdzLmlmcmFtZVNjcmlwdE9yaWdpbixcbiAgICAgIHJlcXVlc3RUaW1lb3V0SW5TZWNvbmRzLFxuICAgICAgc2lsZW50X3JlZGlyZWN0X3VyaSA9IGFyZ3MucmVkaXJlY3RfdXJpLFxuICAgICAgc2lsZW50UmVxdWVzdFRpbWVvdXRJblNlY29uZHMsXG4gICAgICBhdXRvbWF0aWNTaWxlbnRSZW5ldyA9IHRydWUsXG4gICAgICB2YWxpZGF0ZVN1Yk9uU2lsZW50UmVuZXcgPSB0cnVlLFxuICAgICAgaW5jbHVkZUlkVG9rZW5JblNpbGVudFJlbmV3ID0gZmFsc2UsXG4gICAgICBtb25pdG9yU2Vzc2lvbiA9IGZhbHNlLFxuICAgICAgbW9uaXRvckFub255bW91c1Nlc3Npb24gPSBmYWxzZSxcbiAgICAgIGNoZWNrU2Vzc2lvbkludGVydmFsSW5TZWNvbmRzID0gRGVmYXVsdENoZWNrU2Vzc2lvbkludGVydmFsSW5TZWNvbmRzLFxuICAgICAgcXVlcnlfc3RhdHVzX3Jlc3BvbnNlX3R5cGUgPSBcImNvZGVcIixcbiAgICAgIHN0b3BDaGVja1Nlc3Npb25PbkVycm9yID0gdHJ1ZSxcbiAgICAgIHJldm9rZVRva2VuVHlwZXMgPSBbXCJhY2Nlc3NfdG9rZW5cIiwgXCJyZWZyZXNoX3Rva2VuXCJdLFxuICAgICAgcmV2b2tlVG9rZW5zT25TaWdub3V0ID0gZmFsc2UsXG4gICAgICBpbmNsdWRlSWRUb2tlbkluU2lsZW50U2lnbm91dCA9IGZhbHNlLFxuICAgICAgYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWVJblNlY29uZHMgPSBEZWZhdWx0QWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWVJblNlY29uZHMsXG4gICAgICB1c2VyU3RvcmVcbiAgICB9ID0gYXJncztcbiAgICBzdXBlcihhcmdzKTtcbiAgICB0aGlzLnBvcHVwX3JlZGlyZWN0X3VyaSA9IHBvcHVwX3JlZGlyZWN0X3VyaTtcbiAgICB0aGlzLnBvcHVwX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSA9IHBvcHVwX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaTtcbiAgICB0aGlzLnBvcHVwV2luZG93RmVhdHVyZXMgPSBwb3B1cFdpbmRvd0ZlYXR1cmVzO1xuICAgIHRoaXMucG9wdXBXaW5kb3dUYXJnZXQgPSBwb3B1cFdpbmRvd1RhcmdldDtcbiAgICB0aGlzLnJlZGlyZWN0TWV0aG9kID0gcmVkaXJlY3RNZXRob2Q7XG4gICAgdGhpcy5yZWRpcmVjdFRhcmdldCA9IHJlZGlyZWN0VGFyZ2V0O1xuICAgIHRoaXMuaWZyYW1lTm90aWZ5UGFyZW50T3JpZ2luID0gaWZyYW1lTm90aWZ5UGFyZW50T3JpZ2luO1xuICAgIHRoaXMuaWZyYW1lU2NyaXB0T3JpZ2luID0gaWZyYW1lU2NyaXB0T3JpZ2luO1xuICAgIHRoaXMuc2lsZW50X3JlZGlyZWN0X3VyaSA9IHNpbGVudF9yZWRpcmVjdF91cmk7XG4gICAgdGhpcy5zaWxlbnRSZXF1ZXN0VGltZW91dEluU2Vjb25kcyA9IHNpbGVudFJlcXVlc3RUaW1lb3V0SW5TZWNvbmRzIHx8IHJlcXVlc3RUaW1lb3V0SW5TZWNvbmRzIHx8IERlZmF1bHRTaWxlbnRSZXF1ZXN0VGltZW91dEluU2Vjb25kcztcbiAgICB0aGlzLmF1dG9tYXRpY1NpbGVudFJlbmV3ID0gYXV0b21hdGljU2lsZW50UmVuZXc7XG4gICAgdGhpcy52YWxpZGF0ZVN1Yk9uU2lsZW50UmVuZXcgPSB2YWxpZGF0ZVN1Yk9uU2lsZW50UmVuZXc7XG4gICAgdGhpcy5pbmNsdWRlSWRUb2tlbkluU2lsZW50UmVuZXcgPSBpbmNsdWRlSWRUb2tlbkluU2lsZW50UmVuZXc7XG4gICAgdGhpcy5tb25pdG9yU2Vzc2lvbiA9IG1vbml0b3JTZXNzaW9uO1xuICAgIHRoaXMubW9uaXRvckFub255bW91c1Nlc3Npb24gPSBtb25pdG9yQW5vbnltb3VzU2Vzc2lvbjtcbiAgICB0aGlzLmNoZWNrU2Vzc2lvbkludGVydmFsSW5TZWNvbmRzID0gY2hlY2tTZXNzaW9uSW50ZXJ2YWxJblNlY29uZHM7XG4gICAgdGhpcy5zdG9wQ2hlY2tTZXNzaW9uT25FcnJvciA9IHN0b3BDaGVja1Nlc3Npb25PbkVycm9yO1xuICAgIHRoaXMucXVlcnlfc3RhdHVzX3Jlc3BvbnNlX3R5cGUgPSBxdWVyeV9zdGF0dXNfcmVzcG9uc2VfdHlwZTtcbiAgICB0aGlzLnJldm9rZVRva2VuVHlwZXMgPSByZXZva2VUb2tlblR5cGVzO1xuICAgIHRoaXMucmV2b2tlVG9rZW5zT25TaWdub3V0ID0gcmV2b2tlVG9rZW5zT25TaWdub3V0O1xuICAgIHRoaXMuaW5jbHVkZUlkVG9rZW5JblNpbGVudFNpZ25vdXQgPSBpbmNsdWRlSWRUb2tlbkluU2lsZW50U2lnbm91dDtcbiAgICB0aGlzLmFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lSW5TZWNvbmRzID0gYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWVJblNlY29uZHM7XG4gICAgaWYgKHVzZXJTdG9yZSkge1xuICAgICAgdGhpcy51c2VyU3RvcmUgPSB1c2VyU3RvcmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHN0b3JlID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdy5zZXNzaW9uU3RvcmFnZSA6IG5ldyBJbk1lbW9yeVdlYlN0b3JhZ2UoKTtcbiAgICAgIHRoaXMudXNlclN0b3JlID0gbmV3IFdlYlN0b3JhZ2VTdGF0ZVN0b3JlKHsgc3RvcmUgfSk7XG4gICAgfVxuICB9XG59O1xuXG4vLyBzcmMvbmF2aWdhdG9ycy9JRnJhbWVXaW5kb3cudHNcbnZhciBJRnJhbWVXaW5kb3cgPSBjbGFzcyBfSUZyYW1lV2luZG93IGV4dGVuZHMgQWJzdHJhY3RDaGlsZFdpbmRvdyB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBzaWxlbnRSZXF1ZXN0VGltZW91dEluU2Vjb25kcyA9IERlZmF1bHRTaWxlbnRSZXF1ZXN0VGltZW91dEluU2Vjb25kc1xuICB9KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9sb2dnZXIgPSBuZXcgTG9nZ2VyKFwiSUZyYW1lV2luZG93XCIpO1xuICAgIHRoaXMuX3RpbWVvdXRJblNlY29uZHMgPSBzaWxlbnRSZXF1ZXN0VGltZW91dEluU2Vjb25kcztcbiAgICB0aGlzLl9mcmFtZSA9IF9JRnJhbWVXaW5kb3cuY3JlYXRlSGlkZGVuSWZyYW1lKCk7XG4gICAgdGhpcy5fd2luZG93ID0gdGhpcy5fZnJhbWUuY29udGVudFdpbmRvdztcbiAgfVxuICBzdGF0aWMgY3JlYXRlSGlkZGVuSWZyYW1lKCkge1xuICAgIGNvbnN0IGlmcmFtZSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO1xuICAgIGlmcmFtZS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICBpZnJhbWUuc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XG4gICAgaWZyYW1lLnN0eWxlLmxlZnQgPSBcIi0xMDAwcHhcIjtcbiAgICBpZnJhbWUuc3R5bGUudG9wID0gXCIwXCI7XG4gICAgaWZyYW1lLndpZHRoID0gXCIwXCI7XG4gICAgaWZyYW1lLmhlaWdodCA9IFwiMFwiO1xuICAgIHdpbmRvdy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgcmV0dXJuIGlmcmFtZTtcbiAgfVxuICBhc3luYyBuYXZpZ2F0ZShwYXJhbXMpIHtcbiAgICB0aGlzLl9sb2dnZXIuZGVidWcoXCJuYXZpZ2F0ZTogVXNpbmcgdGltZW91dCBvZjpcIiwgdGhpcy5fdGltZW91dEluU2Vjb25kcyk7XG4gICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHZvaWQgdGhpcy5fYWJvcnQucmFpc2UobmV3IEVycm9yVGltZW91dChcIklGcmFtZSB0aW1lZCBvdXQgd2l0aG91dCBhIHJlc3BvbnNlXCIpKSwgdGhpcy5fdGltZW91dEluU2Vjb25kcyAqIDFlMyk7XG4gICAgdGhpcy5fZGlzcG9zZUhhbmRsZXJzLmFkZCgoKSA9PiBjbGVhclRpbWVvdXQodGltZXIpKTtcbiAgICByZXR1cm4gYXdhaXQgc3VwZXIubmF2aWdhdGUocGFyYW1zKTtcbiAgfVxuICBjbG9zZSgpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKHRoaXMuX2ZyYW1lKSB7XG4gICAgICBpZiAodGhpcy5fZnJhbWUucGFyZW50Tm9kZSkge1xuICAgICAgICB0aGlzLl9mcmFtZS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoZXYpID0+IHtcbiAgICAgICAgICB2YXIgX2EyO1xuICAgICAgICAgIGNvbnN0IGZyYW1lID0gZXYudGFyZ2V0O1xuICAgICAgICAgIChfYTIgPSBmcmFtZS5wYXJlbnROb2RlKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLnJlbW92ZUNoaWxkKGZyYW1lKTtcbiAgICAgICAgICB2b2lkIHRoaXMuX2Fib3J0LnJhaXNlKG5ldyBFcnJvcihcIklGcmFtZSByZW1vdmVkIGZyb20gRE9NXCIpKTtcbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgIChfYSA9IHRoaXMuX2ZyYW1lLmNvbnRlbnRXaW5kb3cpID09IG51bGwgPyB2b2lkIDAgOiBfYS5sb2NhdGlvbi5yZXBsYWNlKFwiYWJvdXQ6YmxhbmtcIik7XG4gICAgICB9XG4gICAgICB0aGlzLl9mcmFtZSA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuX3dpbmRvdyA9IG51bGw7XG4gIH1cbiAgc3RhdGljIG5vdGlmeVBhcmVudCh1cmwsIHRhcmdldE9yaWdpbikge1xuICAgIHJldHVybiBzdXBlci5fbm90aWZ5UGFyZW50KHdpbmRvdy5wYXJlbnQsIHVybCwgZmFsc2UsIHRhcmdldE9yaWdpbik7XG4gIH1cbn07XG5cbi8vIHNyYy9uYXZpZ2F0b3JzL0lGcmFtZU5hdmlnYXRvci50c1xudmFyIElGcmFtZU5hdmlnYXRvciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3NldHRpbmdzKSB7XG4gICAgdGhpcy5fc2V0dGluZ3MgPSBfc2V0dGluZ3M7XG4gICAgdGhpcy5fbG9nZ2VyID0gbmV3IExvZ2dlcihcIklGcmFtZU5hdmlnYXRvclwiKTtcbiAgfVxuICBhc3luYyBwcmVwYXJlKHtcbiAgICBzaWxlbnRSZXF1ZXN0VGltZW91dEluU2Vjb25kcyA9IHRoaXMuX3NldHRpbmdzLnNpbGVudFJlcXVlc3RUaW1lb3V0SW5TZWNvbmRzXG4gIH0pIHtcbiAgICByZXR1cm4gbmV3IElGcmFtZVdpbmRvdyh7IHNpbGVudFJlcXVlc3RUaW1lb3V0SW5TZWNvbmRzIH0pO1xuICB9XG4gIGFzeW5jIGNhbGxiYWNrKHVybCkge1xuICAgIHRoaXMuX2xvZ2dlci5jcmVhdGUoXCJjYWxsYmFja1wiKTtcbiAgICBJRnJhbWVXaW5kb3cubm90aWZ5UGFyZW50KHVybCwgdGhpcy5fc2V0dGluZ3MuaWZyYW1lTm90aWZ5UGFyZW50T3JpZ2luKTtcbiAgfVxufTtcblxuLy8gc3JjL25hdmlnYXRvcnMvUG9wdXBXaW5kb3cudHNcbnZhciBjaGVja0ZvclBvcHVwQ2xvc2VkSW50ZXJ2YWwgPSA1MDA7XG52YXIgc2Vjb25kID0gMWUzO1xudmFyIFBvcHVwV2luZG93ID0gY2xhc3MgZXh0ZW5kcyBBYnN0cmFjdENoaWxkV2luZG93IHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIHBvcHVwV2luZG93VGFyZ2V0ID0gRGVmYXVsdFBvcHVwVGFyZ2V0LFxuICAgIHBvcHVwV2luZG93RmVhdHVyZXMgPSB7fSxcbiAgICBwb3B1cFNpZ25hbFxuICB9KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9sb2dnZXIgPSBuZXcgTG9nZ2VyKFwiUG9wdXBXaW5kb3dcIik7XG4gICAgY29uc3QgY2VudGVyZWRQb3B1cCA9IFBvcHVwVXRpbHMuY2VudGVyKHsgLi4uRGVmYXVsdFBvcHVwV2luZG93RmVhdHVyZXMsIC4uLnBvcHVwV2luZG93RmVhdHVyZXMgfSk7XG4gICAgdGhpcy5fd2luZG93ID0gd2luZG93Lm9wZW4odm9pZCAwLCBwb3B1cFdpbmRvd1RhcmdldCwgUG9wdXBVdGlscy5zZXJpYWxpemUoY2VudGVyZWRQb3B1cCkpO1xuICAgIGlmIChwb3B1cFNpZ25hbCkge1xuICAgICAgcG9wdXBTaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsICgpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2b2lkIHRoaXMuX2Fib3J0LnJhaXNlKG5ldyBFcnJvcigoX2EgPSBwb3B1cFNpZ25hbC5yZWFzb24pICE9IG51bGwgPyBfYSA6IFwiUG9wdXAgYWJvcnRlZFwiKSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHBvcHVwV2luZG93RmVhdHVyZXMuY2xvc2VQb3B1cFdpbmRvd0FmdGVySW5TZWNvbmRzICYmIHBvcHVwV2luZG93RmVhdHVyZXMuY2xvc2VQb3B1cFdpbmRvd0FmdGVySW5TZWNvbmRzID4gMCkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5fd2luZG93IHx8IHR5cGVvZiB0aGlzLl93aW5kb3cuY2xvc2VkICE9PSBcImJvb2xlYW5cIiB8fCB0aGlzLl93aW5kb3cuY2xvc2VkKSB7XG4gICAgICAgICAgdm9pZCB0aGlzLl9hYm9ydC5yYWlzZShuZXcgRXJyb3IoXCJQb3B1cCBibG9ja2VkIGJ5IHVzZXJcIikpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICB9LCBwb3B1cFdpbmRvd0ZlYXR1cmVzLmNsb3NlUG9wdXBXaW5kb3dBZnRlckluU2Vjb25kcyAqIHNlY29uZCk7XG4gICAgfVxuICB9XG4gIGFzeW5jIG5hdmlnYXRlKHBhcmFtcykge1xuICAgIHZhciBfYTtcbiAgICAoX2EgPSB0aGlzLl93aW5kb3cpID09IG51bGwgPyB2b2lkIDAgOiBfYS5mb2N1cygpO1xuICAgIGNvbnN0IHBvcHVwQ2xvc2VkSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuX3dpbmRvdyB8fCB0aGlzLl93aW5kb3cuY2xvc2VkKSB7XG4gICAgICAgIHZvaWQgdGhpcy5fYWJvcnQucmFpc2UobmV3IEVycm9yKFwiUG9wdXAgY2xvc2VkIGJ5IHVzZXJcIikpO1xuICAgICAgfVxuICAgIH0sIGNoZWNrRm9yUG9wdXBDbG9zZWRJbnRlcnZhbCk7XG4gICAgdGhpcy5fZGlzcG9zZUhhbmRsZXJzLmFkZCgoKSA9PiBjbGVhckludGVydmFsKHBvcHVwQ2xvc2VkSW50ZXJ2YWwpKTtcbiAgICByZXR1cm4gYXdhaXQgc3VwZXIubmF2aWdhdGUocGFyYW1zKTtcbiAgfVxuICBjbG9zZSgpIHtcbiAgICBpZiAodGhpcy5fd2luZG93KSB7XG4gICAgICBpZiAoIXRoaXMuX3dpbmRvdy5jbG9zZWQpIHtcbiAgICAgICAgdGhpcy5fd2luZG93LmNsb3NlKCk7XG4gICAgICAgIHZvaWQgdGhpcy5fYWJvcnQucmFpc2UobmV3IEVycm9yKFwiUG9wdXAgY2xvc2VkXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fd2luZG93ID0gbnVsbDtcbiAgfVxuICBzdGF0aWMgbm90aWZ5T3BlbmVyKHVybCwga2VlcE9wZW4pIHtcbiAgICBpZiAoIXdpbmRvdy5vcGVuZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHdpbmRvdy5vcGVuZXIuIENhbid0IGNvbXBsZXRlIG5vdGlmaWNhdGlvbi5cIik7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5fbm90aWZ5UGFyZW50KHdpbmRvdy5vcGVuZXIsIHVybCwga2VlcE9wZW4pO1xuICB9XG59O1xuXG4vLyBzcmMvbmF2aWdhdG9ycy9Qb3B1cE5hdmlnYXRvci50c1xudmFyIFBvcHVwTmF2aWdhdG9yID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihfc2V0dGluZ3MpIHtcbiAgICB0aGlzLl9zZXR0aW5ncyA9IF9zZXR0aW5ncztcbiAgICB0aGlzLl9sb2dnZXIgPSBuZXcgTG9nZ2VyKFwiUG9wdXBOYXZpZ2F0b3JcIik7XG4gIH1cbiAgYXN5bmMgcHJlcGFyZSh7XG4gICAgcG9wdXBXaW5kb3dGZWF0dXJlcyA9IHRoaXMuX3NldHRpbmdzLnBvcHVwV2luZG93RmVhdHVyZXMsXG4gICAgcG9wdXBXaW5kb3dUYXJnZXQgPSB0aGlzLl9zZXR0aW5ncy5wb3B1cFdpbmRvd1RhcmdldCxcbiAgICBwb3B1cFNpZ25hbFxuICB9KSB7XG4gICAgcmV0dXJuIG5ldyBQb3B1cFdpbmRvdyh7IHBvcHVwV2luZG93RmVhdHVyZXMsIHBvcHVwV2luZG93VGFyZ2V0LCBwb3B1cFNpZ25hbCB9KTtcbiAgfVxuICBhc3luYyBjYWxsYmFjayh1cmwsIHsga2VlcE9wZW4gPSBmYWxzZSB9KSB7XG4gICAgdGhpcy5fbG9nZ2VyLmNyZWF0ZShcImNhbGxiYWNrXCIpO1xuICAgIFBvcHVwV2luZG93Lm5vdGlmeU9wZW5lcih1cmwsIGtlZXBPcGVuKTtcbiAgfVxufTtcblxuLy8gc3JjL25hdmlnYXRvcnMvUmVkaXJlY3ROYXZpZ2F0b3IudHNcbnZhciBSZWRpcmVjdE5hdmlnYXRvciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3NldHRpbmdzKSB7XG4gICAgdGhpcy5fc2V0dGluZ3MgPSBfc2V0dGluZ3M7XG4gICAgdGhpcy5fbG9nZ2VyID0gbmV3IExvZ2dlcihcIlJlZGlyZWN0TmF2aWdhdG9yXCIpO1xuICB9XG4gIGFzeW5jIHByZXBhcmUoe1xuICAgIHJlZGlyZWN0TWV0aG9kID0gdGhpcy5fc2V0dGluZ3MucmVkaXJlY3RNZXRob2QsXG4gICAgcmVkaXJlY3RUYXJnZXQgPSB0aGlzLl9zZXR0aW5ncy5yZWRpcmVjdFRhcmdldFxuICB9KSB7XG4gICAgdmFyIF9hO1xuICAgIHRoaXMuX2xvZ2dlci5jcmVhdGUoXCJwcmVwYXJlXCIpO1xuICAgIGxldCB0YXJnZXRXaW5kb3cgPSB3aW5kb3cuc2VsZjtcbiAgICBpZiAocmVkaXJlY3RUYXJnZXQgPT09IFwidG9wXCIpIHtcbiAgICAgIHRhcmdldFdpbmRvdyA9IChfYSA9IHdpbmRvdy50b3ApICE9IG51bGwgPyBfYSA6IHdpbmRvdy5zZWxmO1xuICAgIH1cbiAgICBjb25zdCByZWRpcmVjdCA9IHRhcmdldFdpbmRvdy5sb2NhdGlvbltyZWRpcmVjdE1ldGhvZF0uYmluZCh0YXJnZXRXaW5kb3cubG9jYXRpb24pO1xuICAgIGxldCBhYm9ydDtcbiAgICByZXR1cm4ge1xuICAgICAgbmF2aWdhdGU6IGFzeW5jIChwYXJhbXMpID0+IHtcbiAgICAgICAgdGhpcy5fbG9nZ2VyLmNyZWF0ZShcIm5hdmlnYXRlXCIpO1xuICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIGFib3J0ID0gcmVqZWN0O1xuICAgICAgICB9KTtcbiAgICAgICAgcmVkaXJlY3QocGFyYW1zLnVybCk7XG4gICAgICAgIHJldHVybiBhd2FpdCBwcm9taXNlO1xuICAgICAgfSxcbiAgICAgIGNsb3NlOiAoKSA9PiB7XG4gICAgICAgIHRoaXMuX2xvZ2dlci5jcmVhdGUoXCJjbG9zZVwiKTtcbiAgICAgICAgYWJvcnQgPT0gbnVsbCA/IHZvaWQgMCA6IGFib3J0KG5ldyBFcnJvcihcIlJlZGlyZWN0IGFib3J0ZWRcIikpO1xuICAgICAgICB0YXJnZXRXaW5kb3cuc3RvcCgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgYXN5bmMgY2FsbGJhY2soKSB7XG4gICAgcmV0dXJuO1xuICB9XG59O1xuXG4vLyBzcmMvVXNlck1hbmFnZXJFdmVudHMudHNcbnZhciBVc2VyTWFuYWdlckV2ZW50cyA9IGNsYXNzIGV4dGVuZHMgQWNjZXNzVG9rZW5FdmVudHMge1xuICBjb25zdHJ1Y3RvcihzZXR0aW5ncykge1xuICAgIHN1cGVyKHsgZXhwaXJpbmdOb3RpZmljYXRpb25UaW1lSW5TZWNvbmRzOiBzZXR0aW5ncy5hY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZUluU2Vjb25kcyB9KTtcbiAgICB0aGlzLl9sb2dnZXIgPSBuZXcgTG9nZ2VyKFwiVXNlck1hbmFnZXJFdmVudHNcIik7XG4gICAgdGhpcy5fdXNlckxvYWRlZCA9IG5ldyBFdmVudChcIlVzZXIgbG9hZGVkXCIpO1xuICAgIHRoaXMuX3VzZXJVbmxvYWRlZCA9IG5ldyBFdmVudChcIlVzZXIgdW5sb2FkZWRcIik7XG4gICAgdGhpcy5fc2lsZW50UmVuZXdFcnJvciA9IG5ldyBFdmVudChcIlNpbGVudCByZW5ldyBlcnJvclwiKTtcbiAgICB0aGlzLl91c2VyU2lnbmVkSW4gPSBuZXcgRXZlbnQoXCJVc2VyIHNpZ25lZCBpblwiKTtcbiAgICB0aGlzLl91c2VyU2lnbmVkT3V0ID0gbmV3IEV2ZW50KFwiVXNlciBzaWduZWQgb3V0XCIpO1xuICAgIHRoaXMuX3VzZXJTZXNzaW9uQ2hhbmdlZCA9IG5ldyBFdmVudChcIlVzZXIgc2Vzc2lvbiBjaGFuZ2VkXCIpO1xuICB9XG4gIGFzeW5jIGxvYWQodXNlciwgcmFpc2VFdmVudCA9IHRydWUpIHtcbiAgICBhd2FpdCBzdXBlci5sb2FkKHVzZXIpO1xuICAgIGlmIChyYWlzZUV2ZW50KSB7XG4gICAgICBhd2FpdCB0aGlzLl91c2VyTG9hZGVkLnJhaXNlKHVzZXIpO1xuICAgIH1cbiAgfVxuICBhc3luYyB1bmxvYWQoKSB7XG4gICAgYXdhaXQgc3VwZXIudW5sb2FkKCk7XG4gICAgYXdhaXQgdGhpcy5fdXNlclVubG9hZGVkLnJhaXNlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBjYWxsYmFjazogUmFpc2VkIHdoZW4gYSB1c2VyIHNlc3Npb24gaGFzIGJlZW4gZXN0YWJsaXNoZWQgKG9yIHJlLWVzdGFibGlzaGVkKS5cbiAgICovXG4gIGFkZFVzZXJMb2FkZWQoY2IpIHtcbiAgICByZXR1cm4gdGhpcy5fdXNlckxvYWRlZC5hZGRIYW5kbGVyKGNiKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGNhbGxiYWNrOiBSYWlzZWQgd2hlbiBhIHVzZXIgc2Vzc2lvbiBoYXMgYmVlbiBlc3RhYmxpc2hlZCAob3IgcmUtZXN0YWJsaXNoZWQpLlxuICAgKi9cbiAgcmVtb3ZlVXNlckxvYWRlZChjYikge1xuICAgIHJldHVybiB0aGlzLl91c2VyTG9hZGVkLnJlbW92ZUhhbmRsZXIoY2IpO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgY2FsbGJhY2s6IFJhaXNlZCB3aGVuIGEgdXNlciBzZXNzaW9uIGhhcyBiZWVuIHRlcm1pbmF0ZWQuXG4gICAqL1xuICBhZGRVc2VyVW5sb2FkZWQoY2IpIHtcbiAgICByZXR1cm4gdGhpcy5fdXNlclVubG9hZGVkLmFkZEhhbmRsZXIoY2IpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgY2FsbGJhY2s6IFJhaXNlZCB3aGVuIGEgdXNlciBzZXNzaW9uIGhhcyBiZWVuIHRlcm1pbmF0ZWQuXG4gICAqL1xuICByZW1vdmVVc2VyVW5sb2FkZWQoY2IpIHtcbiAgICByZXR1cm4gdGhpcy5fdXNlclVubG9hZGVkLnJlbW92ZUhhbmRsZXIoY2IpO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgY2FsbGJhY2s6IFJhaXNlZCB3aGVuIHRoZSBhdXRvbWF0aWMgc2lsZW50IHJlbmV3IGhhcyBmYWlsZWQuXG4gICAqL1xuICBhZGRTaWxlbnRSZW5ld0Vycm9yKGNiKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NpbGVudFJlbmV3RXJyb3IuYWRkSGFuZGxlcihjYik7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBjYWxsYmFjazogUmFpc2VkIHdoZW4gdGhlIGF1dG9tYXRpYyBzaWxlbnQgcmVuZXcgaGFzIGZhaWxlZC5cbiAgICovXG4gIHJlbW92ZVNpbGVudFJlbmV3RXJyb3IoY2IpIHtcbiAgICByZXR1cm4gdGhpcy5fc2lsZW50UmVuZXdFcnJvci5yZW1vdmVIYW5kbGVyKGNiKTtcbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBhc3luYyBfcmFpc2VTaWxlbnRSZW5ld0Vycm9yKGUpIHtcbiAgICBhd2FpdCB0aGlzLl9zaWxlbnRSZW5ld0Vycm9yLnJhaXNlKGUpO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgY2FsbGJhY2s6IFJhaXNlZCB3aGVuIHRoZSB1c2VyIGlzIHNpZ25lZCBpbiAod2hlbiBgbW9uaXRvclNlc3Npb25gIGlzIHNldCkuXG4gICAqIEBzZWUge0BsaW5rIFVzZXJNYW5hZ2VyU2V0dGluZ3MubW9uaXRvclNlc3Npb259XG4gICAqL1xuICBhZGRVc2VyU2lnbmVkSW4oY2IpIHtcbiAgICByZXR1cm4gdGhpcy5fdXNlclNpZ25lZEluLmFkZEhhbmRsZXIoY2IpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgY2FsbGJhY2s6IFJhaXNlZCB3aGVuIHRoZSB1c2VyIGlzIHNpZ25lZCBpbiAod2hlbiBgbW9uaXRvclNlc3Npb25gIGlzIHNldCkuXG4gICAqL1xuICByZW1vdmVVc2VyU2lnbmVkSW4oY2IpIHtcbiAgICB0aGlzLl91c2VyU2lnbmVkSW4ucmVtb3ZlSGFuZGxlcihjYik7XG4gIH1cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgYXN5bmMgX3JhaXNlVXNlclNpZ25lZEluKCkge1xuICAgIGF3YWl0IHRoaXMuX3VzZXJTaWduZWRJbi5yYWlzZSgpO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgY2FsbGJhY2s6IFJhaXNlZCB3aGVuIHRoZSB1c2VyJ3Mgc2lnbi1pbiBzdGF0dXMgYXQgdGhlIE9QIGhhcyBjaGFuZ2VkICh3aGVuIGBtb25pdG9yU2Vzc2lvbmAgaXMgc2V0KS5cbiAgICogQHNlZSB7QGxpbmsgVXNlck1hbmFnZXJTZXR0aW5ncy5tb25pdG9yU2Vzc2lvbn1cbiAgICovXG4gIGFkZFVzZXJTaWduZWRPdXQoY2IpIHtcbiAgICByZXR1cm4gdGhpcy5fdXNlclNpZ25lZE91dC5hZGRIYW5kbGVyKGNiKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGNhbGxiYWNrOiBSYWlzZWQgd2hlbiB0aGUgdXNlcidzIHNpZ24taW4gc3RhdHVzIGF0IHRoZSBPUCBoYXMgY2hhbmdlZCAod2hlbiBgbW9uaXRvclNlc3Npb25gIGlzIHNldCkuXG4gICAqL1xuICByZW1vdmVVc2VyU2lnbmVkT3V0KGNiKSB7XG4gICAgdGhpcy5fdXNlclNpZ25lZE91dC5yZW1vdmVIYW5kbGVyKGNiKTtcbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBhc3luYyBfcmFpc2VVc2VyU2lnbmVkT3V0KCkge1xuICAgIGF3YWl0IHRoaXMuX3VzZXJTaWduZWRPdXQucmFpc2UoKTtcbiAgfVxuICAvKipcbiAgICogQWRkIGNhbGxiYWNrOiBSYWlzZWQgd2hlbiB0aGUgdXNlciBzZXNzaW9uIGNoYW5nZWQgKHdoZW4gYG1vbml0b3JTZXNzaW9uYCBpcyBzZXQpLlxuICAgKiBAc2VlIHtAbGluayBVc2VyTWFuYWdlclNldHRpbmdzLm1vbml0b3JTZXNzaW9ufVxuICAgKi9cbiAgYWRkVXNlclNlc3Npb25DaGFuZ2VkKGNiKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VzZXJTZXNzaW9uQ2hhbmdlZC5hZGRIYW5kbGVyKGNiKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGNhbGxiYWNrOiBSYWlzZWQgd2hlbiB0aGUgdXNlciBzZXNzaW9uIGNoYW5nZWQgKHdoZW4gYG1vbml0b3JTZXNzaW9uYCBpcyBzZXQpLlxuICAgKi9cbiAgcmVtb3ZlVXNlclNlc3Npb25DaGFuZ2VkKGNiKSB7XG4gICAgdGhpcy5fdXNlclNlc3Npb25DaGFuZ2VkLnJlbW92ZUhhbmRsZXIoY2IpO1xuICB9XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGFzeW5jIF9yYWlzZVVzZXJTZXNzaW9uQ2hhbmdlZCgpIHtcbiAgICBhd2FpdCB0aGlzLl91c2VyU2Vzc2lvbkNoYW5nZWQucmFpc2UoKTtcbiAgfVxufTtcblxuLy8gc3JjL1NpbGVudFJlbmV3U2VydmljZS50c1xudmFyIFNpbGVudFJlbmV3U2VydmljZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3VzZXJNYW5hZ2VyKSB7XG4gICAgdGhpcy5fdXNlck1hbmFnZXIgPSBfdXNlck1hbmFnZXI7XG4gICAgdGhpcy5fbG9nZ2VyID0gbmV3IExvZ2dlcihcIlNpbGVudFJlbmV3U2VydmljZVwiKTtcbiAgICB0aGlzLl9pc1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZXRyeVRpbWVyID0gbmV3IFRpbWVyKFwiUmV0cnkgU2lsZW50IFJlbmV3XCIpO1xuICAgIHRoaXMuX3Rva2VuRXhwaXJpbmcgPSBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcIl90b2tlbkV4cGlyaW5nXCIpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdGhpcy5fdXNlck1hbmFnZXIuc2lnbmluU2lsZW50KCk7XG4gICAgICAgIGxvZ2dlcjIuZGVidWcoXCJzaWxlbnQgdG9rZW4gcmVuZXdhbCBzdWNjZXNzZnVsXCIpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvclRpbWVvdXQpIHtcbiAgICAgICAgICBsb2dnZXIyLndhcm4oXCJFcnJvclRpbWVvdXQgZnJvbSBzaWduaW5TaWxlbnQ6XCIsIGVyciwgXCJyZXRyeSBpbiA1c1wiKTtcbiAgICAgICAgICB0aGlzLl9yZXRyeVRpbWVyLmluaXQoNSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlcjIuZXJyb3IoXCJFcnJvciBmcm9tIHNpZ25pblNpbGVudDpcIiwgZXJyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLl9yYWlzZVNpbGVudFJlbmV3RXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGFzeW5jIHN0YXJ0KCkge1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwic3RhcnRcIik7XG4gICAgaWYgKCF0aGlzLl9pc1N0YXJ0ZWQpIHtcbiAgICAgIHRoaXMuX2lzU3RhcnRlZCA9IHRydWU7XG4gICAgICB0aGlzLl91c2VyTWFuYWdlci5ldmVudHMuYWRkQWNjZXNzVG9rZW5FeHBpcmluZyh0aGlzLl90b2tlbkV4cGlyaW5nKTtcbiAgICAgIHRoaXMuX3JldHJ5VGltZXIuYWRkSGFuZGxlcih0aGlzLl90b2tlbkV4cGlyaW5nKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHRoaXMuX3VzZXJNYW5hZ2VyLmdldFVzZXIoKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBsb2dnZXIyLmVycm9yKFwiZ2V0VXNlciBlcnJvclwiLCBlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBzdG9wKCkge1xuICAgIGlmICh0aGlzLl9pc1N0YXJ0ZWQpIHtcbiAgICAgIHRoaXMuX3JldHJ5VGltZXIuY2FuY2VsKCk7XG4gICAgICB0aGlzLl9yZXRyeVRpbWVyLnJlbW92ZUhhbmRsZXIodGhpcy5fdG9rZW5FeHBpcmluZyk7XG4gICAgICB0aGlzLl91c2VyTWFuYWdlci5ldmVudHMucmVtb3ZlQWNjZXNzVG9rZW5FeHBpcmluZyh0aGlzLl90b2tlbkV4cGlyaW5nKTtcbiAgICAgIHRoaXMuX2lzU3RhcnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxufTtcblxuLy8gc3JjL1JlZnJlc2hTdGF0ZS50c1xudmFyIFJlZnJlc2hTdGF0ZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoYXJncykge1xuICAgIHRoaXMucmVmcmVzaF90b2tlbiA9IGFyZ3MucmVmcmVzaF90b2tlbjtcbiAgICB0aGlzLmlkX3Rva2VuID0gYXJncy5pZF90b2tlbjtcbiAgICB0aGlzLnNlc3Npb25fc3RhdGUgPSBhcmdzLnNlc3Npb25fc3RhdGU7XG4gICAgdGhpcy5zY29wZSA9IGFyZ3Muc2NvcGU7XG4gICAgdGhpcy5wcm9maWxlID0gYXJncy5wcm9maWxlO1xuICAgIHRoaXMuZGF0YSA9IGFyZ3Muc3RhdGU7XG4gIH1cbn07XG5cbi8vIHNyYy9Vc2VyTWFuYWdlci50c1xudmFyIFVzZXJNYW5hZ2VyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihzZXR0aW5ncywgcmVkaXJlY3ROYXZpZ2F0b3IsIHBvcHVwTmF2aWdhdG9yLCBpZnJhbWVOYXZpZ2F0b3IpIHtcbiAgICB0aGlzLl9sb2dnZXIgPSBuZXcgTG9nZ2VyKFwiVXNlck1hbmFnZXJcIik7XG4gICAgdGhpcy5zZXR0aW5ncyA9IG5ldyBVc2VyTWFuYWdlclNldHRpbmdzU3RvcmUoc2V0dGluZ3MpO1xuICAgIHRoaXMuX2NsaWVudCA9IG5ldyBPaWRjQ2xpZW50KHNldHRpbmdzKTtcbiAgICB0aGlzLl9yZWRpcmVjdE5hdmlnYXRvciA9IHJlZGlyZWN0TmF2aWdhdG9yICE9IG51bGwgPyByZWRpcmVjdE5hdmlnYXRvciA6IG5ldyBSZWRpcmVjdE5hdmlnYXRvcih0aGlzLnNldHRpbmdzKTtcbiAgICB0aGlzLl9wb3B1cE5hdmlnYXRvciA9IHBvcHVwTmF2aWdhdG9yICE9IG51bGwgPyBwb3B1cE5hdmlnYXRvciA6IG5ldyBQb3B1cE5hdmlnYXRvcih0aGlzLnNldHRpbmdzKTtcbiAgICB0aGlzLl9pZnJhbWVOYXZpZ2F0b3IgPSBpZnJhbWVOYXZpZ2F0b3IgIT0gbnVsbCA/IGlmcmFtZU5hdmlnYXRvciA6IG5ldyBJRnJhbWVOYXZpZ2F0b3IodGhpcy5zZXR0aW5ncyk7XG4gICAgdGhpcy5fZXZlbnRzID0gbmV3IFVzZXJNYW5hZ2VyRXZlbnRzKHRoaXMuc2V0dGluZ3MpO1xuICAgIHRoaXMuX3NpbGVudFJlbmV3U2VydmljZSA9IG5ldyBTaWxlbnRSZW5ld1NlcnZpY2UodGhpcyk7XG4gICAgaWYgKHRoaXMuc2V0dGluZ3MuYXV0b21hdGljU2lsZW50UmVuZXcpIHtcbiAgICAgIHRoaXMuc3RhcnRTaWxlbnRSZW5ldygpO1xuICAgIH1cbiAgICB0aGlzLl9zZXNzaW9uTW9uaXRvciA9IG51bGw7XG4gICAgaWYgKHRoaXMuc2V0dGluZ3MubW9uaXRvclNlc3Npb24pIHtcbiAgICAgIHRoaXMuX3Nlc3Npb25Nb25pdG9yID0gbmV3IFNlc3Npb25Nb25pdG9yKHRoaXMpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogR2V0IG9iamVjdCB1c2VkIHRvIHJlZ2lzdGVyIGZvciBldmVudHMgcmFpc2VkIGJ5IHRoZSBgVXNlck1hbmFnZXJgLlxuICAgKi9cbiAgZ2V0IGV2ZW50cygpIHtcbiAgICByZXR1cm4gdGhpcy5fZXZlbnRzO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgb2JqZWN0IHVzZWQgdG8gYWNjZXNzIHRoZSBtZXRhZGF0YSBjb25maWd1cmF0aW9uIG9mIHRoZSBpZGVudGl0eSBwcm92aWRlci5cbiAgICovXG4gIGdldCBtZXRhZGF0YVNlcnZpY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5tZXRhZGF0YVNlcnZpY2U7XG4gIH1cbiAgLyoqXG4gICAqIExvYWQgdGhlIGBVc2VyYCBvYmplY3QgZm9yIHRoZSBjdXJyZW50bHkgYXV0aGVudGljYXRlZCB1c2VyLlxuICAgKlxuICAgKiBAcGFyYW0gcmFpc2VFdmVudCAtIElmIGB0cnVlYCwgdGhlIGBVc2VyTG9hZGVkYCBldmVudCB3aWxsIGJlIHJhaXNlZC4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZVxuICAgKi9cbiAgYXN5bmMgZ2V0VXNlcihyYWlzZUV2ZW50ID0gZmFsc2UpIHtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcImdldFVzZXJcIik7XG4gICAgY29uc3QgdXNlciA9IGF3YWl0IHRoaXMuX2xvYWRVc2VyKCk7XG4gICAgaWYgKHVzZXIpIHtcbiAgICAgIGxvZ2dlcjIuaW5mbyhcInVzZXIgbG9hZGVkXCIpO1xuICAgICAgYXdhaXQgdGhpcy5fZXZlbnRzLmxvYWQodXNlciwgcmFpc2VFdmVudCk7XG4gICAgICByZXR1cm4gdXNlcjtcbiAgICB9XG4gICAgbG9nZ2VyMi5pbmZvKFwidXNlciBub3QgZm91bmQgaW4gc3RvcmFnZVwiKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGZyb20gYW55IHN0b3JhZ2UgdGhlIGN1cnJlbnRseSBhdXRoZW50aWNhdGVkIHVzZXIuXG4gICAqXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZVxuICAgKi9cbiAgYXN5bmMgcmVtb3ZlVXNlcigpIHtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcInJlbW92ZVVzZXJcIik7XG4gICAgYXdhaXQgdGhpcy5zdG9yZVVzZXIobnVsbCk7XG4gICAgbG9nZ2VyMi5pbmZvKFwidXNlciByZW1vdmVkIGZyb20gc3RvcmFnZVwiKTtcbiAgICBhd2FpdCB0aGlzLl9ldmVudHMudW5sb2FkKCk7XG4gIH1cbiAgLyoqXG4gICAqIFRyaWdnZXIgYSByZWRpcmVjdCBvZiB0aGUgY3VycmVudCB3aW5kb3cgdG8gdGhlIGF1dGhvcml6YXRpb24gZW5kcG9pbnQuXG4gICAqXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZVxuICAgKlxuICAgKiBAdGhyb3dzIGBFcnJvcmAgSW4gY2FzZXMgb2Ygd3JvbmcgYXV0aGVudGljYXRpb24uXG4gICAqL1xuICBhc3luYyBzaWduaW5SZWRpcmVjdChhcmdzID0ge30pIHtcbiAgICB2YXIgX2E7XG4gICAgdGhpcy5fbG9nZ2VyLmNyZWF0ZShcInNpZ25pblJlZGlyZWN0XCIpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJlZGlyZWN0TWV0aG9kLFxuICAgICAgLi4ucmVxdWVzdEFyZ3NcbiAgICB9ID0gYXJncztcbiAgICBsZXQgZHBvcEprdDtcbiAgICBpZiAoKF9hID0gdGhpcy5zZXR0aW5ncy5kcG9wKSA9PSBudWxsID8gdm9pZCAwIDogX2EuYmluZF9hdXRob3JpemF0aW9uX2NvZGUpIHtcbiAgICAgIGRwb3BKa3QgPSBhd2FpdCB0aGlzLmdlbmVyYXRlRFBvUEprdCh0aGlzLnNldHRpbmdzLmRwb3ApO1xuICAgIH1cbiAgICBjb25zdCBoYW5kbGUgPSBhd2FpdCB0aGlzLl9yZWRpcmVjdE5hdmlnYXRvci5wcmVwYXJlKHsgcmVkaXJlY3RNZXRob2QgfSk7XG4gICAgYXdhaXQgdGhpcy5fc2lnbmluU3RhcnQoe1xuICAgICAgcmVxdWVzdF90eXBlOiBcInNpOnJcIixcbiAgICAgIGRwb3BKa3QsXG4gICAgICAuLi5yZXF1ZXN0QXJnc1xuICAgIH0sIGhhbmRsZSk7XG4gIH1cbiAgLyoqXG4gICAqIFByb2Nlc3MgdGhlIHJlc3BvbnNlIChjYWxsYmFjaykgZnJvbSB0aGUgYXV0aG9yaXphdGlvbiBlbmRwb2ludC5cbiAgICogSXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHtAbGluayBVc2VyTWFuYWdlci5zaWduaW5DYWxsYmFja30gaW5zdGVhZC5cbiAgICpcbiAgICogQHJldHVybnMgQSBwcm9taXNlIGNvbnRhaW5pbmcgdGhlIGF1dGhlbnRpY2F0ZWQgYFVzZXJgLlxuICAgKlxuICAgKiBAc2VlIHtAbGluayBVc2VyTWFuYWdlci5zaWduaW5DYWxsYmFja31cbiAgICovXG4gIGFzeW5jIHNpZ25pblJlZGlyZWN0Q2FsbGJhY2sodXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWYpIHtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcInNpZ25pblJlZGlyZWN0Q2FsbGJhY2tcIik7XG4gICAgY29uc3QgdXNlciA9IGF3YWl0IHRoaXMuX3NpZ25pbkVuZCh1cmwpO1xuICAgIGlmICh1c2VyLnByb2ZpbGUgJiYgdXNlci5wcm9maWxlLnN1Yikge1xuICAgICAgbG9nZ2VyMi5pbmZvKFwic3VjY2Vzcywgc2lnbmVkIGluIHN1YmplY3RcIiwgdXNlci5wcm9maWxlLnN1Yik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ2dlcjIuaW5mbyhcIm5vIHN1YmplY3RcIik7XG4gICAgfVxuICAgIHJldHVybiB1c2VyO1xuICB9XG4gIC8qKlxuICAgKiBUcmlnZ2VyIHRoZSBzaWduaW4gd2l0aCB1c2VyL3Bhc3N3b3JkLlxuICAgKlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgY29udGFpbmluZyB0aGUgYXV0aGVudGljYXRlZCBgVXNlcmAuXG4gICAqIEB0aHJvd3Mge0BsaW5rIEVycm9yUmVzcG9uc2V9IEluIGNhc2VzIG9mIHdyb25nIGF1dGhlbnRpY2F0aW9uLlxuICAgKi9cbiAgYXN5bmMgc2lnbmluUmVzb3VyY2VPd25lckNyZWRlbnRpYWxzKHtcbiAgICB1c2VybmFtZSxcbiAgICBwYXNzd29yZCxcbiAgICBza2lwVXNlckluZm8gPSBmYWxzZVxuICB9KSB7XG4gICAgY29uc3QgbG9nZ2VyMiA9IHRoaXMuX2xvZ2dlci5jcmVhdGUoXCJzaWduaW5SZXNvdXJjZU93bmVyQ3JlZGVudGlhbFwiKTtcbiAgICBjb25zdCBzaWduaW5SZXNwb25zZSA9IGF3YWl0IHRoaXMuX2NsaWVudC5wcm9jZXNzUmVzb3VyY2VPd25lclBhc3N3b3JkQ3JlZGVudGlhbHMoe1xuICAgICAgdXNlcm5hbWUsXG4gICAgICBwYXNzd29yZCxcbiAgICAgIHNraXBVc2VySW5mbyxcbiAgICAgIGV4dHJhVG9rZW5QYXJhbXM6IHRoaXMuc2V0dGluZ3MuZXh0cmFUb2tlblBhcmFtc1xuICAgIH0pO1xuICAgIGxvZ2dlcjIuZGVidWcoXCJnb3Qgc2lnbmluIHJlc3BvbnNlXCIpO1xuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCB0aGlzLl9idWlsZFVzZXIoc2lnbmluUmVzcG9uc2UpO1xuICAgIGlmICh1c2VyLnByb2ZpbGUgJiYgdXNlci5wcm9maWxlLnN1Yikge1xuICAgICAgbG9nZ2VyMi5pbmZvKFwic3VjY2Vzcywgc2lnbmVkIGluIHN1YmplY3RcIiwgdXNlci5wcm9maWxlLnN1Yik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ2dlcjIuaW5mbyhcIm5vIHN1YmplY3RcIik7XG4gICAgfVxuICAgIHJldHVybiB1c2VyO1xuICB9XG4gIC8qKlxuICAgKiBUcmlnZ2VyIGEgcmVxdWVzdCAodmlhIGEgcG9wdXAgd2luZG93KSB0byB0aGUgYXV0aG9yaXphdGlvbiBlbmRwb2ludC5cbiAgICpcbiAgICogQHJldHVybnMgQSBwcm9taXNlIGNvbnRhaW5pbmcgdGhlIGF1dGhlbnRpY2F0ZWQgYFVzZXJgLlxuICAgKiBAdGhyb3dzIGBFcnJvcmAgSW4gY2FzZXMgb2Ygd3JvbmcgYXV0aGVudGljYXRpb24uXG4gICAqL1xuICBhc3luYyBzaWduaW5Qb3B1cChhcmdzID0ge30pIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgbG9nZ2VyMiA9IHRoaXMuX2xvZ2dlci5jcmVhdGUoXCJzaWduaW5Qb3B1cFwiKTtcbiAgICBsZXQgZHBvcEprdDtcbiAgICBpZiAoKF9hID0gdGhpcy5zZXR0aW5ncy5kcG9wKSA9PSBudWxsID8gdm9pZCAwIDogX2EuYmluZF9hdXRob3JpemF0aW9uX2NvZGUpIHtcbiAgICAgIGRwb3BKa3QgPSBhd2FpdCB0aGlzLmdlbmVyYXRlRFBvUEprdCh0aGlzLnNldHRpbmdzLmRwb3ApO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBwb3B1cFdpbmRvd0ZlYXR1cmVzLFxuICAgICAgcG9wdXBXaW5kb3dUYXJnZXQsXG4gICAgICBwb3B1cFNpZ25hbCxcbiAgICAgIC4uLnJlcXVlc3RBcmdzXG4gICAgfSA9IGFyZ3M7XG4gICAgY29uc3QgdXJsID0gdGhpcy5zZXR0aW5ncy5wb3B1cF9yZWRpcmVjdF91cmk7XG4gICAgaWYgKCF1cmwpIHtcbiAgICAgIGxvZ2dlcjIudGhyb3cobmV3IEVycm9yKFwiTm8gcG9wdXBfcmVkaXJlY3RfdXJpIGNvbmZpZ3VyZWRcIikpO1xuICAgIH1cbiAgICBjb25zdCBoYW5kbGUgPSBhd2FpdCB0aGlzLl9wb3B1cE5hdmlnYXRvci5wcmVwYXJlKHsgcG9wdXBXaW5kb3dGZWF0dXJlcywgcG9wdXBXaW5kb3dUYXJnZXQsIHBvcHVwU2lnbmFsIH0pO1xuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCB0aGlzLl9zaWduaW4oe1xuICAgICAgcmVxdWVzdF90eXBlOiBcInNpOnBcIixcbiAgICAgIHJlZGlyZWN0X3VyaTogdXJsLFxuICAgICAgZGlzcGxheTogXCJwb3B1cFwiLFxuICAgICAgZHBvcEprdCxcbiAgICAgIC4uLnJlcXVlc3RBcmdzXG4gICAgfSwgaGFuZGxlKTtcbiAgICBpZiAodXNlcikge1xuICAgICAgaWYgKHVzZXIucHJvZmlsZSAmJiB1c2VyLnByb2ZpbGUuc3ViKSB7XG4gICAgICAgIGxvZ2dlcjIuaW5mbyhcInN1Y2Nlc3MsIHNpZ25lZCBpbiBzdWJqZWN0XCIsIHVzZXIucHJvZmlsZS5zdWIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nZ2VyMi5pbmZvKFwibm8gc3ViamVjdFwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVzZXI7XG4gIH1cbiAgLyoqXG4gICAqIE5vdGlmeSB0aGUgb3BlbmluZyB3aW5kb3cgb2YgcmVzcG9uc2UgKGNhbGxiYWNrKSBmcm9tIHRoZSBhdXRob3JpemF0aW9uIGVuZHBvaW50LlxuICAgKiBJdCBpcyByZWNvbW1lbmRlZCB0byB1c2Uge0BsaW5rIFVzZXJNYW5hZ2VyLnNpZ25pbkNhbGxiYWNrfSBpbnN0ZWFkLlxuICAgKlxuICAgKiBAcmV0dXJucyBBIHByb21pc2VcbiAgICpcbiAgICogQHNlZSB7QGxpbmsgVXNlck1hbmFnZXIuc2lnbmluQ2FsbGJhY2t9XG4gICAqL1xuICBhc3luYyBzaWduaW5Qb3B1cENhbGxiYWNrKHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLCBrZWVwT3BlbiA9IGZhbHNlKSB7XG4gICAgY29uc3QgbG9nZ2VyMiA9IHRoaXMuX2xvZ2dlci5jcmVhdGUoXCJzaWduaW5Qb3B1cENhbGxiYWNrXCIpO1xuICAgIGF3YWl0IHRoaXMuX3BvcHVwTmF2aWdhdG9yLmNhbGxiYWNrKHVybCwgeyBrZWVwT3BlbiB9KTtcbiAgICBsb2dnZXIyLmluZm8oXCJzdWNjZXNzXCIpO1xuICB9XG4gIC8qKlxuICAgKiBUcmlnZ2VyIGEgc2lsZW50IHJlcXVlc3QgKHZpYSByZWZyZXNoIHRva2VuIG9yIGFuIGlmcmFtZSkgdG8gdGhlIGF1dGhvcml6YXRpb24gZW5kcG9pbnQuXG4gICAqXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IGNvbnRhaW5zIHRoZSBhdXRoZW50aWNhdGVkIGBVc2VyYC5cbiAgICovXG4gIGFzeW5jIHNpZ25pblNpbGVudChhcmdzID0ge30pIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwic2lnbmluU2lsZW50XCIpO1xuICAgIGNvbnN0IHtcbiAgICAgIHNpbGVudFJlcXVlc3RUaW1lb3V0SW5TZWNvbmRzLFxuICAgICAgLi4ucmVxdWVzdEFyZ3NcbiAgICB9ID0gYXJncztcbiAgICBsZXQgdXNlciA9IGF3YWl0IHRoaXMuX2xvYWRVc2VyKCk7XG4gICAgaWYgKHVzZXIgPT0gbnVsbCA/IHZvaWQgMCA6IHVzZXIucmVmcmVzaF90b2tlbikge1xuICAgICAgbG9nZ2VyMi5kZWJ1ZyhcInVzaW5nIHJlZnJlc2ggdG9rZW5cIik7XG4gICAgICBjb25zdCBzdGF0ZSA9IG5ldyBSZWZyZXNoU3RhdGUodXNlcik7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5fdXNlUmVmcmVzaFRva2VuKHtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHJlZGlyZWN0X3VyaTogcmVxdWVzdEFyZ3MucmVkaXJlY3RfdXJpLFxuICAgICAgICByZXNvdXJjZTogcmVxdWVzdEFyZ3MucmVzb3VyY2UsXG4gICAgICAgIGV4dHJhVG9rZW5QYXJhbXM6IHJlcXVlc3RBcmdzLmV4dHJhVG9rZW5QYXJhbXMsXG4gICAgICAgIHRpbWVvdXRJblNlY29uZHM6IHNpbGVudFJlcXVlc3RUaW1lb3V0SW5TZWNvbmRzXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IGRwb3BKa3Q7XG4gICAgaWYgKChfYSA9IHRoaXMuc2V0dGluZ3MuZHBvcCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmJpbmRfYXV0aG9yaXphdGlvbl9jb2RlKSB7XG4gICAgICBkcG9wSmt0ID0gYXdhaXQgdGhpcy5nZW5lcmF0ZURQb1BKa3QodGhpcy5zZXR0aW5ncy5kcG9wKTtcbiAgICB9XG4gICAgY29uc3QgdXJsID0gdGhpcy5zZXR0aW5ncy5zaWxlbnRfcmVkaXJlY3RfdXJpO1xuICAgIGlmICghdXJsKSB7XG4gICAgICBsb2dnZXIyLnRocm93KG5ldyBFcnJvcihcIk5vIHNpbGVudF9yZWRpcmVjdF91cmkgY29uZmlndXJlZFwiKSk7XG4gICAgfVxuICAgIGxldCB2ZXJpZnlTdWI7XG4gICAgaWYgKHVzZXIgJiYgdGhpcy5zZXR0aW5ncy52YWxpZGF0ZVN1Yk9uU2lsZW50UmVuZXcpIHtcbiAgICAgIGxvZ2dlcjIuZGVidWcoXCJzdWJqZWN0IHByaW9yIHRvIHNpbGVudCByZW5ldzpcIiwgdXNlci5wcm9maWxlLnN1Yik7XG4gICAgICB2ZXJpZnlTdWIgPSB1c2VyLnByb2ZpbGUuc3ViO1xuICAgIH1cbiAgICBjb25zdCBoYW5kbGUgPSBhd2FpdCB0aGlzLl9pZnJhbWVOYXZpZ2F0b3IucHJlcGFyZSh7IHNpbGVudFJlcXVlc3RUaW1lb3V0SW5TZWNvbmRzIH0pO1xuICAgIHVzZXIgPSBhd2FpdCB0aGlzLl9zaWduaW4oe1xuICAgICAgcmVxdWVzdF90eXBlOiBcInNpOnNcIixcbiAgICAgIHJlZGlyZWN0X3VyaTogdXJsLFxuICAgICAgcHJvbXB0OiBcIm5vbmVcIixcbiAgICAgIGlkX3Rva2VuX2hpbnQ6IHRoaXMuc2V0dGluZ3MuaW5jbHVkZUlkVG9rZW5JblNpbGVudFJlbmV3ID8gdXNlciA9PSBudWxsID8gdm9pZCAwIDogdXNlci5pZF90b2tlbiA6IHZvaWQgMCxcbiAgICAgIGRwb3BKa3QsXG4gICAgICAuLi5yZXF1ZXN0QXJnc1xuICAgIH0sIGhhbmRsZSwgdmVyaWZ5U3ViKTtcbiAgICBpZiAodXNlcikge1xuICAgICAgaWYgKChfYiA9IHVzZXIucHJvZmlsZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnN1Yikge1xuICAgICAgICBsb2dnZXIyLmluZm8oXCJzdWNjZXNzLCBzaWduZWQgaW4gc3ViamVjdFwiLCB1c2VyLnByb2ZpbGUuc3ViKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ2dlcjIuaW5mbyhcIm5vIHN1YmplY3RcIik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1c2VyO1xuICB9XG4gIGFzeW5jIF91c2VSZWZyZXNoVG9rZW4oYXJncykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5fY2xpZW50LnVzZVJlZnJlc2hUb2tlbih7XG4gICAgICB0aW1lb3V0SW5TZWNvbmRzOiB0aGlzLnNldHRpbmdzLnNpbGVudFJlcXVlc3RUaW1lb3V0SW5TZWNvbmRzLFxuICAgICAgLi4uYXJnc1xuICAgIH0pO1xuICAgIGNvbnN0IHVzZXIgPSBuZXcgVXNlcih7IC4uLmFyZ3Muc3RhdGUsIC4uLnJlc3BvbnNlIH0pO1xuICAgIGF3YWl0IHRoaXMuc3RvcmVVc2VyKHVzZXIpO1xuICAgIGF3YWl0IHRoaXMuX2V2ZW50cy5sb2FkKHVzZXIpO1xuICAgIHJldHVybiB1c2VyO1xuICB9XG4gIC8qKlxuICAgKlxuICAgKiBOb3RpZnkgdGhlIHBhcmVudCB3aW5kb3cgb2YgcmVzcG9uc2UgKGNhbGxiYWNrKSBmcm9tIHRoZSBhdXRob3JpemF0aW9uIGVuZHBvaW50LlxuICAgKiBJdCBpcyByZWNvbW1lbmRlZCB0byB1c2Uge0BsaW5rIFVzZXJNYW5hZ2VyLnNpZ25pbkNhbGxiYWNrfSBpbnN0ZWFkLlxuICAgKlxuICAgKiBAcmV0dXJucyBBIHByb21pc2VcbiAgICpcbiAgICogQHNlZSB7QGxpbmsgVXNlck1hbmFnZXIuc2lnbmluQ2FsbGJhY2t9XG4gICAqL1xuICBhc3luYyBzaWduaW5TaWxlbnRDYWxsYmFjayh1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZikge1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwic2lnbmluU2lsZW50Q2FsbGJhY2tcIik7XG4gICAgYXdhaXQgdGhpcy5faWZyYW1lTmF2aWdhdG9yLmNhbGxiYWNrKHVybCk7XG4gICAgbG9nZ2VyMi5pbmZvKFwic3VjY2Vzc1wiKTtcbiAgfVxuICAvKipcbiAgICogUHJvY2VzcyBhbnkgcmVzcG9uc2UgKGNhbGxiYWNrKSBmcm9tIHRoZSBhdXRob3JpemF0aW9uIGVuZHBvaW50LCBieSBkaXNwYXRjaGluZyB0aGUgcmVxdWVzdF90eXBlXG4gICAqIGFuZCBleGVjdXRpbmcgb25lIG9mIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zOlxuICAgKiAtIHtAbGluayBVc2VyTWFuYWdlci5zaWduaW5SZWRpcmVjdENhbGxiYWNrfVxuICAgKiAtIHtAbGluayBVc2VyTWFuYWdlci5zaWduaW5Qb3B1cENhbGxiYWNrfVxuICAgKiAtIHtAbGluayBVc2VyTWFuYWdlci5zaWduaW5TaWxlbnRDYWxsYmFja31cbiAgICpcbiAgICogQHRocm93cyBgRXJyb3JgIElmIHJlcXVlc3RfdHlwZSBpcyB1bmtub3duIG9yIHNpZ25pbiBjYW5ub3QgYmUgcHJvY2Vzc2VkLlxuICAgKi9cbiAgYXN5bmMgc2lnbmluQ2FsbGJhY2sodXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWYpIHtcbiAgICBjb25zdCB7IHN0YXRlIH0gPSBhd2FpdCB0aGlzLl9jbGllbnQucmVhZFNpZ25pblJlc3BvbnNlU3RhdGUodXJsKTtcbiAgICBzd2l0Y2ggKHN0YXRlLnJlcXVlc3RfdHlwZSkge1xuICAgICAgY2FzZSBcInNpOnJcIjpcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc2lnbmluUmVkaXJlY3RDYWxsYmFjayh1cmwpO1xuICAgICAgY2FzZSBcInNpOnBcIjpcbiAgICAgICAgYXdhaXQgdGhpcy5zaWduaW5Qb3B1cENhbGxiYWNrKHVybCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInNpOnNcIjpcbiAgICAgICAgYXdhaXQgdGhpcy5zaWduaW5TaWxlbnRDYWxsYmFjayh1cmwpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgcmVzcG9uc2VfdHlwZSBpbiBzdGF0ZVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICAvKipcbiAgICogUHJvY2VzcyBhbnkgcmVzcG9uc2UgKGNhbGxiYWNrKSBmcm9tIHRoZSBlbmQgc2Vzc2lvbiBlbmRwb2ludCwgYnkgZGlzcGF0Y2hpbmcgdGhlIHJlcXVlc3RfdHlwZVxuICAgKiBhbmQgZXhlY3V0aW5nIG9uZSBvZiB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uczpcbiAgICogLSB7QGxpbmsgVXNlck1hbmFnZXIuc2lnbm91dFJlZGlyZWN0Q2FsbGJhY2t9XG4gICAqIC0ge0BsaW5rIFVzZXJNYW5hZ2VyLnNpZ25vdXRQb3B1cENhbGxiYWNrfVxuICAgKiAtIHtAbGluayBVc2VyTWFuYWdlci5zaWdub3V0U2lsZW50Q2FsbGJhY2t9XG4gICAqXG4gICAqIEB0aHJvd3MgYEVycm9yYCBJZiByZXF1ZXN0X3R5cGUgaXMgdW5rbm93biBvciBzaWdub3V0IGNhbm5vdCBiZSBwcm9jZXNzZWQuXG4gICAqL1xuICBhc3luYyBzaWdub3V0Q2FsbGJhY2sodXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWYsIGtlZXBPcGVuID0gZmFsc2UpIHtcbiAgICBjb25zdCB7IHN0YXRlIH0gPSBhd2FpdCB0aGlzLl9jbGllbnQucmVhZFNpZ25vdXRSZXNwb25zZVN0YXRlKHVybCk7XG4gICAgaWYgKCFzdGF0ZSkge1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gICAgc3dpdGNoIChzdGF0ZS5yZXF1ZXN0X3R5cGUpIHtcbiAgICAgIGNhc2UgXCJzbzpyXCI6XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnNpZ25vdXRSZWRpcmVjdENhbGxiYWNrKHVybCk7XG4gICAgICBjYXNlIFwic286cFwiOlxuICAgICAgICBhd2FpdCB0aGlzLnNpZ25vdXRQb3B1cENhbGxiYWNrKHVybCwga2VlcE9wZW4pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJzbzpzXCI6XG4gICAgICAgIGF3YWl0IHRoaXMuc2lnbm91dFNpbGVudENhbGxiYWNrKHVybCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCByZXNwb25zZV90eXBlIGluIHN0YXRlXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIC8qKlxuICAgKiBRdWVyeSBPUCBmb3IgdXNlcidzIGN1cnJlbnQgc2lnbmluIHN0YXR1cy5cbiAgICpcbiAgICogQHJldHVybnMgQSBwcm9taXNlIG9iamVjdCB3aXRoIHNlc3Npb25fc3RhdGUgYW5kIHN1YmplY3QgaWRlbnRpZmllci5cbiAgICovXG4gIGFzeW5jIHF1ZXJ5U2Vzc2lvblN0YXR1cyhhcmdzID0ge30pIHtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcInF1ZXJ5U2Vzc2lvblN0YXR1c1wiKTtcbiAgICBjb25zdCB7XG4gICAgICBzaWxlbnRSZXF1ZXN0VGltZW91dEluU2Vjb25kcyxcbiAgICAgIC4uLnJlcXVlc3RBcmdzXG4gICAgfSA9IGFyZ3M7XG4gICAgY29uc3QgdXJsID0gdGhpcy5zZXR0aW5ncy5zaWxlbnRfcmVkaXJlY3RfdXJpO1xuICAgIGlmICghdXJsKSB7XG4gICAgICBsb2dnZXIyLnRocm93KG5ldyBFcnJvcihcIk5vIHNpbGVudF9yZWRpcmVjdF91cmkgY29uZmlndXJlZFwiKSk7XG4gICAgfVxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCB0aGlzLl9sb2FkVXNlcigpO1xuICAgIGNvbnN0IGhhbmRsZSA9IGF3YWl0IHRoaXMuX2lmcmFtZU5hdmlnYXRvci5wcmVwYXJlKHsgc2lsZW50UmVxdWVzdFRpbWVvdXRJblNlY29uZHMgfSk7XG4gICAgY29uc3QgbmF2UmVzcG9uc2UgPSBhd2FpdCB0aGlzLl9zaWduaW5TdGFydCh7XG4gICAgICByZXF1ZXN0X3R5cGU6IFwic2k6c1wiLFxuICAgICAgLy8gdGhpcyBhY3RzIGxpa2UgYSBzaWduaW4gc2lsZW50XG4gICAgICByZWRpcmVjdF91cmk6IHVybCxcbiAgICAgIHByb21wdDogXCJub25lXCIsXG4gICAgICBpZF90b2tlbl9oaW50OiB0aGlzLnNldHRpbmdzLmluY2x1ZGVJZFRva2VuSW5TaWxlbnRSZW5ldyA/IHVzZXIgPT0gbnVsbCA/IHZvaWQgMCA6IHVzZXIuaWRfdG9rZW4gOiB2b2lkIDAsXG4gICAgICByZXNwb25zZV90eXBlOiB0aGlzLnNldHRpbmdzLnF1ZXJ5X3N0YXR1c19yZXNwb25zZV90eXBlLFxuICAgICAgc2NvcGU6IFwib3BlbmlkXCIsXG4gICAgICBza2lwVXNlckluZm86IHRydWUsXG4gICAgICAuLi5yZXF1ZXN0QXJnc1xuICAgIH0sIGhhbmRsZSk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGV4dHJhSGVhZGVycyA9IHt9O1xuICAgICAgY29uc3Qgc2lnbmluUmVzcG9uc2UgPSBhd2FpdCB0aGlzLl9jbGllbnQucHJvY2Vzc1NpZ25pblJlc3BvbnNlKG5hdlJlc3BvbnNlLnVybCwgZXh0cmFIZWFkZXJzKTtcbiAgICAgIGxvZ2dlcjIuZGVidWcoXCJnb3Qgc2lnbmluIHJlc3BvbnNlXCIpO1xuICAgICAgaWYgKHNpZ25pblJlc3BvbnNlLnNlc3Npb25fc3RhdGUgJiYgc2lnbmluUmVzcG9uc2UucHJvZmlsZS5zdWIpIHtcbiAgICAgICAgbG9nZ2VyMi5pbmZvKFwic3VjY2VzcyBmb3Igc3ViamVjdFwiLCBzaWduaW5SZXNwb25zZS5wcm9maWxlLnN1Yik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2Vzc2lvbl9zdGF0ZTogc2lnbmluUmVzcG9uc2Uuc2Vzc2lvbl9zdGF0ZSxcbiAgICAgICAgICBzdWI6IHNpZ25pblJlc3BvbnNlLnByb2ZpbGUuc3ViXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBsb2dnZXIyLmluZm8oXCJzdWNjZXNzLCB1c2VyIG5vdCBhdXRoZW50aWNhdGVkXCIpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5tb25pdG9yQW5vbnltb3VzU2Vzc2lvbiAmJiBlcnIgaW5zdGFuY2VvZiBFcnJvclJlc3BvbnNlKSB7XG4gICAgICAgIHN3aXRjaCAoZXJyLmVycm9yKSB7XG4gICAgICAgICAgY2FzZSBcImxvZ2luX3JlcXVpcmVkXCI6XG4gICAgICAgICAgY2FzZSBcImNvbnNlbnRfcmVxdWlyZWRcIjpcbiAgICAgICAgICBjYXNlIFwiaW50ZXJhY3Rpb25fcmVxdWlyZWRcIjpcbiAgICAgICAgICBjYXNlIFwiYWNjb3VudF9zZWxlY3Rpb25fcmVxdWlyZWRcIjpcbiAgICAgICAgICAgIGxvZ2dlcjIuaW5mbyhcInN1Y2Nlc3MgZm9yIGFub255bW91cyB1c2VyXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgc2Vzc2lvbl9zdGF0ZTogZXJyLnNlc3Npb25fc3RhdGVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cbiAgYXN5bmMgX3NpZ25pbihhcmdzLCBoYW5kbGUsIHZlcmlmeVN1Yikge1xuICAgIGNvbnN0IG5hdlJlc3BvbnNlID0gYXdhaXQgdGhpcy5fc2lnbmluU3RhcnQoYXJncywgaGFuZGxlKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5fc2lnbmluRW5kKG5hdlJlc3BvbnNlLnVybCwgdmVyaWZ5U3ViKTtcbiAgfVxuICBhc3luYyBfc2lnbmluU3RhcnQoYXJncywgaGFuZGxlKSB7XG4gICAgY29uc3QgbG9nZ2VyMiA9IHRoaXMuX2xvZ2dlci5jcmVhdGUoXCJfc2lnbmluU3RhcnRcIik7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHNpZ25pblJlcXVlc3QgPSBhd2FpdCB0aGlzLl9jbGllbnQuY3JlYXRlU2lnbmluUmVxdWVzdChhcmdzKTtcbiAgICAgIGxvZ2dlcjIuZGVidWcoXCJnb3Qgc2lnbmluIHJlcXVlc3RcIik7XG4gICAgICByZXR1cm4gYXdhaXQgaGFuZGxlLm5hdmlnYXRlKHtcbiAgICAgICAgdXJsOiBzaWduaW5SZXF1ZXN0LnVybCxcbiAgICAgICAgc3RhdGU6IHNpZ25pblJlcXVlc3Quc3RhdGUuaWQsXG4gICAgICAgIHJlc3BvbnNlX21vZGU6IHNpZ25pblJlcXVlc3Quc3RhdGUucmVzcG9uc2VfbW9kZSxcbiAgICAgICAgc2NyaXB0T3JpZ2luOiB0aGlzLnNldHRpbmdzLmlmcmFtZVNjcmlwdE9yaWdpblxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2dnZXIyLmRlYnVnKFwiZXJyb3IgYWZ0ZXIgcHJlcGFyaW5nIG5hdmlnYXRvciwgY2xvc2luZyBuYXZpZ2F0b3Igd2luZG93XCIpO1xuICAgICAgaGFuZGxlLmNsb3NlKCk7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG4gIGFzeW5jIF9zaWduaW5FbmQodXJsLCB2ZXJpZnlTdWIpIHtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcIl9zaWduaW5FbmRcIik7XG4gICAgY29uc3QgZXh0cmFIZWFkZXJzID0ge307XG4gICAgY29uc3Qgc2lnbmluUmVzcG9uc2UgPSBhd2FpdCB0aGlzLl9jbGllbnQucHJvY2Vzc1NpZ25pblJlc3BvbnNlKHVybCwgZXh0cmFIZWFkZXJzKTtcbiAgICBsb2dnZXIyLmRlYnVnKFwiZ290IHNpZ25pbiByZXNwb25zZVwiKTtcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgdGhpcy5fYnVpbGRVc2VyKHNpZ25pblJlc3BvbnNlLCB2ZXJpZnlTdWIpO1xuICAgIHJldHVybiB1c2VyO1xuICB9XG4gIGFzeW5jIF9idWlsZFVzZXIoc2lnbmluUmVzcG9uc2UsIHZlcmlmeVN1Yikge1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwiX2J1aWxkVXNlclwiKTtcbiAgICBjb25zdCB1c2VyID0gbmV3IFVzZXIoc2lnbmluUmVzcG9uc2UpO1xuICAgIGlmICh2ZXJpZnlTdWIpIHtcbiAgICAgIGlmICh2ZXJpZnlTdWIgIT09IHVzZXIucHJvZmlsZS5zdWIpIHtcbiAgICAgICAgbG9nZ2VyMi5kZWJ1ZyhcImN1cnJlbnQgdXNlciBkb2VzIG5vdCBtYXRjaCB1c2VyIHJldHVybmVkIGZyb20gc2lnbmluLiBzdWIgZnJvbSBzaWduaW46XCIsIHVzZXIucHJvZmlsZS5zdWIpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3JSZXNwb25zZSh7IC4uLnNpZ25pblJlc3BvbnNlLCBlcnJvcjogXCJsb2dpbl9yZXF1aXJlZFwiIH0pO1xuICAgICAgfVxuICAgICAgbG9nZ2VyMi5kZWJ1ZyhcImN1cnJlbnQgdXNlciBtYXRjaGVzIHVzZXIgcmV0dXJuZWQgZnJvbSBzaWduaW5cIik7XG4gICAgfVxuICAgIGF3YWl0IHRoaXMuc3RvcmVVc2VyKHVzZXIpO1xuICAgIGxvZ2dlcjIuZGVidWcoXCJ1c2VyIHN0b3JlZFwiKTtcbiAgICBhd2FpdCB0aGlzLl9ldmVudHMubG9hZCh1c2VyKTtcbiAgICByZXR1cm4gdXNlcjtcbiAgfVxuICAvKipcbiAgICogVHJpZ2dlciBhIHJlZGlyZWN0IG9mIHRoZSBjdXJyZW50IHdpbmRvdyB0byB0aGUgZW5kIHNlc3Npb24gZW5kcG9pbnQuXG4gICAqXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZVxuICAgKi9cbiAgYXN5bmMgc2lnbm91dFJlZGlyZWN0KGFyZ3MgPSB7fSkge1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwic2lnbm91dFJlZGlyZWN0XCIpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJlZGlyZWN0TWV0aG9kLFxuICAgICAgLi4ucmVxdWVzdEFyZ3NcbiAgICB9ID0gYXJncztcbiAgICBjb25zdCBoYW5kbGUgPSBhd2FpdCB0aGlzLl9yZWRpcmVjdE5hdmlnYXRvci5wcmVwYXJlKHsgcmVkaXJlY3RNZXRob2QgfSk7XG4gICAgYXdhaXQgdGhpcy5fc2lnbm91dFN0YXJ0KHtcbiAgICAgIHJlcXVlc3RfdHlwZTogXCJzbzpyXCIsXG4gICAgICBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmk6IHRoaXMuc2V0dGluZ3MucG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpLFxuICAgICAgLi4ucmVxdWVzdEFyZ3NcbiAgICB9LCBoYW5kbGUpO1xuICAgIGxvZ2dlcjIuaW5mbyhcInN1Y2Nlc3NcIik7XG4gIH1cbiAgLyoqXG4gICAqIFByb2Nlc3MgcmVzcG9uc2UgKGNhbGxiYWNrKSBmcm9tIHRoZSBlbmQgc2Vzc2lvbiBlbmRwb2ludC5cbiAgICogSXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHtAbGluayBVc2VyTWFuYWdlci5zaWdub3V0Q2FsbGJhY2t9IGluc3RlYWQuXG4gICAqXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSBjb250YWluaW5nIHNpZ25vdXQgcmVzcG9uc2VcbiAgICpcbiAgICogQHNlZSB7QGxpbmsgVXNlck1hbmFnZXIuc2lnbm91dENhbGxiYWNrfVxuICAgKi9cbiAgYXN5bmMgc2lnbm91dFJlZGlyZWN0Q2FsbGJhY2sodXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWYpIHtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcInNpZ25vdXRSZWRpcmVjdENhbGxiYWNrXCIpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5fc2lnbm91dEVuZCh1cmwpO1xuICAgIGxvZ2dlcjIuaW5mbyhcInN1Y2Nlc3NcIik7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG4gIC8qKlxuICAgKiBUcmlnZ2VyIGEgcmVkaXJlY3Qgb2YgYSBwb3B1cCB3aW5kb3cgdG8gdGhlIGVuZCBzZXNzaW9uIGVuZHBvaW50LlxuICAgKlxuICAgKiBAcmV0dXJucyBBIHByb21pc2VcbiAgICovXG4gIGFzeW5jIHNpZ25vdXRQb3B1cChhcmdzID0ge30pIHtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcInNpZ25vdXRQb3B1cFwiKTtcbiAgICBjb25zdCB7XG4gICAgICBwb3B1cFdpbmRvd0ZlYXR1cmVzLFxuICAgICAgcG9wdXBXaW5kb3dUYXJnZXQsXG4gICAgICBwb3B1cFNpZ25hbCxcbiAgICAgIC4uLnJlcXVlc3RBcmdzXG4gICAgfSA9IGFyZ3M7XG4gICAgY29uc3QgdXJsID0gdGhpcy5zZXR0aW5ncy5wb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmk7XG4gICAgY29uc3QgaGFuZGxlID0gYXdhaXQgdGhpcy5fcG9wdXBOYXZpZ2F0b3IucHJlcGFyZSh7IHBvcHVwV2luZG93RmVhdHVyZXMsIHBvcHVwV2luZG93VGFyZ2V0LCBwb3B1cFNpZ25hbCB9KTtcbiAgICBhd2FpdCB0aGlzLl9zaWdub3V0KHtcbiAgICAgIHJlcXVlc3RfdHlwZTogXCJzbzpwXCIsXG4gICAgICBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmk6IHVybCxcbiAgICAgIC8vIHdlJ3JlIHB1dHRpbmcgYSBkdW1teSBlbnRyeSBpbiBoZXJlIGJlY2F1c2Ugd2VcbiAgICAgIC8vIG5lZWQgYSB1bmlxdWUgaWQgZnJvbSB0aGUgc3RhdGUgZm9yIG5vdGlmaWNhdGlvblxuICAgICAgLy8gdG8gdGhlIHBhcmVudCB3aW5kb3csIHdoaWNoIGlzIG5lY2Vzc2FyeSBpZiB3ZVxuICAgICAgLy8gcGxhbiB0byByZXR1cm4gYmFjayB0byB0aGUgY2xpZW50IGFmdGVyIHNpZ25vdXRcbiAgICAgIC8vIGFuZCBzbyB3ZSBjYW4gY2xvc2UgdGhlIHBvcHVwIGFmdGVyIHNpZ25vdXRcbiAgICAgIHN0YXRlOiB1cmwgPT0gbnVsbCA/IHZvaWQgMCA6IHt9LFxuICAgICAgLi4ucmVxdWVzdEFyZ3NcbiAgICB9LCBoYW5kbGUpO1xuICAgIGxvZ2dlcjIuaW5mbyhcInN1Y2Nlc3NcIik7XG4gIH1cbiAgLyoqXG4gICAqIFByb2Nlc3MgcmVzcG9uc2UgKGNhbGxiYWNrKSBmcm9tIHRoZSBlbmQgc2Vzc2lvbiBlbmRwb2ludCBmcm9tIGEgcG9wdXAgd2luZG93LlxuICAgKiBJdCBpcyByZWNvbW1lbmRlZCB0byB1c2Uge0BsaW5rIFVzZXJNYW5hZ2VyLnNpZ25vdXRDYWxsYmFja30gaW5zdGVhZC5cbiAgICpcbiAgICogQHJldHVybnMgQSBwcm9taXNlXG4gICAqXG4gICAqIEBzZWUge0BsaW5rIFVzZXJNYW5hZ2VyLnNpZ25vdXRDYWxsYmFja31cbiAgICovXG4gIGFzeW5jIHNpZ25vdXRQb3B1cENhbGxiYWNrKHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLCBrZWVwT3BlbiA9IGZhbHNlKSB7XG4gICAgY29uc3QgbG9nZ2VyMiA9IHRoaXMuX2xvZ2dlci5jcmVhdGUoXCJzaWdub3V0UG9wdXBDYWxsYmFja1wiKTtcbiAgICBhd2FpdCB0aGlzLl9wb3B1cE5hdmlnYXRvci5jYWxsYmFjayh1cmwsIHsga2VlcE9wZW4gfSk7XG4gICAgbG9nZ2VyMi5pbmZvKFwic3VjY2Vzc1wiKTtcbiAgfVxuICBhc3luYyBfc2lnbm91dChhcmdzLCBoYW5kbGUpIHtcbiAgICBjb25zdCBuYXZSZXNwb25zZSA9IGF3YWl0IHRoaXMuX3NpZ25vdXRTdGFydChhcmdzLCBoYW5kbGUpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLl9zaWdub3V0RW5kKG5hdlJlc3BvbnNlLnVybCk7XG4gIH1cbiAgYXN5bmMgX3NpZ25vdXRTdGFydChhcmdzID0ge30sIGhhbmRsZSkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcIl9zaWdub3V0U3RhcnRcIik7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCB0aGlzLl9sb2FkVXNlcigpO1xuICAgICAgbG9nZ2VyMi5kZWJ1ZyhcImxvYWRlZCBjdXJyZW50IHVzZXIgZnJvbSBzdG9yYWdlXCIpO1xuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MucmV2b2tlVG9rZW5zT25TaWdub3V0KSB7XG4gICAgICAgIGF3YWl0IHRoaXMuX3Jldm9rZUludGVybmFsKHVzZXIpO1xuICAgICAgfVxuICAgICAgY29uc3QgaWRfdG9rZW4gPSBhcmdzLmlkX3Rva2VuX2hpbnQgfHwgdXNlciAmJiB1c2VyLmlkX3Rva2VuO1xuICAgICAgaWYgKGlkX3Rva2VuKSB7XG4gICAgICAgIGxvZ2dlcjIuZGVidWcoXCJzZXR0aW5nIGlkX3Rva2VuX2hpbnQgaW4gc2lnbm91dCByZXF1ZXN0XCIpO1xuICAgICAgICBhcmdzLmlkX3Rva2VuX2hpbnQgPSBpZF90b2tlbjtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHRoaXMucmVtb3ZlVXNlcigpO1xuICAgICAgbG9nZ2VyMi5kZWJ1ZyhcInVzZXIgcmVtb3ZlZCwgY3JlYXRpbmcgc2lnbm91dCByZXF1ZXN0XCIpO1xuICAgICAgY29uc3Qgc2lnbm91dFJlcXVlc3QgPSBhd2FpdCB0aGlzLl9jbGllbnQuY3JlYXRlU2lnbm91dFJlcXVlc3QoYXJncyk7XG4gICAgICBsb2dnZXIyLmRlYnVnKFwiZ290IHNpZ25vdXQgcmVxdWVzdFwiKTtcbiAgICAgIHJldHVybiBhd2FpdCBoYW5kbGUubmF2aWdhdGUoe1xuICAgICAgICB1cmw6IHNpZ25vdXRSZXF1ZXN0LnVybCxcbiAgICAgICAgc3RhdGU6IChfYSA9IHNpZ25vdXRSZXF1ZXN0LnN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2EuaWQsXG4gICAgICAgIHNjcmlwdE9yaWdpbjogdGhpcy5zZXR0aW5ncy5pZnJhbWVTY3JpcHRPcmlnaW5cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nZ2VyMi5kZWJ1ZyhcImVycm9yIGFmdGVyIHByZXBhcmluZyBuYXZpZ2F0b3IsIGNsb3NpbmcgbmF2aWdhdG9yIHdpbmRvd1wiKTtcbiAgICAgIGhhbmRsZS5jbG9zZSgpO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuICBhc3luYyBfc2lnbm91dEVuZCh1cmwpIHtcbiAgICBjb25zdCBsb2dnZXIyID0gdGhpcy5fbG9nZ2VyLmNyZWF0ZShcIl9zaWdub3V0RW5kXCIpO1xuICAgIGNvbnN0IHNpZ25vdXRSZXNwb25zZSA9IGF3YWl0IHRoaXMuX2NsaWVudC5wcm9jZXNzU2lnbm91dFJlc3BvbnNlKHVybCk7XG4gICAgbG9nZ2VyMi5kZWJ1ZyhcImdvdCBzaWdub3V0IHJlc3BvbnNlXCIpO1xuICAgIHJldHVybiBzaWdub3V0UmVzcG9uc2U7XG4gIH1cbiAgLyoqXG4gICAqIFRyaWdnZXIgYSBzaWxlbnQgcmVxdWVzdCAodmlhIGFuIGlmcmFtZSkgdG8gdGhlIGVuZCBzZXNzaW9uIGVuZHBvaW50LlxuICAgKlxuICAgKiBAcmV0dXJucyBBIHByb21pc2VcbiAgICovXG4gIGFzeW5jIHNpZ25vdXRTaWxlbnQoYXJncyA9IHt9KSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwic2lnbm91dFNpbGVudFwiKTtcbiAgICBjb25zdCB7XG4gICAgICBzaWxlbnRSZXF1ZXN0VGltZW91dEluU2Vjb25kcyxcbiAgICAgIC4uLnJlcXVlc3RBcmdzXG4gICAgfSA9IGFyZ3M7XG4gICAgY29uc3QgaWRfdG9rZW5faGludCA9IHRoaXMuc2V0dGluZ3MuaW5jbHVkZUlkVG9rZW5JblNpbGVudFNpZ25vdXQgPyAoX2EgPSBhd2FpdCB0aGlzLl9sb2FkVXNlcigpKSA9PSBudWxsID8gdm9pZCAwIDogX2EuaWRfdG9rZW4gOiB2b2lkIDA7XG4gICAgY29uc3QgdXJsID0gdGhpcy5zZXR0aW5ncy5wb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmk7XG4gICAgY29uc3QgaGFuZGxlID0gYXdhaXQgdGhpcy5faWZyYW1lTmF2aWdhdG9yLnByZXBhcmUoeyBzaWxlbnRSZXF1ZXN0VGltZW91dEluU2Vjb25kcyB9KTtcbiAgICBhd2FpdCB0aGlzLl9zaWdub3V0KHtcbiAgICAgIHJlcXVlc3RfdHlwZTogXCJzbzpzXCIsXG4gICAgICBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmk6IHVybCxcbiAgICAgIGlkX3Rva2VuX2hpbnQsXG4gICAgICAuLi5yZXF1ZXN0QXJnc1xuICAgIH0sIGhhbmRsZSk7XG4gICAgbG9nZ2VyMi5pbmZvKFwic3VjY2Vzc1wiKTtcbiAgfVxuICAvKipcbiAgICogTm90aWZ5IHRoZSBwYXJlbnQgd2luZG93IG9mIHJlc3BvbnNlIChjYWxsYmFjaykgZnJvbSB0aGUgZW5kIHNlc3Npb24gZW5kcG9pbnQuXG4gICAqIEl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB7QGxpbmsgVXNlck1hbmFnZXIuc2lnbm91dENhbGxiYWNrfSBpbnN0ZWFkLlxuICAgKlxuICAgKiBAcmV0dXJucyBBIHByb21pc2VcbiAgICpcbiAgICogQHNlZSB7QGxpbmsgVXNlck1hbmFnZXIuc2lnbm91dENhbGxiYWNrfVxuICAgKi9cbiAgYXN5bmMgc2lnbm91dFNpbGVudENhbGxiYWNrKHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmKSB7XG4gICAgY29uc3QgbG9nZ2VyMiA9IHRoaXMuX2xvZ2dlci5jcmVhdGUoXCJzaWdub3V0U2lsZW50Q2FsbGJhY2tcIik7XG4gICAgYXdhaXQgdGhpcy5faWZyYW1lTmF2aWdhdG9yLmNhbGxiYWNrKHVybCk7XG4gICAgbG9nZ2VyMi5pbmZvKFwic3VjY2Vzc1wiKTtcbiAgfVxuICBhc3luYyByZXZva2VUb2tlbnModHlwZXMpIHtcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgdGhpcy5fbG9hZFVzZXIoKTtcbiAgICBhd2FpdCB0aGlzLl9yZXZva2VJbnRlcm5hbCh1c2VyLCB0eXBlcyk7XG4gIH1cbiAgYXN5bmMgX3Jldm9rZUludGVybmFsKHVzZXIsIHR5cGVzID0gdGhpcy5zZXR0aW5ncy5yZXZva2VUb2tlblR5cGVzKSB7XG4gICAgY29uc3QgbG9nZ2VyMiA9IHRoaXMuX2xvZ2dlci5jcmVhdGUoXCJfcmV2b2tlSW50ZXJuYWxcIik7XG4gICAgaWYgKCF1c2VyKSByZXR1cm47XG4gICAgY29uc3QgdHlwZXNQcmVzZW50ID0gdHlwZXMuZmlsdGVyKCh0eXBlKSA9PiB0eXBlb2YgdXNlclt0eXBlXSA9PT0gXCJzdHJpbmdcIik7XG4gICAgaWYgKCF0eXBlc1ByZXNlbnQubGVuZ3RoKSB7XG4gICAgICBsb2dnZXIyLmRlYnVnKFwibm8gbmVlZCB0byByZXZva2UgZHVlIHRvIG5vIHRva2VuKHMpXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHR5cGUgb2YgdHlwZXNQcmVzZW50KSB7XG4gICAgICBhd2FpdCB0aGlzLl9jbGllbnQucmV2b2tlVG9rZW4oXG4gICAgICAgIHVzZXJbdHlwZV0sXG4gICAgICAgIHR5cGVcbiAgICAgICk7XG4gICAgICBsb2dnZXIyLmluZm8oYCR7dHlwZX0gcmV2b2tlZCBzdWNjZXNzZnVsbHlgKTtcbiAgICAgIGlmICh0eXBlICE9PSBcImFjY2Vzc190b2tlblwiKSB7XG4gICAgICAgIHVzZXJbdHlwZV0gPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBhd2FpdCB0aGlzLnN0b3JlVXNlcih1c2VyKTtcbiAgICBsb2dnZXIyLmRlYnVnKFwidXNlciBzdG9yZWRcIik7XG4gICAgYXdhaXQgdGhpcy5fZXZlbnRzLmxvYWQodXNlcik7XG4gIH1cbiAgLyoqXG4gICAqIEVuYWJsZXMgc2lsZW50IHJlbmV3IGZvciB0aGUgYFVzZXJNYW5hZ2VyYC5cbiAgICovXG4gIHN0YXJ0U2lsZW50UmVuZXcoKSB7XG4gICAgdGhpcy5fbG9nZ2VyLmNyZWF0ZShcInN0YXJ0U2lsZW50UmVuZXdcIik7XG4gICAgdm9pZCB0aGlzLl9zaWxlbnRSZW5ld1NlcnZpY2Uuc3RhcnQoKTtcbiAgfVxuICAvKipcbiAgICogRGlzYWJsZXMgc2lsZW50IHJlbmV3IGZvciB0aGUgYFVzZXJNYW5hZ2VyYC5cbiAgICovXG4gIHN0b3BTaWxlbnRSZW5ldygpIHtcbiAgICB0aGlzLl9zaWxlbnRSZW5ld1NlcnZpY2Uuc3RvcCgpO1xuICB9XG4gIGdldCBfdXNlclN0b3JlS2V5KCkge1xuICAgIHJldHVybiBgdXNlcjoke3RoaXMuc2V0dGluZ3MuYXV0aG9yaXR5fToke3RoaXMuc2V0dGluZ3MuY2xpZW50X2lkfWA7XG4gIH1cbiAgYXN5bmMgX2xvYWRVc2VyKCkge1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwiX2xvYWRVc2VyXCIpO1xuICAgIGNvbnN0IHN0b3JhZ2VTdHJpbmcgPSBhd2FpdCB0aGlzLnNldHRpbmdzLnVzZXJTdG9yZS5nZXQodGhpcy5fdXNlclN0b3JlS2V5KTtcbiAgICBpZiAoc3RvcmFnZVN0cmluZykge1xuICAgICAgbG9nZ2VyMi5kZWJ1ZyhcInVzZXIgc3RvcmFnZVN0cmluZyBsb2FkZWRcIik7XG4gICAgICByZXR1cm4gVXNlci5mcm9tU3RvcmFnZVN0cmluZyhzdG9yYWdlU3RyaW5nKTtcbiAgICB9XG4gICAgbG9nZ2VyMi5kZWJ1ZyhcIm5vIHVzZXIgc3RvcmFnZVN0cmluZ1wiKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBhc3luYyBzdG9yZVVzZXIodXNlcikge1xuICAgIGNvbnN0IGxvZ2dlcjIgPSB0aGlzLl9sb2dnZXIuY3JlYXRlKFwic3RvcmVVc2VyXCIpO1xuICAgIGlmICh1c2VyKSB7XG4gICAgICBsb2dnZXIyLmRlYnVnKFwic3RvcmluZyB1c2VyXCIpO1xuICAgICAgY29uc3Qgc3RvcmFnZVN0cmluZyA9IHVzZXIudG9TdG9yYWdlU3RyaW5nKCk7XG4gICAgICBhd2FpdCB0aGlzLnNldHRpbmdzLnVzZXJTdG9yZS5zZXQodGhpcy5fdXNlclN0b3JlS2V5LCBzdG9yYWdlU3RyaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbG9nZ2VyLmRlYnVnKFwicmVtb3ZpbmcgdXNlclwiKTtcbiAgICAgIGF3YWl0IHRoaXMuc2V0dGluZ3MudXNlclN0b3JlLnJlbW92ZSh0aGlzLl91c2VyU3RvcmVLZXkpO1xuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZHBvcCkge1xuICAgICAgICBhd2FpdCB0aGlzLnNldHRpbmdzLmRwb3Auc3RvcmUucmVtb3ZlKHRoaXMuc2V0dGluZ3MuY2xpZW50X2lkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgc3RhbGUgc3RhdGUgZW50cmllcyBpbiBzdG9yYWdlIGZvciBpbmNvbXBsZXRlIGF1dGhvcml6ZSByZXF1ZXN0cy5cbiAgICovXG4gIGFzeW5jIGNsZWFyU3RhbGVTdGF0ZSgpIHtcbiAgICBhd2FpdCB0aGlzLl9jbGllbnQuY2xlYXJTdGFsZVN0YXRlKCk7XG4gIH1cbiAgLyoqXG4gICAqIER5bmFtaWNhbGx5IGdlbmVyYXRlcyBhIERQb1AgcHJvb2YgZm9yIGEgZ2l2ZW4gdXNlciwgVVJMIGFuZCBvcHRpb25hbCBIdHRwIG1ldGhvZC5cbiAgICogVGhpcyBtZXRob2QgaXMgdXNlZnVsIHdoZW4geW91IG5lZWQgdG8gbWFrZSBhIHJlcXVlc3QgdG8gYSByZXNvdXJjZSBzZXJ2ZXJcbiAgICogd2l0aCBmZXRjaCBvciBzaW1pbGFyLCBhbmQgeW91IG5lZWQgdG8gaW5jbHVkZSBhIERQb1AgcHJvb2YgaW4gYSBEUG9QIGhlYWRlci5cbiAgICogQHBhcmFtIHVybCAtIFRoZSBVUkwgdG8gZ2VuZXJhdGUgdGhlIERQb1AgcHJvb2YgZm9yXG4gICAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIgdG8gZ2VuZXJhdGUgdGhlIERQb1AgcHJvb2YgZm9yXG4gICAqIEBwYXJhbSBodHRwTWV0aG9kIC0gT3B0aW9uYWwsIGRlZmF1bHRzIHRvIFwiR0VUXCJcbiAgICogQHBhcmFtIG5vbmNlIC0gT3B0aW9uYWwgbm9uY2UgcHJvdmlkZWQgYnkgdGhlIHJlc291cmNlIHNlcnZlclxuICAgKlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgY29udGFpbmluZyB0aGUgRFBvUCBwcm9vZiBvciB1bmRlZmluZWQgaWYgRFBvUCBpcyBub3QgZW5hYmxlZC9ubyB1c2VyIGlzIGZvdW5kLlxuICAgKi9cbiAgYXN5bmMgZHBvcFByb29mKHVybCwgdXNlciwgaHR0cE1ldGhvZCwgbm9uY2UpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IGRwb3BTdGF0ZSA9IGF3YWl0ICgoX2IgPSAoX2EgPSB0aGlzLnNldHRpbmdzLmRwb3ApID09IG51bGwgPyB2b2lkIDAgOiBfYS5zdG9yZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmdldCh0aGlzLnNldHRpbmdzLmNsaWVudF9pZCkpO1xuICAgIGlmIChkcG9wU3RhdGUpIHtcbiAgICAgIHJldHVybiBhd2FpdCBDcnlwdG9VdGlscy5nZW5lcmF0ZURQb1BQcm9vZih7XG4gICAgICAgIHVybCxcbiAgICAgICAgYWNjZXNzVG9rZW46IHVzZXIgPT0gbnVsbCA/IHZvaWQgMCA6IHVzZXIuYWNjZXNzX3Rva2VuLFxuICAgICAgICBodHRwTWV0aG9kLFxuICAgICAgICBrZXlQYWlyOiBkcG9wU3RhdGUua2V5cyxcbiAgICAgICAgbm9uY2VcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGFzeW5jIGdlbmVyYXRlRFBvUEprdChkcG9wU2V0dGluZ3MpIHtcbiAgICBsZXQgZHBvcFN0YXRlID0gYXdhaXQgZHBvcFNldHRpbmdzLnN0b3JlLmdldCh0aGlzLnNldHRpbmdzLmNsaWVudF9pZCk7XG4gICAgaWYgKCFkcG9wU3RhdGUpIHtcbiAgICAgIGNvbnN0IGRwb3BLZXlzID0gYXdhaXQgQ3J5cHRvVXRpbHMuZ2VuZXJhdGVEUG9QS2V5cygpO1xuICAgICAgZHBvcFN0YXRlID0gbmV3IERQb1BTdGF0ZShkcG9wS2V5cyk7XG4gICAgICBhd2FpdCBkcG9wU2V0dGluZ3Muc3RvcmUuc2V0KHRoaXMuc2V0dGluZ3MuY2xpZW50X2lkLCBkcG9wU3RhdGUpO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgQ3J5cHRvVXRpbHMuZ2VuZXJhdGVEUG9QSmt0KGRwb3BTdGF0ZS5rZXlzKTtcbiAgfVxufTtcblxuLy8gcGFja2FnZS5qc29uXG52YXIgdmVyc2lvbiA9IFwiMy4yLjBcIjtcblxuLy8gc3JjL1ZlcnNpb24udHNcbnZhciBWZXJzaW9uID0gdmVyc2lvbjtcblxuLy8gc3JjL0luZGV4ZWREYkRQb1BTdG9yZS50c1xudmFyIEluZGV4ZWREYkRQb1BTdG9yZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZGJOYW1lID0gXCJvaWRjXCI7XG4gICAgdGhpcy5fc3RvcmVOYW1lID0gXCJkcG9wXCI7XG4gIH1cbiAgYXN5bmMgc2V0KGtleSwgdmFsdWUpIHtcbiAgICBjb25zdCBzdG9yZSA9IGF3YWl0IHRoaXMuY3JlYXRlU3RvcmUodGhpcy5fZGJOYW1lLCB0aGlzLl9zdG9yZU5hbWUpO1xuICAgIGF3YWl0IHN0b3JlKFwicmVhZHdyaXRlXCIsIChzdHIpID0+IHtcbiAgICAgIHN0ci5wdXQodmFsdWUsIGtleSk7XG4gICAgICByZXR1cm4gdGhpcy5wcm9taXNpZnlSZXF1ZXN0KHN0ci50cmFuc2FjdGlvbik7XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgZ2V0KGtleSkge1xuICAgIGNvbnN0IHN0b3JlID0gYXdhaXQgdGhpcy5jcmVhdGVTdG9yZSh0aGlzLl9kYk5hbWUsIHRoaXMuX3N0b3JlTmFtZSk7XG4gICAgcmV0dXJuIGF3YWl0IHN0b3JlKFwicmVhZG9ubHlcIiwgKHN0cikgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMucHJvbWlzaWZ5UmVxdWVzdChzdHIuZ2V0KGtleSkpO1xuICAgIH0pO1xuICB9XG4gIGFzeW5jIHJlbW92ZShrZXkpIHtcbiAgICBjb25zdCBpdGVtID0gYXdhaXQgdGhpcy5nZXQoa2V5KTtcbiAgICBjb25zdCBzdG9yZSA9IGF3YWl0IHRoaXMuY3JlYXRlU3RvcmUodGhpcy5fZGJOYW1lLCB0aGlzLl9zdG9yZU5hbWUpO1xuICAgIGF3YWl0IHN0b3JlKFwicmVhZHdyaXRlXCIsIChzdHIpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLnByb21pc2lmeVJlcXVlc3Qoc3RyLmRlbGV0ZShrZXkpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuICBhc3luYyBnZXRBbGxLZXlzKCkge1xuICAgIGNvbnN0IHN0b3JlID0gYXdhaXQgdGhpcy5jcmVhdGVTdG9yZSh0aGlzLl9kYk5hbWUsIHRoaXMuX3N0b3JlTmFtZSk7XG4gICAgcmV0dXJuIGF3YWl0IHN0b3JlKFwicmVhZG9ubHlcIiwgKHN0cikgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMucHJvbWlzaWZ5UmVxdWVzdChzdHIuZ2V0QWxsS2V5cygpKTtcbiAgICB9KTtcbiAgfVxuICBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgcmVxdWVzdC5vbmNvbXBsZXRlID0gcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiByZXNvbHZlKHJlcXVlc3QucmVzdWx0KTtcbiAgICAgIHJlcXVlc3Qub25hYm9ydCA9IHJlcXVlc3Qub25lcnJvciA9ICgpID0+IHJlamVjdChyZXF1ZXN0LmVycm9yKTtcbiAgICB9KTtcbiAgfVxuICBhc3luYyBjcmVhdGVTdG9yZShkYk5hbWUsIHN0b3JlTmFtZSkge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihkYk5hbWUpO1xuICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gKCkgPT4gcmVxdWVzdC5yZXN1bHQuY3JlYXRlT2JqZWN0U3RvcmUoc3RvcmVOYW1lKTtcbiAgICBjb25zdCBkYiA9IGF3YWl0IHRoaXMucHJvbWlzaWZ5UmVxdWVzdChyZXF1ZXN0KTtcbiAgICByZXR1cm4gYXN5bmMgKHR4TW9kZSwgY2FsbGJhY2spID0+IHtcbiAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCB0eE1vZGUpO1xuICAgICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZShzdG9yZU5hbWUpO1xuICAgICAgcmV0dXJuIGF3YWl0IGNhbGxiYWNrKHN0b3JlKTtcbiAgICB9O1xuICB9XG59O1xuZXhwb3J0IHtcbiAgQWNjZXNzVG9rZW5FdmVudHMsXG4gIENoZWNrU2Vzc2lvbklGcmFtZSxcbiAgRFBvUFN0YXRlLFxuICBFcnJvclJlc3BvbnNlLFxuICBFcnJvclRpbWVvdXQsXG4gIEluTWVtb3J5V2ViU3RvcmFnZSxcbiAgSW5kZXhlZERiRFBvUFN0b3JlLFxuICBMb2csXG4gIExvZ2dlcixcbiAgTWV0YWRhdGFTZXJ2aWNlLFxuICBPaWRjQ2xpZW50LFxuICBPaWRjQ2xpZW50U2V0dGluZ3NTdG9yZSxcbiAgU2Vzc2lvbk1vbml0b3IsXG4gIFNpZ25pblJlc3BvbnNlLFxuICBTaWduaW5TdGF0ZSxcbiAgU2lnbm91dFJlc3BvbnNlLFxuICBTdGF0ZSxcbiAgVXNlcixcbiAgVXNlck1hbmFnZXIsXG4gIFVzZXJNYW5hZ2VyU2V0dGluZ3NTdG9yZSxcbiAgVmVyc2lvbixcbiAgV2ViU3RvcmFnZVN0YXRlU3RvcmVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vaWRjLWNsaWVudC10cy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/oidc-client-ts/dist/esm/oidc-client-ts.js\n");

/***/ })

};
;